/**
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "http://localhost:7071".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface SurveyQuestion {
    /**
     * This returns Guid
     */
    "questionId"?: string;
    /**
     * This returns Guid
     */
    "questionShowIf"?: string;
    /**
     * This returns String
     */
    "questionShowIfAnswer"?: string;
    /**
     * This returns String
     */
    "questionText"?: string;
    /**
     * This returns String
     */
    "questionType"?: string;
    /**
     * This returns Boolean
     */
    "isRequired"?: boolean;
    /**
     * This returns Boolean
     */
    "isHidden"?: boolean;
    /**
     * This returns Int32
     */
    "order"?: number;
    /**
     * This returns String
     */
    "tableName"?: string;
    /**
     * This returns String
     */
    "partitionKey"?: string;
    /**
     * This returns String
     */
    "rowKey"?: string;
    /**
     * This returns DateTimeOffset
     */
    "timestamp"?: string;
    /**
     * This returns String
     */
    "eTag"?: string;
}

export interface TableResult {
    /**
     * This returns Object
     */
    "result"?: string;
    /**
     * This returns Int32
     */
    "httpStatusCode"?: number;
    /**
     * This returns String
     */
    "etag"?: string;
}



/**
 * DefaultApi - fetch parameter creator
 */
export const DefaultApiFetchParamCreator = {
    /**
     * This function will run QuestionGet
     * @summary Run QuestionGet
     */
    questiongetGet(options?: any): FetchArgs {
        const baseUrl = `/api/question`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * This function will run QuestionPost
     * @summary Run QuestionPost
     * @param req 
     */
    questionpostPost(params: {  "req": SurveyQuestion; }, options?: any): FetchArgs {
        // verify required parameter "req" is set
        if (params["req"] == null) {
            throw new Error("Missing required parameter req when calling questionpostPost");
        }
        const baseUrl = `/api/question`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["req"]) {
            fetchOptions.body = JSON.stringify(params["req"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = {
    /**
     * This function will run QuestionGet
     * @summary Run QuestionGet
     */
    questiongetGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {
        const fetchArgs = DefaultApiFetchParamCreator.questiongetGet(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * This function will run QuestionPost
     * @summary Run QuestionPost
     * @param req 
     */
    questionpostPost(params: { "req": SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {
        const fetchArgs = DefaultApiFetchParamCreator.questionpostPost(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI {
    /**
     * This function will run QuestionGet
     * @summary Run QuestionGet
     */
    questiongetGet(options?: any) {
        return DefaultApiFp.questiongetGet(options)(this.fetch, this.basePath);
    }
    /**
     * This function will run QuestionPost
     * @summary Run QuestionPost
     * @param req 
     */
    questionpostPost(params: {  "req": SurveyQuestion; }, options?: any) {
        return DefaultApiFp.questionpostPost(params, options)(this.fetch, this.basePath);
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * This function will run QuestionGet
         * @summary Run QuestionGet
         */
        questiongetGet(options?: any) {
            return DefaultApiFp.questiongetGet(options)(fetch, basePath);
        },
        /**
         * This function will run QuestionPost
         * @summary Run QuestionPost
         * @param req 
         */
        questionpostPost(params: {  "req": SurveyQuestion; }, options?: any) {
            return DefaultApiFp.questionpostPost(params, options)(fetch, basePath);
        },
    };
};

