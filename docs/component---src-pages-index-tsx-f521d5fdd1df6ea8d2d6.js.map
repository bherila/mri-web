{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/models/SafetyState.ts","webpack:///./node_modules/@babel/runtime/helpers/objectDestructuringEmpty.js","webpack:///./src/api/api.ts","webpack:///./src/helpers/FormBasePage.tsx","webpack:///./src/helpers/phone.ts"],"names":["IndexPage","props","context","_FormBasePage","call","this","componentDidMount","prototype","formError","state","fname","lname","email","n","render","_this","err","react__WEBPACK_IMPORTED_MODULE_1__","createElement","_layouts__WEBPACK_IMPORTED_MODULE_2__","a","id","className","action","onSubmit","e","submitLead","htmlFor","type","maxLength","name","data-name","value","onChange","setState","currentTarget","saveState","required","style","fontWeight","fontSize","checked","optedIn","onClick","phone","Object","_helpers_phone__WEBPACK_IMPORTED_MODULE_6__","b","data-wait","disabled","preventDefault","_api_api__WEBPACK_IMPORTED_MODULE_4__","c","runPOST","req","firstName","lastName","authToken","then","resp","console","log","gatsby__WEBPACK_IMPORTED_MODULE_3__","navigate","_helpers_FormBasePage__WEBPACK_IMPORTED_MODULE_5__","__webpack_exports__","default","d","161","t","r","SafetyState","answers","implants","currentImplant","haveOrder","scan","overrideSafetyWarning","height","weight","doctorName","doctorContact","insFront","insBack","mriOrder","carrierNumber","groupNumber","policyNumber","timeSlot","dob","address1","address2","city","zip","sessionStorage","JSON","parse","getItem","loadState","jsonState","o","assign","162","module","exports","obj","TypeError","168","u","l","y","L","W","i","s","BASE_PATH","replace","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","query","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","contentTypeHeader","fetchOptions","method","Content-Type","body","stringify","headers","url","format","AuthApiFetchParamCreator","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","locationId","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesGET","availabilityRulesPOST","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","withContrast","search","ScheduleApiFetchParamCreator","length","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerDELETE","appointmentHandlerGET","appointmentHandlerPOST","appointmentHandlerPUT","timeSlotsGET","FormBasePage","_React$Component","_models_SafetyState__WEBPACK_IMPORTED_MODULE_3__","_proto","getAns","q","ans","val","_this2","setItem","react__WEBPACK_IMPORTED_MODULE_2__","Component","225","formatPhone","ph","m","exec","formatDate","date","dt"],"mappings":"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","file":"component---src-pages-index-tsx-f521d5fdd1df6ea8d2d6.js","sourcesContent":["import * as React from 'react'\r\nimport IndexLayout from '../layouts'\r\nimport {Ez123} from \"../components/breadcrumb\";\r\nimport {navigate} from \"gatsby\";\r\nimport {LeadGenApi} from \"../api/api\";\r\nimport {FormBasePage} from \"../helpers/FormBasePage\";\r\nimport {formatDate, formatPhone} from \"../helpers/phone\";\r\n\r\nclass IndexPage extends FormBasePage {\r\n\tconstructor(props, context) {\r\n\t\tsuper(props, context);\r\n\t}\r\n\tpublic componentDidMount() {\r\n\t\tsuper.componentDidMount();\r\n\t}\r\n\r\n\tpublic formError() {\r\n\t\tif (this.state.fname === '') return 'First name is required';\r\n\t\tif (this.state.lname === '') return 'Last name is required';\r\n\t\tif (this.state.email === '') return 'Email is required';\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\tconst err = this.formError();\r\n\t\treturn <IndexLayout>\r\n\t\t\t<section id=\"Q1\" className=\"vspace80 w-container\">\r\n\t\t\t\t<div className=\"vspace40 centered w-row\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h3>Ready to schedule your MRI?</h3>\r\n\t\t\t\t\t\t<p>It's easy, we'll walk you through it step by step.</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"vspace40 centered w-row\">\r\n\t\t\t\t\t<div className=\"w-hidden-small w-hidden-tiny w-col w-col-3\"/>\r\n\t\t\t\t\t<div className=\"w-col w-col-6\">\r\n\t\t\t\t\t\t<div className=\"w-form\">\r\n\t\t\t\t\t\t\t<form action=\"#\" onSubmit={(e) => this.submitLead(e)}>\r\n\t\t\t\t\t\t\t\t<label htmlFor=\"fname\">First name</label>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"w-input centered\"\r\n\t\t\t\t\t\t\t\t\tmaxLength={256}\r\n\t\t\t\t\t\t\t\t\tname=\"fname\"\r\n\t\t\t\t\t\t\t\t\tdata-name=\"First Name\"\r\n\t\t\t\t\t\t\t\t\tid=\"fname\"\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.fname}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({fname: e.currentTarget.value}, () => this.saveState())}\r\n\t\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t\t<label htmlFor=\"lname\">Last name</label>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"w-input centered\"\r\n\t\t\t\t\t\t\t\t\tmaxLength={256}\r\n\t\t\t\t\t\t\t\t\tname=\"lname\"\r\n\t\t\t\t\t\t\t\t\tdata-name=\"Last Name\"\r\n\t\t\t\t\t\t\t\t\tid=\"lname\"\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.lname}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({lname: e.currentTarget.value}, () => this.saveState())}\r\n\t\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t\t<label htmlFor=\"email\">Email Address</label>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"w-input centered\"\r\n\t\t\t\t\t\t\t\t\tmaxLength={256}\r\n\t\t\t\t\t\t\t\t\tname=\"email\"\r\n\t\t\t\t\t\t\t\t\tdata-name=\"Email\"\r\n\t\t\t\t\t\t\t\t\tid=\"email\"\r\n\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.email}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({email: e.currentTarget.value}, () => this.saveState())}\r\n\t\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t\t<div className=\"inputrow\">\r\n\t\t\t\t\t\t\t\t\t<label style={{fontWeight: 'normal', fontSize: '8pt'}}>\r\n\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.optedIn}\r\n\t\t\t\t\t\t\t\t\t\t\tvalue=\"yes\"\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => this.setState({optedIn: e.currentTarget.checked})}\r\n\t\t\t\t\t\t\t\t\t\t/>&nbsp;\r\n\t\t\t\t\t\t\t\t\t\tIt's OK to send me more information about ideal MRI. (We'll never share your information)\r\n\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<label htmlFor=\"email\">Phone</label>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"w-input centered\"\r\n\t\t\t\t\t\t\t\t\tmaxLength={256}\r\n\t\t\t\t\t\t\t\t\tname=\"phone\"\r\n\t\t\t\t\t\t\t\t\tdata-name=\"Phone\"\r\n\t\t\t\t\t\t\t\t\tid=\"phone\"\r\n\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.phone}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({phone: formatPhone(e.currentTarget.value)}, () => this.saveState())}\r\n\t\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t\tvalue=\"Let's begin!\"\r\n\t\t\t\t\t\t\t\t\tdata-wait=\"Please wait...\"\r\n\t\t\t\t\t\t\t\t\tclassName={`${err ? 'disabled ' : ''}w-button`}\r\n\t\t\t\t\t\t\t\t\tdisabled={!!err}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"w-hidden-small w-hidden-tiny w-col w-col-3\"/>\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\t\t</IndexLayout>;\r\n\t}\r\n\r\n\tprivate submitLead(e: React.FormEvent<HTMLFormElement>) {\r\n\t\te.preventDefault();\r\n\t\tnew LeadGenApi().runPOST({\r\n\t\t\treq: {\r\n\t\t\t\tfirstName: this.state.fname,\r\n\t\t\t\tlastName: this.state.lname,\r\n\t\t\t\temail: this.state.email,\r\n\t\t\t},\r\n\t\t\tauthToken: '',\r\n\t\t}).then((resp) => {\r\n\t\t\tconsole.log(resp);\r\n\t\t\tnavigate('/have-order');\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport default IndexPage\r\n","import {SlotAvailabilityTime} from \"../api/api\";\r\nimport {IScan} from \"./Scan\";\r\n\r\nexport class SafetyState {\r\n\tconstructor() {\r\n\t\tthis.fname =  '';\r\n\t\tthis.lname =  '';\r\n\t\tthis.answers =  {};\r\n\t\tthis.implants =  [];\r\n\t\tthis.currentImplant =  '';\r\n\t\tthis.scan =  null;\r\n\t\tthis.haveOrder =  false;\r\n\t\tthis.overrideSafetyWarning =  false;\r\n\t\tthis.email = '';\r\n\t\tthis.phone = '';\r\n\t\tthis.height = '';\r\n\t\tthis.weight = '';\r\n\t\tthis.doctorName = '';\r\n\t\tthis.doctorContact = '';\r\n\t\tthis.insFront = '';\r\n\t\tthis.insBack = '';\r\n\t\tthis.mriOrder = '';\r\n\t\tif (typeof sessionStorage !== 'undefined') {\r\n\t\t\tthis.timeSlot = JSON.parse(sessionStorage.getItem('timeSlot') || '{}');\r\n\t\t} else {\r\n\t\t\tthis.timeSlot = null;\r\n\t\t}\r\n\t\tthis.err = '';\r\n\t\tthis.dob = '';\r\n\t\tthis.carrierNumber = '';\r\n\t\tthis.groupNumber = '';\r\n\t\tthis.policyNumber = '';\r\n\t\tthis.address1 = '';\r\n\t\tthis.address2 = '';\r\n\t\tthis.city = '';\r\n\t\tthis.state = '';\r\n\t\tthis.zip = '';\r\n\t\tthis.optedIn = true;\r\n\t}\r\n\tpublic fname: string;\r\n\tpublic lname: string;\r\n\tpublic email: string;\r\n\tpublic phone: string;\r\n\tpublic answers: any;\r\n\tpublic implants: string[];\r\n\tpublic currentImplant: string;\r\n\tpublic haveOrder: boolean;\r\n\tpublic scan: IScan | null;\r\n\tpublic overrideSafetyWarning: boolean;\r\n\tpublic height: string;\r\n\tpublic weight: string;\r\n\tpublic doctorName: string;\r\n\tpublic doctorContact: string;\r\n\tpublic insFront: string;\r\n\tpublic insBack: string;\r\n\tpublic mriOrder: string;\r\n\tpublic carrierNumber: string;\r\n\tpublic groupNumber: string;\r\n\tpublic policyNumber: string;\r\n\tpublic timeSlot: SlotAvailabilityTime | null;\r\n\tpublic err: string;\r\n\tpublic dob: string;\r\n\tpublic address1: string;\r\n\tpublic address2: string;\r\n\tpublic city: string;\r\n\tpublic state: string;\r\n\tpublic zip: string;\r\n\tpublic optedIn: boolean;\r\n\r\n\tpublic static loadState(): SafetyState {\r\n\t\tif (typeof sessionStorage !== 'undefined') {\r\n\t\t\tconst jsonState = JSON.parse(sessionStorage.getItem('wizard') || '{}');\r\n\t\t\tconst o = {\r\n\t\t\t\t// fname: sessionStorage.getItem('fname') || '',\r\n\t\t\t\t// lname: sessionStorage.getItem('lname') || '',\r\n\t\t\t\t// email: sessionStorage.getItem('email') || '',\r\n\t\t\t\t// phone: sessionStorage.getItem('phone') || '',\r\n\t\t\t\t// height: sessionStorage.getItem('height') || '',\r\n\t\t\t\t// weight: sessionStorage.getItem('weight') || '',\r\n\t\t\t\t// doctorName: sessionStorage.getItem('doctorName') || '',\r\n\t\t\t\t// insFront: sessionStorage.getItem('insFront') || '',\r\n\t\t\t\t// insBack: sessionStorage.getItem('insBack') || '',\r\n\t\t\t\t// mriOrder: sessionStorage.getItem('mriOrder') || '',\r\n\t\t\t\tscan: JSON.parse(sessionStorage.getItem('scan') || '{}'),\r\n\t\t\t\thaveOrder: sessionStorage.getItem('haveOrder') === 'true',\r\n\t\t\t};\r\n\t\t\treturn Object.assign(new SafetyState(), jsonState, o);\r\n\t\t}\r\n\t\treturn new SafetyState();\r\n\t}\r\n}\r\n","function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}\n\nmodule.exports = _objectDestructuringEmpty;","/**\r\n * ideal MRI\r\n * Signup Center API\r\n *\r\n * OpenAPI spec version: v1\r\n * Contact: ben@herila.net\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport * as querystring from \"querystring\";\r\nimport * as url from \"url\";\r\n\r\nimport * as isomorphicFetch from \"isomorphic-fetch\";\r\nimport * as assign from \"core-js/library/fn/object/assign\";\r\n\r\ninterface Dictionary<T> { [index: string]: T; }\r\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\r\n\r\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\r\n\r\nexport interface FetchArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\nexport class BaseAPI {\r\n    basePath: string;\r\n    fetch: FetchAPI;\r\n\r\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\r\n        this.basePath = basePath;\r\n        this.fetch = fetch;\r\n    }\r\n};\r\n\r\nexport interface ApiResultListAppointment {\r\n    \"value\"?: Array<Appointment>;\r\n    \"success\"?: boolean;\r\n    \"message\"?: string;\r\n    \"stackTrace\"?: Array<Stack>;\r\n}\r\n\r\nexport interface ApiResultListAvailabilityRule {\r\n    \"value\"?: Array<AvailabilityRule>;\r\n    \"success\"?: boolean;\r\n    \"message\"?: string;\r\n    \"stackTrace\"?: Array<Stack>;\r\n}\r\n\r\nexport interface ApiResultListSlotAvailabilityDate {\r\n    \"value\"?: Array<SlotAvailabilityDate>;\r\n    \"success\"?: boolean;\r\n    \"message\"?: string;\r\n    \"stackTrace\"?: Array<Stack>;\r\n}\r\n\r\nexport interface Appointment {\r\n    \"resourceId\"?: string;\r\n    \"serviceType\"?: string;\r\n    \"serviceLength\"?: number;\r\n    \"firstName\"?: string;\r\n    \"lastName\"?: string;\r\n    \"phone\"?: string;\r\n    \"email\"?: string;\r\n    \"address1\"?: string;\r\n    \"city\"?: string;\r\n    \"state\"?: string;\r\n    \"zip\"?: string;\r\n    \"height\"?: string;\r\n    \"weight\"?: string;\r\n    \"reminder\"?: number;\r\n    \"doctorName\"?: string;\r\n    \"doctorPhone\"?: string;\r\n    \"insuranceCarrier\"?: string;\r\n    \"insuranceGroupNumber\"?: string;\r\n    \"insurancePolicyNumber\"?: string;\r\n    \"insuranceVerified\"?: boolean;\r\n    \"priorAuthObtained\"?: boolean;\r\n    \"orderEnteredToRIS\"?: boolean;\r\n    \"patientWasCalled\"?: boolean;\r\n    \"confirmed\"?: boolean;\r\n    \"orderImageUrl\"?: string;\r\n    \"insuranceFrontUrl\"?: string;\r\n    \"insuranceBackUrl\"?: string;\r\n    \"surveyDataJson\"?: string;\r\n    \"approvedDate\"?: Date;\r\n    \"submittedDate\"?: Date;\r\n    \"confirmedDate\"?: Date;\r\n    \"birthday\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface AvailabilityRule {\r\n    \"priority\"?: number;\r\n    \"resourceID\"?: string;\r\n    \"onThisDay\"?: string;\r\n    \"startTime\"?: string;\r\n    \"endTime\"?: string;\r\n    \"comment\"?: string;\r\n    \"status\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface CustomerLead {\r\n    \"firstName\"?: string;\r\n    \"lastName\"?: string;\r\n    \"dob\"?: string;\r\n    \"phone\"?: string;\r\n    \"email\"?: string;\r\n    \"serviceType\"?: string;\r\n    \"timeSlot\"?: string;\r\n    \"withContrast\"?: boolean;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface Location {\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface SlotAvailabilityDate {\r\n    \"date\"?: Date;\r\n    \"friendlyBegin\"?: string;\r\n    \"times\"?: Array<SlotAvailabilityTime>;\r\n}\r\n\r\nexport interface SlotAvailabilityTime {\r\n    \"time\"?: string;\r\n    \"resourceId\"?: string;\r\n    \"isHidden\"?: boolean;\r\n    \"isAvailable\"?: boolean;\r\n    \"isContrastAvailable\"?: boolean;\r\n    \"isContrastRequired\"?: boolean;\r\n    \"linkedAppointment\"?: Appointment;\r\n    \"slotId\"?: string;\r\n}\r\n\r\nexport interface Stack {\r\n    \"in\"?: string;\r\n    \"at\"?: string;\r\n}\r\n\r\nexport interface SurveyQuestion {\r\n    \"questionId\"?: string;\r\n    \"questionShowIf\"?: string;\r\n    \"questionShowIfAnswer\"?: string;\r\n    \"questionText\"?: string;\r\n    \"questionType\"?: string;\r\n    \"isRequired\"?: boolean;\r\n    \"isHidden\"?: boolean;\r\n    \"order\"?: number;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface TableResult {\r\n    \"result\"?: any;\r\n    \"httpStatusCode\"?: number;\r\n    \"etag\"?: string;\r\n}\r\n\r\nexport interface User {\r\n    \"apiKey\"?: string;\r\n    \"immutableId\"?: string;\r\n    \"referenceRowKey\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\n\r\n\r\n/**\r\n * AuthApi - fetch parameter creator\r\n */\r\nexport const AuthApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/auth`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * AuthApi - functional programming interface\r\n */\r\nexport const AuthApiFp = {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\r\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * AuthApi - object-oriented interface\r\n */\r\nexport class AuthApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\r\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * AuthApi - factory interface\r\n */\r\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Auth\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\r\n            return AuthApiFp.auth(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * LeadGenApi - fetch parameter creator\r\n */\r\nexport const LeadGenApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/leadGen`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/leadGen`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LeadGenApi - functional programming interface\r\n */\r\nexport const LeadGenApiFp = {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\r\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\r\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LeadGenApi - object-oriented interface\r\n */\r\nexport class LeadGenApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * LeadGenApi - factory interface\r\n */\r\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Run\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Run\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * PostQuestionApi - fetch parameter creator\r\n */\r\nexport const PostQuestionApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/question`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * PostQuestionApi - functional programming interface\r\n */\r\nexport const PostQuestionApiFp = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\r\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * PostQuestionApi - object-oriented interface\r\n */\r\nexport class PostQuestionApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\r\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * PostQuestionApi - factory interface\r\n */\r\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary GetQuestions\r\n         * @param req\r\n         */\r\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\r\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * QuestionApi - fetch parameter creator\r\n */\r\nexport const QuestionApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any): FetchArgs {\r\n        const baseUrl = `/api/question`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * QuestionApi - functional programming interface\r\n */\r\nexport const QuestionApiFp = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\r\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * QuestionApi - object-oriented interface\r\n */\r\nexport class QuestionApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any) {\r\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * QuestionApi - factory interface\r\n */\r\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary GetQuestions\r\n         */\r\n        getQuestions(options?: any) {\r\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * ResourceApi - fetch parameter creator\r\n */\r\nexport const ResourceApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param authToken\r\n     */\r\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/locations`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"locationId\": params[\"locationId\"],\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/locations`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"locationId\": params[\"locationId\"],\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ResourceApi - functional programming interface\r\n */\r\nexport const ResourceApiFp = {\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param authToken\r\n     */\r\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ResourceApi - object-oriented interface\r\n */\r\nexport class ResourceApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param authToken\r\n     */\r\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * ResourceApi - factory interface\r\n */\r\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param authToken\r\n         */\r\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Locations\r\n         * @param locationId\r\n         * @param authToken\r\n         */\r\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Locations\r\n         * @param locationId\r\n         * @param authToken\r\n         */\r\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * ScheduleApi - fetch parameter creator\r\n */\r\nexport const ScheduleApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param length\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslots`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"length\": params[\"length\"],\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ScheduleApi - functional programming interface\r\n */\r\nexport const ScheduleApiFp = {\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param length\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ScheduleApi - object-oriented interface\r\n */\r\nexport class ScheduleApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param length\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * ScheduleApi - factory interface\r\n */\r\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param req\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param req\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param req\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary TimeSlots\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param length\r\n         * @param locationId\r\n         */\r\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n","import * as React from 'react';\r\nimport {SafetyState} from \"../models/SafetyState\";\r\n\r\nexport abstract class FormBasePage extends React.Component<{}, SafetyState> {\r\n\tconstructor(props, context) {\r\n\t\tsuper(props, context);\r\n\t\tthis.state = SafetyState.loadState();\r\n\t}\r\n\r\n\tpublic getAns(q) {\r\n\t\treturn this.state.answers[q];\r\n\t}\r\n\r\n\tpublic componentDidMount() {\r\n\t\tconst state = SafetyState.loadState();\r\n\t\tthis.setState(state);\r\n\t}\r\n\r\n\tpublic ans(q, val) {\r\n\t\tconst answers = Object.assign(new SafetyState(), this.state.answers);\r\n\t\tanswers[q] = val;\r\n\t\tconsole.log(q, val, answers);\r\n\t\tthis.setState({answers}, () => this.saveState());\r\n\t}\r\n\r\n\tpublic saveState() {\r\n\t\tif (typeof sessionStorage !== 'undefined') {\r\n\t\t\tsessionStorage.setItem('wizard', JSON.stringify({\r\n\t\t\t\tanswers: this.state.answers,\r\n\t\t\t\timplants: this.state.implants,\r\n\t\t\t\tcurrentImplant: this.state.currentImplant,\r\n\t\t\t\tfname: this.state.fname,\r\n\t\t\t\tlname: this.state.lname,\r\n\t\t\t\temail: this.state.email,\r\n\t\t\t\tphone: this.state.phone,\r\n\t\t\t\theight: this.state.height,\r\n\t\t\t\tweight: this.state.weight,\r\n\t\t\t\tdoctorName: this.state.doctorName,\r\n\t\t\t\tdoctorContact: this.state.doctorContact,\r\n\t\t\t\tinsFront: this.state.insFront,\r\n\t\t\t\tinsBack: this.state.insBack,\r\n\t\t\t\tmriOrder: this.state.mriOrder,\r\n\t\t\t\tscan: this.state.scan || null,\r\n\t\t\t\thaveOrder: this.state.haveOrder,\r\n\t\t\t\tdob: this.state.dob,\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\tabstract render();\r\n}","export function formatPhone(phone: string) {\r\n\tconst ph = phone.replace(/[^\\d9]+/g, '');\r\n\tconst m = /([0-9]{3})([0-9]{3})([0-9]{4})/.exec(ph);\r\n\tif (m !== null && m.length === 4) {\r\n\t\treturn `(${m[1]}) ${m[2]}-${m[3]}`;\r\n\t}\r\n\treturn ph;\r\n}\r\n\r\nexport function formatDate(date: string) {\r\n\tconst dt = date.replace(/[^\\d]+/g, '');\r\n\tconst m = /([0-9]{2})\\/?([0-9]{2})\\/?([0-9]{4})/.exec(dt);\r\n\tif (m !== null && m.length === 4) {\r\n\t\treturn `${m[1]}/${m[2]}/${m[3]}`;\r\n\t}\r\n\treturn date;\r\n}"],"sourceRoot":""}