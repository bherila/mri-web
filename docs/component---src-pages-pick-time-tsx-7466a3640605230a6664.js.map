{"version":3,"sources":["webpack:///./src/components/pick-time-component.tsx","webpack:///./src/pages/pick-time.tsx","webpack:///./src/models/SafetyState.ts","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./src/api/api.ts","webpack:///./src/components/breadcrumb.tsx","webpack:///./src/helpers/FormBasePage.tsx"],"names":["pick_time_component_TimePickWidget","_React$Component","TimePickWidget","props","context","_this","call","this","state","err","offset","total","qna","SafetyState","a","loadState","times","showModal","inheritsLoose_default","_proto","prototype","componentDidMount","_this2","api","f","timeSlotsGET","withContrast","scan","contrast","locationId","then","result","value","setState","length","message","renderSlotAvailabilityDate","dt","needConfirm","_this3","react","createElement","className","style","whiteSpace","friendlyBegin","map","timeSlot","key","time","href","isAvailable","onClick","pickTime","renderModal","_this4","lib_default","isOpen","overlayClassName","type","Object","gatsby_browser_entry","navigate","render","_this5","_this$state","Fragment","date","i","JSON","stringify","onPick","Component","pick_time_PickTimePage","PickTimePage","sessionStorage","location","layouts","id","breadcrumb","num","b","fname","setItem","appointmentHandlerDELETE","authToken","req","FormBasePage","getAppointment","e","__webpack_exports__","default","p","161","t","n","d","r","lname","email","phone","answers","implants","currentImplant","haveOrder","overrideSafetyWarning","height","weight","doctorName","doctorContact","insFront","insBack","mriOrder","carrierNumber","groupNumber","policyNumber","dob","address1","address2","city","zip","optedIn","validationResult","parse","getItem","jsonState","o","assign","165","dP","__webpack_require__","FProto","Function","nameRE","configurable","get","match","166","u","y","E","D","$","s","BASE_PATH","replace","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","query","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","contentTypeHeader","fetchOptions","method","Content-Type","body","headers","url","format","AuthApiFetchParamCreator","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","runPOST","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesGET","availabilityRulesPOST","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","search","ScheduleApiFetchParamCreator","skip","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerGET","appointmentHandlerPOST","appointmentHandlerPUT","Chevron","react__WEBPACK_IMPORTED_MODULE_2__","src","width","alt","translucent","Ez123","OrderBreadcrumb","gatsby__WEBPACK_IMPORTED_MODULE_3__","Link","to","display","MriTypeBreadcrumb","_ref","name","TimeslotBreadcrumb","slot","slotId","reserved","168","_models_SafetyState__WEBPACK_IMPORTED_MODULE_3__","setAppointment","appt","getAns","q","console","log","ans","val","saveState"],"mappings":"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","file":"component---src-pages-pick-time-tsx-7466a3640605230a6664.js","sourcesContent":["import * as React from 'react'\nimport * as Api from '../api/api'\nimport IndexLayout from '../layouts'\nimport {Ez123, MriTypeBreadcrumb} from \"../components/breadcrumb\";\nimport {navigate} from \"gatsby\";\nimport {SafetyState} from \"../models/SafetyState\";\nimport ReactModal from 'react-modal';\nimport {IScan} from \"../models/Scan\";\n\nconst take = 4;\n\ninterface TimePickState {\n\terr: any,\n\toffset: number;\n\ttotal: number;\n\tqna: SafetyState;\n\ttimes: Api.SlotAvailabilityDate[];\n\tshowModal: boolean;\n}\n\nexport class TimePickWidget extends React.Component<{scan: IScan, onPick: (time: Api.SlotAvailabilityTime) => any}, TimePickState> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\terr: '',\n\t\t\toffset: 0,\n\t\t\ttotal: 14,\n\t\t\tqna: SafetyState.loadState(),\n\t\t\ttimes: [],\n\t\t\tshowModal: false,\n\t\t};\n\t}\n\n\tpublic componentDidMount() {\n\t\tnew Api.ScheduleApi().timeSlotsGET({\n\t\t\twithContrast: this.props.scan.contrast === 'with and without contrast',\n\t\t\tlocationId: ''\n\t\t}).then((result) => {\n\t\t\tif (result.value) {\n\t\t\t\tthis.setState({\n\t\t\t\t\ttimes: result.value || [],\n\t\t\t\t\ttotal: result.value.length || 0,\n\t\t\t\t\tqna: SafetyState.loadState(),\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({\n\t\t\t\t\terr: result.message || 'Error',\n\t\t\t\t\tqna: SafetyState.loadState(),\n\t\t\t\t});\n\t\t\t}\n\t\t}, (err) => this.setState({\n\t\t\terr,\n\t\t\tqna: SafetyState.loadState(),\n\t\t}));\n\t}\n\n\tpublic renderSlotAvailabilityDate(dt: Api.SlotAvailabilityDate, needConfirm: boolean) {\n\t\treturn (\n\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t<h3 style={{whiteSpace: 'nowrap'}}>{dt.friendlyBegin}</h3>\n\t\t\t\t{dt.times ? dt.times.map((timeSlot) => (\n\t\t\t\t\t<a key={timeSlot.time}\n\t\t\t\t\t   href=\"#\"\n\t\t\t\t\t   className={`buttontimeslot ${timeSlot.isAvailable ? '' : 'unavailable '}w-button`}\n\t\t\t\t\t   onClick={() => this.pickTime(timeSlot, needConfirm)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{timeSlot.time}\n\t\t\t\t\t</a>\n\t\t\t\t)) : <div>dt.times is {typeof dt.times}</div>}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tpublic renderModal() {\n\t\treturn (\n\t\t\t<ReactModal\n\t\t\t\tisOpen={this.state.showModal}\n\t\t\t\tclassName=\"modal-content animated fadeInUp\"\n\t\t\t\toverlayClassName=\"modal-wrapper\"\n\t\t\t>\n\t\t\t\t<p><b>The time you selected is tomorrow.</b></p>\n\t\t\t\t<p>We won't have time to obtain prior authorization from your insurance carrier. If you aren't using insurance, this won't be a problem.</p>\n\t\t\t\t<p>Are you sure you want to select this time?</p>\n\t\t\t\t<p>\n\t\t\t\t\t<button type=\"button\"\n\t\t\t\t\t\t\tclassName=\"button w-button\"\n\t\t\t\t\t\t\tonClick={() => navigate('/addl-info')}>\n\t\t\t\t\t\tYes, continue\n\t\t\t\t\t</button>\n\t\t\t\t\t<button type=\"button\"\n\t\t\t\t\t\t\tclassName=\"button w-button\"\n\t\t\t\t\t\t\tonClick={() => this.setState({showModal: false})}>\n\t\t\t\t\t\tNo, change time\n\t\t\t\t\t</button>\n\t\t\t\t</p>\n\t\t\t</ReactModal>\n\t\t);\n\t}\n\n\tpublic render() {\n\t\tconst {offset, total, err, times} = this.state;\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<div className=\"w-row\">\n\t\t\t\t\t<div className=\"w-col w-col-2\">\n\t\t\t\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t\t\t\t{offset > 0 && (\n\t\t\t\t\t\t\t\t<a href=\"#\"\n\t\t\t\t\t\t\t\t   onClick={() => this.setState({offset: offset - 1})}\n\t\t\t\t\t\t\t\t   className=\"buttontimeslot w-button\">\n\t\t\t\t\t\t\t\t\t&laquo; Earlier Dates\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{times && times.map((date, i) => (\n\t\t\t\t\t\t(i >= offset && (i - offset) < take) && (\n\t\t\t\t\t\t\t<div key={JSON.stringify(date || i)} className=\"w-col w-col-2\">\n\t\t\t\t\t\t\t\t{this.renderSlotAvailabilityDate(date, i < 1)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t))}\n\t\t\t\t\t{offset + take < total && (\n\t\t\t\t\t\t<div className=\"w-col w-col-2\">\n\t\t\t\t\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t\t\t\t\t<a href=\"#\"\n\t\t\t\t\t\t\t\t   onClick={() => this.setState({offset: offset + 1})}\n\t\t\t\t\t\t\t\t   className=\"buttontimeslot w-button\">\n\t\t\t\t\t\t\t\t\tLater Dates &gt;&gt;\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t{this.renderModal()}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n\n\tprivate pickTime(timeSlot: Api.SlotAvailabilityTime, needConfirm: boolean) {\n\t\tif (timeSlot.isAvailable) {\n\t\t\tif (needConfirm) {\n\t\t\t\tthis.setState({showModal: true});\n\t\t\t} else {\n\t\t\t\tthis.props.onPick(timeSlot);\n\t\t\t}\n\t\t}\n\t}\n}","import * as React from 'react'\nimport * as Api from '../api/api'\nimport IndexLayout from '../layouts'\nimport {Ez123, MriTypeBreadcrumb} from \"../components/breadcrumb\";\nimport {navigate} from \"gatsby\";\nimport {SafetyState} from \"../models/SafetyState\";\nimport {ScheduleApi} from \"../api/api\";\nimport {FormBasePage} from \"../helpers/FormBasePage\";\nimport {TimePickWidget} from \"../components/pick-time-component\";\n\ninterface IState\n{\n\tqna: SafetyState;\n}\n\nclass PickTimePage extends React.Component<{}, IState> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\tqna: SafetyState.loadState(),\n\t\t};\n\t}\n\n\tpublic componentDidMount() {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst scan = this.state.qna.scan;\n\t\t\tif (!scan) {\n\t\t\t\tlocation.href = '/?err=no-scan';\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tqna: SafetyState.loadState(),\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<IndexLayout>\n\t\t\t<section id=\"Q2\" className=\"vspace80 w-container\">\n\t\t\t\t<div>\n\t\t\t\t\t<Ez123 num={2} />\n\t\t\t\t\t<div className=\"breadcrumb-stack animated zoomIn\">\n\t\t\t\t\t\t<MriTypeBreadcrumb value={this.state.qna.scan}/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"w-row\">\n\t\t\t\t\t<div className=\"centered w-col w-col-3 w-hidden-tiny\" />\n\t\t\t\t\t<div className=\"centered w-col w-col-6\">\n\t\t\t\t\t\t<h3>Almost done, {this.state.qna.fname}!</h3>\n\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\tChoose an available time slot to book\n\t\t\t\t\t\t\tyour {this.state.qna.scan && this.state.qna.scan.time} appointment.\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tIf you're interested in a same day appointment, please call us at\n\t\t\t\t\t\t\t<a href=\"tel:+18334332567\">1 833-IDEAL-MR</a>.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{this.state.qna.scan && (\n\t\t\t\t\t<TimePickWidget\n\t\t\t\t\t\tonPick={(timeSlot) => this.pickTime(timeSlot)}\n\t\t\t\t\t\tscan={this.state.qna.scan}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</section>\n\t\t\t</IndexLayout>\n\t\t);\n\t}\n\n\tprivate pickTime(timeSlot: Api.SlotAvailabilityTime) {\n\t\tif (timeSlot.isAvailable) {\n\t\t\tsessionStorage.setItem('timeSlot', JSON.stringify(timeSlot));\n\n\t\t\t// attempt to release the time slot\n\t\t\tnew ScheduleApi().appointmentHandlerDELETE({\n\t\t\t\tauthToken: '',\n\t\t\t\treq: FormBasePage.getAppointment()\n\t\t\t});\n\t\t\tnavigate('/addl-info');\n\t\t}\n\t}\n}\n\nexport default PickTimePage;\n","import {SlotAvailabilityTime} from \"../api/api\";\nimport {IScan} from \"./Scan\";\n\nexport class SafetyState {\n\tconstructor() {\n\t\tthis.fname = '';\n\t\tthis.lname = '';\n\t\tthis.answers = {};\n\t\tthis.implants = [];\n\t\tthis.currentImplant = '';\n\t\tthis.scan = null;\n\t\tthis.haveOrder = false;\n\t\tthis.overrideSafetyWarning = false;\n\t\tthis.email = '';\n\t\tthis.phone = '';\n\t\tthis.height = '';\n\t\tthis.weight = '';\n\t\tthis.doctorName = '';\n\t\tthis.doctorContact = '';\n\t\tthis.insFront = '';\n\t\tthis.insBack = '';\n\t\tthis.mriOrder = '';\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tthis.timeSlot = JSON.parse(sessionStorage.getItem('timeSlot') || '{}');\n\t\t} else {\n\t\t\tthis.timeSlot = null;\n\t\t}\n\t\tthis.err = '';\n\t\tthis.dob = '';\n\t\tthis.carrierNumber = '';\n\t\tthis.groupNumber = '';\n\t\tthis.policyNumber = '';\n\t\tthis.address1 = '';\n\t\tthis.address2 = '';\n\t\tthis.city = '';\n\t\tthis.state = '';\n\t\tthis.zip = '';\n\t\tthis.optedIn = true;\n\t\tthis.validationResult = [];\n\t}\n\n\tpublic fname: string;\n\tpublic lname: string;\n\tpublic email: string;\n\tpublic phone: string;\n\tpublic answers: any;\n\tpublic implants: string[];\n\tpublic currentImplant: string;\n\tpublic haveOrder: boolean;\n\tpublic scan: IScan | null;\n\tpublic overrideSafetyWarning: boolean;\n\tpublic height: string;\n\tpublic weight: string;\n\tpublic doctorName: string;\n\tpublic doctorContact: string;\n\tpublic insFront: string;\n\tpublic insBack: string;\n\tpublic mriOrder: string;\n\tpublic carrierNumber: string;\n\tpublic groupNumber: string;\n\tpublic policyNumber: string;\n\tpublic timeSlot: SlotAvailabilityTime | null;\n\tpublic err: string;\n\tpublic dob: string;\n\tpublic address1: string;\n\tpublic address2: string;\n\tpublic city: string;\n\tpublic state: string;\n\tpublic zip: string;\n\tpublic optedIn: boolean;\n\tpublic validationResult: string[];\n\n\tpublic static loadState(): SafetyState {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst jsonState = JSON.parse(sessionStorage.getItem('wizard') || '{}');\n\t\t\tconst o = {\n\t\t\t\t// fname: sessionStorage.getItem('fname') || '',\n\t\t\t\t// lname: sessionStorage.getItem('lname') || '',\n\t\t\t\t// email: sessionStorage.getItem('email') || '',\n\t\t\t\t// phone: sessionStorage.getItem('phone') || '',\n\t\t\t\t// height: sessionStorage.getItem('height') || '',\n\t\t\t\t// weight: sessionStorage.getItem('weight') || '',\n\t\t\t\t// doctorName: sessionStorage.getItem('doctorName') || '',\n\t\t\t\t// insFront: sessionStorage.getItem('insFront') || '',\n\t\t\t\t// insBack: sessionStorage.getItem('insBack') || '',\n\t\t\t\t// mriOrder: sessionStorage.getItem('mriOrder') || '',\n\t\t\t\tscan: JSON.parse(sessionStorage.getItem('scan') || '{}'),\n\t\t\t\thaveOrder: sessionStorage.getItem('haveOrder') === 'true',\n\t\t\t};\n\t\t\treturn Object.assign(new SafetyState(), jsonState, o);\n\t\t}\n\t\treturn new SafetyState();\n\t}\n}\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","/**\n * ideal MRI\n * Signup Center API\n *\n * OpenAPI spec version: v1\n * Contact: ben@herila.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as querystring from \"querystring\";\nimport * as url from \"url\";\n\nimport * as isomorphicFetch from \"isomorphic-fetch\";\nimport * as assign from \"core-js/library/fn/object/assign\";\n\ninterface Dictionary<T> { [index: string]: T; }\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\n\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\nexport class BaseAPI {\n    basePath: string;\n    fetch: FetchAPI;\n\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\n        this.basePath = basePath;\n        this.fetch = fetch;\n    }\n};\n\nexport interface ApiResultListAppointment {\n    \"value\"?: Array<Appointment>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListAvailabilityRule {\n    \"value\"?: Array<AvailabilityRule>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListSlotAvailabilityDate {\n    \"value\"?: Array<SlotAvailabilityDate>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface Appointment {\n    \"resourceId\"?: string;\n    \"serviceType\"?: string;\n    \"serviceLength\"?: number;\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"address1\"?: string;\n    \"address2\"?: string;\n    \"city\"?: string;\n    \"state\"?: string;\n    \"zip\"?: string;\n    \"height\"?: string;\n    \"weight\"?: string;\n    \"reminder\"?: number;\n    \"doctorName\"?: string;\n    \"doctorPhone\"?: string;\n    \"insuranceCarrier\"?: string;\n    \"insuranceGroupNumber\"?: string;\n    \"insurancePolicyNumber\"?: string;\n    \"insuranceVerified\"?: boolean;\n    \"priorAuthObtained\"?: boolean;\n    \"orderEnteredToRIS\"?: boolean;\n    \"patientWasCalled\"?: boolean;\n    \"confirmed\"?: boolean;\n    \"orderImageUrl\"?: string;\n    \"insuranceFrontUrl\"?: string;\n    \"insuranceBackUrl\"?: string;\n    \"surveyDataJson\"?: string;\n    \"safetyWarnings\"?: string;\n    \"approvedDate\"?: Date;\n    \"submittedDate\"?: Date;\n    \"confirmedDate\"?: Date;\n    \"birthday\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface AvailabilityRule {\n    \"priority\"?: number;\n    \"resourceID\"?: string;\n    \"onThisDay\"?: string;\n    \"startTime\"?: string;\n    \"endTime\"?: string;\n    \"comment\"?: string;\n    \"status\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface CustomerLead {\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"dob\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"serviceType\"?: string;\n    \"timeSlot\"?: string;\n    \"withContrast\"?: boolean;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface Location {\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface SlotAvailabilityDate {\n    \"date\"?: Date;\n    \"friendlyBegin\"?: string;\n    \"times\"?: Array<SlotAvailabilityTime>;\n}\n\nexport interface SlotAvailabilityTime {\n    \"time\"?: string;\n    \"resourceId\"?: string;\n    \"isHidden\"?: boolean;\n    \"isAvailable\"?: boolean;\n    \"isContrastAvailable\"?: boolean;\n    \"isContrastRequired\"?: boolean;\n    \"linkedAppointment\"?: Appointment;\n    \"slotId\"?: string;\n}\n\nexport interface Stack {\n    \"in\"?: string;\n    \"at\"?: string;\n}\n\nexport interface SurveyQuestion {\n    \"questionId\"?: string;\n    \"questionShowIf\"?: string;\n    \"questionShowIfAnswer\"?: string;\n    \"questionText\"?: string;\n    \"questionType\"?: string;\n    \"isRequired\"?: boolean;\n    \"isHidden\"?: boolean;\n    \"order\"?: number;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface TableResult {\n    \"result\"?: any;\n    \"httpStatusCode\"?: number;\n    \"etag\"?: string;\n}\n\nexport interface User {\n    \"apiKey\"?: string;\n    \"immutableId\"?: string;\n    \"referenceRowKey\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\n\n\n/**\n * AuthApi - fetch parameter creator\n */\nexport const AuthApiFetchParamCreator = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/auth`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * AuthApi - functional programming interface\n */\nexport const AuthApiFp = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * AuthApi - object-oriented interface\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * AuthApi - factory interface\n */\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Auth\n         * @param req\n         * @param authToken\n         */\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n            return AuthApiFp.auth(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * LeadGenApi - fetch parameter creator\n */\nexport const LeadGenApiFetchParamCreator = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * LeadGenApi - functional programming interface\n */\nexport const LeadGenApiFp = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * LeadGenApi - object-oriented interface\n */\nexport class LeadGenApi extends BaseAPI {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * LeadGenApi - factory interface\n */\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * PostQuestionApi - fetch parameter creator\n */\nexport const PostQuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * PostQuestionApi - functional programming interface\n */\nexport const PostQuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * PostQuestionApi - object-oriented interface\n */\nexport class PostQuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * PostQuestionApi - factory interface\n */\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         * @param req\n         */\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * QuestionApi - fetch parameter creator\n */\nexport const QuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * QuestionApi - functional programming interface\n */\nexport const QuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * QuestionApi - object-oriented interface\n */\nexport class QuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any) {\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * QuestionApi - factory interface\n */\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         */\n        getQuestions(options?: any) {\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ResourceApi - fetch parameter creator\n */\nexport const ResourceApiFetchParamCreator = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ResourceApi - functional programming interface\n */\nexport const ResourceApiFp = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ResourceApi - object-oriented interface\n */\nexport class ResourceApi extends BaseAPI {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ResourceApi - factory interface\n */\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param authToken\n         */\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ScheduleApi - fetch parameter creator\n */\nexport const ScheduleApiFetchParamCreator = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslots`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"length\": params[\"length\"],\n            \"locationId\": params[\"locationId\"],\n            \"skip\": params[\"skip\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ScheduleApi - functional programming interface\n */\nexport const ScheduleApiFp = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ScheduleApi - object-oriented interface\n */\nexport class ScheduleApi extends BaseAPI {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any) {\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ScheduleApi - factory interface\n */\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary TimeSlots\n         * @param authToken\n         * @param withContrast\n         * @param length\n         * @param locationId\n         */\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\n        },\n    };\n};\n\n","import * as React from 'react';\nimport {Link} from 'gatsby';\nimport {SlotAvailabilityTime} from \"../api/api\";\n\nconst Chevron = (props: {translucent?: boolean}) => (\n\t<img\n\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5be12c8e888fb5963088dc64_chevron-right-blue-2.svg\"\n\t\twidth=\"38\" height=\"38\" alt=\"Chevron right\" className={props.translucent ? 'translucent' : ''}/>\n);\n\nexport const Ez123 = (props: {num: number}) => (\n\t<div>\n\t\t<div className=\"breadcrumb-row\">\n\t\t\t<div className={'circled ' + (props.num < 1 ? 'translucent' : '') }>1</div>\n\t\t\t<Chevron translucent={props.num < 2} />\n\t\t\t<div className={'circled ' + (props.num < 2 ? 'translucent' : '') }>2</div>\n\t\t\t<Chevron translucent={props.num < 3} />\n\t\t\t<div className={'circled ' + (props.num < 3 ? 'translucent' : '') }>3</div>\n\t\t</div>\n\t\t<div className=\"breadcrumb-row\">\n\t\t\t{props.num === 1 && <h3><strong>Step 1.</strong> Your details</h3>}\n\t\t\t{props.num === 2 && <h3><strong>Step 2.</strong> Choose your scan</h3>}\n\t\t\t{props.num === 3 && <h3><strong>Step 3.</strong> Health &amp; Safety Information</h3>}\n\t\t</div>\n\t</div>\n);\n\nexport const OrderBreadcrumb = (props: {value: boolean}) => (\n    <Link to=\"/have-order\"\n       className=\"breadcrumb w-button\" style={{display: 'none'}}>\n\t\t{props.value ? 'Have Doctor\\'s Order' : 'No Order'} ✓\n\t</Link>\n);\n\nexport const MriTypeBreadcrumb = ({value}) => {\n\tif (!value) {\n\t\treturn (\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\t\tClick here to select MRI type\n\t\t\t</Link>\n\t\t);\n\t}\n\tif (typeof value === 'string') {\n\t\treturn (\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\t\tScan type: {value} &times;\n\t\t\t</Link>\n\t\t);\n\t}\n\treturn (\n\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\tScan type: {value.name || 'e!name'} {value.contrast || 'e!contrast'} &times;\n\t\t</Link>\n\t)\n};\n\nexport const TimeslotBreadcrumb = (props: {slot: SlotAvailabilityTime | null, reserved?: boolean}) => (\n\t!!props.slot ? (\n\t\t<Link to=\"/pick-time\" className=\"breadcrumb w-button\">\n\t\t\t{(props.slot.slotId || 'no time selected').replace(/(\\d{4})-(\\d{2})-(\\d{2})T([^\\s]{5}).*/g, \"$2/$3/$1 at $4\")} &times;<br /><small>({props.reserved ? 'reserved' : 'not yet reserved'})</small>\n\t\t</Link>\n\t) : <div />\n);\n","import * as React from 'react';\nimport {SafetyState} from \"../models/SafetyState\";\nimport {Appointment} from \"../api/api\";\n\nexport abstract class FormBasePage extends React.Component<{}, SafetyState> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = SafetyState.loadState();\n\t}\n\n\tpublic static setAppointment(appt: Appointment | null) {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tsessionStorage.setItem('appointmentEntity', JSON.stringify(appt || null));\n\t\t}\n\t}\n\n\tpublic static getAppointment(): Appointment {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst json = sessionStorage.getItem('appointmentEntity') || '{}';\n\t\t\treturn JSON.parse(json);\n\t\t}\n\t\treturn {};\n\t}\n\n\tpublic getAns(q) {\n\t\treturn this.state.answers[q];\n\t}\n\n\tpublic componentDidMount() {\n\t\tconst state = SafetyState.loadState();\n\t\tthis.setState(state);\n\t\tconsole.log('Loaded SafetyState', state);\n\t}\n\n\tpublic ans(q, val) {\n\t\tconst answers = Object.assign(new SafetyState(), this.state.answers);\n\t\tanswers[q] = val;\n\t\tconsole.log(q, val, answers);\n\t\tthis.setState({answers}, () => this.saveState());\n\t}\n\n\tpublic saveState() {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tsessionStorage.setItem('wizard', JSON.stringify({\n\t\t\t\tanswers: this.state.answers,\n\t\t\t\timplants: this.state.implants,\n\t\t\t\tcurrentImplant: this.state.currentImplant,\n\t\t\t\tfname: this.state.fname,\n\t\t\t\tlname: this.state.lname,\n\t\t\t\temail: this.state.email,\n\t\t\t\tphone: this.state.phone,\n\t\t\t\theight: this.state.height,\n\t\t\t\tweight: this.state.weight,\n\t\t\t\tdoctorName: this.state.doctorName,\n\t\t\t\tdoctorContact: this.state.doctorContact,\n\t\t\t\tinsFront: this.state.insFront,\n\t\t\t\tinsBack: this.state.insBack,\n\t\t\t\tmriOrder: this.state.mriOrder,\n\t\t\t\tscan: this.state.scan || null,\n\t\t\t\thaveOrder: this.state.haveOrder,\n\t\t\t\tdob: this.state.dob,\n\t\t\t}));\n\t\t}\n\t}\n\n\tabstract render();\n}"],"sourceRoot":""}