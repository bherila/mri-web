{"version":3,"sources":["webpack:///./src/pages/pick-time.tsx","webpack:///./src/models/SafetyState.ts","webpack:///./src/api/api.ts","webpack:///./node_modules/@babel/runtime/helpers/objectDestructuringEmpty.js","webpack:///./src/helpers/FormBasePage.tsx","webpack:///./src/components/breadcrumb.tsx","webpack:///./src/components/pick-time-component.tsx"],"names":["PickTimePage","props","context","_this","_React$Component","call","this","state","qna","_models_SafetyState__WEBPACK_IMPORTED_MODULE_5__","a","loadState","componentDidMount","sessionStorage","scan","location","href","setState","render","_this2","react__WEBPACK_IMPORTED_MODULE_1__","createElement","_layouts__WEBPACK_IMPORTED_MODULE_2__","id","className","_components_breadcrumb__WEBPACK_IMPORTED_MODULE_3__","num","b","value","fname","time","_components_pick_time_component__WEBPACK_IMPORTED_MODULE_8__","onPick","timeSlot","pickTime","isAvailable","setItem","JSON","stringify","_api_api__WEBPACK_IMPORTED_MODULE_6__","f","appointmentHandlerDELETE","authToken","req","_helpers_FormBasePage__WEBPACK_IMPORTED_MODULE_7__","getAppointment","Object","gatsby__WEBPACK_IMPORTED_MODULE_4__","navigate","e","Component","__webpack_exports__","default","m","163","t","n","d","r","SafetyState","lname","email","phone","answers","implants","currentImplant","haveOrder","overrideSafetyWarning","height","weight","doctorName","doctorContact","insFront","insBack","mriOrder","carrierNumber","groupNumber","policyNumber","err","dob","address1","address2","city","zip","optedIn","validationResult","parse","getItem","jsonState","o","assign","164","u","y","E","D","$","i","s","BASE_PATH","replace","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","query","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","contentTypeHeader","fetchOptions","method","Content-Type","body","headers","url","format","AuthApiFetchParamCreator","then","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","prototype","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","runPOST","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","locationId","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesGET","availabilityRulesPOST","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","withContrast","search","ScheduleApiFetchParamCreator","length","skip","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerGET","appointmentHandlerPOST","appointmentHandlerPUT","timeSlotsGET","module","exports","obj","TypeError","169","FormBasePage","_models_SafetyState__WEBPACK_IMPORTED_MODULE_3__","setAppointment","appt","_proto","getAns","q","console","log","ans","val","saveState","react__WEBPACK_IMPORTED_MODULE_2__","170","c","Chevron","src","width","alt","translucent","Ez123","OrderBreadcrumb","gatsby__WEBPACK_IMPORTED_MODULE_3__","Link","to","style","display","MriTypeBreadcrumb","_ref","name","contrast","TimeslotBreadcrumb","slot","slotId","reserved","209","l","TimePickWidget","offset","total","_models_SafetyState__WEBPACK_IMPORTED_MODULE_4__","times","showModal","_api_api__WEBPACK_IMPORTED_MODULE_3__","result","message","renderSlotAvailabilityDate","dt","needConfirm","_this3","whiteSpace","friendlyBegin","map","key","onClick","renderModal","_this4","react_modal__WEBPACK_IMPORTED_MODULE_5___default","isOpen","overlayClassName","type","selectedTime","_this5","_this$state","Fragment","date"],"mappings":"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","file":"component---src-pages-pick-time-tsx-633758f026a0fb80ec0d.js","sourcesContent":["import * as React from 'react'\nimport * as Api from '../api/api'\nimport IndexLayout from '../layouts'\nimport {Ez123, MriTypeBreadcrumb} from \"../components/breadcrumb\";\nimport {navigate} from \"gatsby\";\nimport {SafetyState} from \"../models/SafetyState\";\nimport {ScheduleApi} from \"../api/api\";\nimport {FormBasePage} from \"../helpers/FormBasePage\";\nimport {TimePickWidget} from \"../components/pick-time-component\";\n\ninterface IState\n{\n\tqna: SafetyState;\n}\n\nclass PickTimePage extends React.Component<{}, IState> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\tqna: SafetyState.loadState(),\n\t\t};\n\t}\n\n\tpublic componentDidMount() {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst scan = this.state.qna.scan;\n\t\t\tif (!scan) {\n\t\t\t\tlocation.href = '/?err=no-scan';\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tqna: SafetyState.loadState(),\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<IndexLayout>\n\t\t\t<section id=\"Q2\" className=\"vspace80 w-container\">\n\t\t\t\t<div>\n\t\t\t\t\t<Ez123 num={2} />\n\t\t\t\t\t<div className=\"breadcrumb-stack animated zoomIn\">\n\t\t\t\t\t\t<MriTypeBreadcrumb value={this.state.qna.scan}/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"w-row\">\n\t\t\t\t\t<div className=\"centered w-col w-col-3 w-hidden-tiny\" />\n\t\t\t\t\t<div className=\"centered w-col w-col-6\">\n\t\t\t\t\t\t<h3>Almost done, {this.state.qna.fname}!</h3>\n\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\tChoose an available time slot to book\n\t\t\t\t\t\t\tyour {this.state.qna.scan && this.state.qna.scan.time} appointment.\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tIf you're interested in a same day appointment, please call us at\n\t\t\t\t\t\t\t<a href=\"tel:+18334332567\">1 833-IDEAL-MR</a>.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{this.state.qna.scan && (\n\t\t\t\t\t<TimePickWidget\n\t\t\t\t\t\tonPick={(timeSlot) => this.pickTime(timeSlot)}\n\t\t\t\t\t\tscan={this.state.qna.scan}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</section>\n\t\t\t</IndexLayout>\n\t\t);\n\t}\n\n\tprivate pickTime(timeSlot: Api.SlotAvailabilityTime) {\n\t\tif (timeSlot.isAvailable) {\n\t\t\tsessionStorage.setItem('timeSlot', JSON.stringify(timeSlot));\n\n\t\t\t// attempt to release the time slot\n\t\t\tnew ScheduleApi().appointmentHandlerDELETE({\n\t\t\t\tauthToken: '',\n\t\t\t\treq: FormBasePage.getAppointment()\n\t\t\t});\n\t\t\tnavigate('/addl-info');\n\t\t}\n\t}\n}\n\nexport default PickTimePage;\n","import {SlotAvailabilityTime} from \"../api/api\";\nimport {IScan} from \"./Scan\";\n\nexport class SafetyState {\n\tconstructor() {\n\t\tthis.fname = '';\n\t\tthis.lname = '';\n\t\tthis.answers = {};\n\t\tthis.implants = [];\n\t\tthis.currentImplant = '';\n\t\tthis.scan = null;\n\t\tthis.haveOrder = false;\n\t\tthis.overrideSafetyWarning = false;\n\t\tthis.email = '';\n\t\tthis.phone = '';\n\t\tthis.height = '';\n\t\tthis.weight = '';\n\t\tthis.doctorName = '';\n\t\tthis.doctorContact = '';\n\t\tthis.insFront = '';\n\t\tthis.insBack = '';\n\t\tthis.mriOrder = '';\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tthis.timeSlot = JSON.parse(sessionStorage.getItem('timeSlot') || '{}');\n\t\t} else {\n\t\t\tthis.timeSlot = null;\n\t\t}\n\t\tthis.err = '';\n\t\tthis.dob = '';\n\t\tthis.carrierNumber = '';\n\t\tthis.groupNumber = '';\n\t\tthis.policyNumber = '';\n\t\tthis.address1 = '';\n\t\tthis.address2 = '';\n\t\tthis.city = '';\n\t\tthis.state = '';\n\t\tthis.zip = '';\n\t\tthis.optedIn = true;\n\t\tthis.validationResult = [];\n\t}\n\n\tpublic fname: string;\n\tpublic lname: string;\n\tpublic email: string;\n\tpublic phone: string;\n\tpublic answers: any;\n\tpublic implants: string[];\n\tpublic currentImplant: string;\n\tpublic haveOrder: boolean;\n\tpublic scan: IScan | null;\n\tpublic overrideSafetyWarning: boolean;\n\tpublic height: string;\n\tpublic weight: string;\n\tpublic doctorName: string;\n\tpublic doctorContact: string;\n\tpublic insFront: string;\n\tpublic insBack: string;\n\tpublic mriOrder: string;\n\tpublic carrierNumber: string;\n\tpublic groupNumber: string;\n\tpublic policyNumber: string;\n\tpublic timeSlot: SlotAvailabilityTime | null;\n\tpublic err: string;\n\tpublic dob: string;\n\tpublic address1: string;\n\tpublic address2: string;\n\tpublic city: string;\n\tpublic state: string;\n\tpublic zip: string;\n\tpublic optedIn: boolean;\n\tpublic validationResult: string[];\n\n\tpublic static loadState(): SafetyState {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst jsonState = JSON.parse(sessionStorage.getItem('wizard') || '{}');\n\t\t\tconst o = {\n\t\t\t\t// fname: sessionStorage.getItem('fname') || '',\n\t\t\t\t// lname: sessionStorage.getItem('lname') || '',\n\t\t\t\t// email: sessionStorage.getItem('email') || '',\n\t\t\t\t// phone: sessionStorage.getItem('phone') || '',\n\t\t\t\t// height: sessionStorage.getItem('height') || '',\n\t\t\t\t// weight: sessionStorage.getItem('weight') || '',\n\t\t\t\t// doctorName: sessionStorage.getItem('doctorName') || '',\n\t\t\t\t// insFront: sessionStorage.getItem('insFront') || '',\n\t\t\t\t// insBack: sessionStorage.getItem('insBack') || '',\n\t\t\t\t// mriOrder: sessionStorage.getItem('mriOrder') || '',\n\t\t\t\tscan: JSON.parse(sessionStorage.getItem('scan') || '{}'),\n\t\t\t\thaveOrder: sessionStorage.getItem('haveOrder') === 'true',\n\t\t\t};\n\t\t\treturn Object.assign(new SafetyState(), jsonState, o);\n\t\t}\n\t\treturn new SafetyState();\n\t}\n}\n","/**\n * ideal MRI\n * Signup Center API\n *\n * OpenAPI spec version: v1\n * Contact: ben@herila.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as querystring from \"querystring\";\nimport * as url from \"url\";\n\nimport * as isomorphicFetch from \"isomorphic-fetch\";\nimport * as assign from \"core-js/library/fn/object/assign\";\n\ninterface Dictionary<T> { [index: string]: T; }\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\n\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\nexport class BaseAPI {\n    basePath: string;\n    fetch: FetchAPI;\n\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\n        this.basePath = basePath;\n        this.fetch = fetch;\n    }\n};\n\nexport interface ApiResultListAppointment {\n    \"value\"?: Array<Appointment>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListAvailabilityRule {\n    \"value\"?: Array<AvailabilityRule>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListSlotAvailabilityDate {\n    \"value\"?: Array<SlotAvailabilityDate>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface Appointment {\n    \"resourceId\"?: string;\n    \"serviceType\"?: string;\n    \"serviceLength\"?: number;\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"address1\"?: string;\n    \"address2\"?: string;\n    \"city\"?: string;\n    \"state\"?: string;\n    \"zip\"?: string;\n    \"height\"?: string;\n    \"weight\"?: string;\n    \"reminder\"?: number;\n    \"doctorName\"?: string;\n    \"doctorPhone\"?: string;\n    \"insuranceCarrier\"?: string;\n    \"insuranceGroupNumber\"?: string;\n    \"insurancePolicyNumber\"?: string;\n    \"insuranceVerified\"?: boolean;\n    \"priorAuthObtained\"?: boolean;\n    \"orderEnteredToRIS\"?: boolean;\n    \"patientWasCalled\"?: boolean;\n    \"confirmed\"?: boolean;\n    \"orderImageUrl\"?: string;\n    \"insuranceFrontUrl\"?: string;\n    \"insuranceBackUrl\"?: string;\n    \"surveyDataJson\"?: string;\n    \"safetyWarnings\"?: string;\n    \"approvedDate\"?: Date;\n    \"submittedDate\"?: Date;\n    \"confirmedDate\"?: Date;\n    \"birthday\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface AvailabilityRule {\n    \"priority\"?: number;\n    \"resourceID\"?: string;\n    \"onThisDay\"?: string;\n    \"startTime\"?: string;\n    \"endTime\"?: string;\n    \"comment\"?: string;\n    \"status\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface CustomerLead {\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"dob\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"serviceType\"?: string;\n    \"timeSlot\"?: string;\n    \"withContrast\"?: boolean;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface Location {\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface SlotAvailabilityDate {\n    \"date\"?: Date;\n    \"friendlyBegin\"?: string;\n    \"times\"?: Array<SlotAvailabilityTime>;\n}\n\nexport interface SlotAvailabilityTime {\n    \"time\"?: string;\n    \"resourceId\"?: string;\n    \"isHidden\"?: boolean;\n    \"isAvailable\"?: boolean;\n    \"isContrastAvailable\"?: boolean;\n    \"isContrastRequired\"?: boolean;\n    \"linkedAppointment\"?: Appointment;\n    \"slotId\"?: string;\n}\n\nexport interface Stack {\n    \"in\"?: string;\n    \"at\"?: string;\n}\n\nexport interface SurveyQuestion {\n    \"questionId\"?: string;\n    \"questionShowIf\"?: string;\n    \"questionShowIfAnswer\"?: string;\n    \"questionText\"?: string;\n    \"questionType\"?: string;\n    \"isRequired\"?: boolean;\n    \"isHidden\"?: boolean;\n    \"order\"?: number;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface TableResult {\n    \"result\"?: any;\n    \"httpStatusCode\"?: number;\n    \"etag\"?: string;\n}\n\nexport interface User {\n    \"apiKey\"?: string;\n    \"immutableId\"?: string;\n    \"referenceRowKey\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\n\n\n/**\n * AuthApi - fetch parameter creator\n */\nexport const AuthApiFetchParamCreator = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/auth`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * AuthApi - functional programming interface\n */\nexport const AuthApiFp = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * AuthApi - object-oriented interface\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * AuthApi - factory interface\n */\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Auth\n         * @param req\n         * @param authToken\n         */\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n            return AuthApiFp.auth(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * LeadGenApi - fetch parameter creator\n */\nexport const LeadGenApiFetchParamCreator = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * LeadGenApi - functional programming interface\n */\nexport const LeadGenApiFp = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * LeadGenApi - object-oriented interface\n */\nexport class LeadGenApi extends BaseAPI {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * LeadGenApi - factory interface\n */\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * PostQuestionApi - fetch parameter creator\n */\nexport const PostQuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * PostQuestionApi - functional programming interface\n */\nexport const PostQuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * PostQuestionApi - object-oriented interface\n */\nexport class PostQuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * PostQuestionApi - factory interface\n */\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         * @param req\n         */\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * QuestionApi - fetch parameter creator\n */\nexport const QuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * QuestionApi - functional programming interface\n */\nexport const QuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * QuestionApi - object-oriented interface\n */\nexport class QuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any) {\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * QuestionApi - factory interface\n */\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         */\n        getQuestions(options?: any) {\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ResourceApi - fetch parameter creator\n */\nexport const ResourceApiFetchParamCreator = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ResourceApi - functional programming interface\n */\nexport const ResourceApiFp = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ResourceApi - object-oriented interface\n */\nexport class ResourceApi extends BaseAPI {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ResourceApi - factory interface\n */\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param authToken\n         */\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ScheduleApi - fetch parameter creator\n */\nexport const ScheduleApiFetchParamCreator = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslots`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"length\": params[\"length\"],\n            \"locationId\": params[\"locationId\"],\n            \"skip\": params[\"skip\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ScheduleApi - functional programming interface\n */\nexport const ScheduleApiFp = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ScheduleApi - object-oriented interface\n */\nexport class ScheduleApi extends BaseAPI {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any) {\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ScheduleApi - factory interface\n */\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary TimeSlots\n         * @param authToken\n         * @param withContrast\n         * @param length\n         * @param locationId\n         */\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\n        },\n    };\n};\n\n","function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}\n\nmodule.exports = _objectDestructuringEmpty;","import * as React from 'react';\nimport {SafetyState} from \"../models/SafetyState\";\nimport {Appointment} from \"../api/api\";\n\nexport abstract class FormBasePage extends React.Component<{}, SafetyState> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = SafetyState.loadState();\n\t}\n\n\tpublic static setAppointment(appt: Appointment | null) {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tsessionStorage.setItem('appointmentEntity', JSON.stringify(appt || null));\n\t\t}\n\t}\n\n\tpublic static getAppointment(): Appointment {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst json = sessionStorage.getItem('appointmentEntity') || '{}';\n\t\t\treturn JSON.parse(json);\n\t\t}\n\t\treturn {};\n\t}\n\n\tpublic getAns(q) {\n\t\treturn this.state.answers[q];\n\t}\n\n\tpublic componentDidMount() {\n\t\tconst state = SafetyState.loadState();\n\t\tthis.setState(state);\n\t\tconsole.log('Loaded SafetyState', state);\n\t}\n\n\tpublic ans(q, val) {\n\t\tconst answers = Object.assign({}, this.state.answers);\n\t\tanswers[q] = val;\n\t\tconsole.log(q, val, answers);\n\t\tthis.setState({answers}, () => this.saveState());\n\t}\n\n\tpublic saveState() {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tsessionStorage.setItem('wizard', JSON.stringify({\n\t\t\t\tanswers: this.state.answers,\n\t\t\t\timplants: this.state.implants,\n\t\t\t\tcurrentImplant: this.state.currentImplant,\n\t\t\t\tfname: this.state.fname,\n\t\t\t\tlname: this.state.lname,\n\t\t\t\temail: this.state.email,\n\t\t\t\tphone: this.state.phone,\n\t\t\t\theight: this.state.height,\n\t\t\t\tweight: this.state.weight,\n\t\t\t\tdoctorName: this.state.doctorName,\n\t\t\t\tdoctorContact: this.state.doctorContact,\n\t\t\t\tinsFront: this.state.insFront,\n\t\t\t\tinsBack: this.state.insBack,\n\t\t\t\tcarrierNumber: this.state.carrierNumber,\n\t\t\t\tpolicyNumber: this.state.policyNumber,\n\t\t\t\tgroupNumber: this.state.groupNumber,\n\t\t\t\tmriOrder: this.state.mriOrder,\n\t\t\t\tscan: this.state.scan || null,\n\t\t\t\thaveOrder: this.state.haveOrder,\n\t\t\t\tdob: this.state.dob,\n\t\t\t}));\n\t\t}\n\t}\n\n\tabstract render();\n}","import * as React from 'react';\nimport {Link} from 'gatsby';\nimport {SlotAvailabilityTime} from \"../api/api\";\n\nconst Chevron = (props: {translucent?: boolean}) => (\n\t<img\n\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5be12c8e888fb5963088dc64_chevron-right-blue-2.svg\"\n\t\twidth=\"38\" height=\"38\" alt=\"Chevron right\" className={props.translucent ? 'translucent' : ''}/>\n);\n\nexport const Ez123 = (props: {num: number}) => (\n\t<div>\n\t\t<div className=\"breadcrumb-row\">\n\t\t\t<div className={'circled ' + (props.num < 1 ? 'translucent' : '') }>1</div>\n\t\t\t<Chevron translucent={props.num < 2} />\n\t\t\t<div className={'circled ' + (props.num < 2 ? 'translucent' : '') }>2</div>\n\t\t\t<Chevron translucent={props.num < 3} />\n\t\t\t<div className={'circled ' + (props.num < 3 ? 'translucent' : '') }>3</div>\n\t\t</div>\n\t\t<div className=\"breadcrumb-row\">\n\t\t\t{props.num === 1 && <h3><strong>Step 1.</strong> Your details</h3>}\n\t\t\t{props.num === 2 && <h3><strong>Step 2.</strong> Choose your scan</h3>}\n\t\t\t{props.num === 3 && <h3><strong>Step 3.</strong> Health &amp; Safety Information</h3>}\n\t\t</div>\n\t</div>\n);\n\nexport const OrderBreadcrumb = (props: {value: boolean}) => (\n    <Link to=\"/have-order\"\n       className=\"breadcrumb w-button\" style={{display: 'none'}}>\n\t\t{props.value ? 'Have Doctor\\'s Order' : 'No Order'} ✓\n\t</Link>\n);\n\nexport const MriTypeBreadcrumb = ({value}) => {\n\tif (!value) {\n\t\treturn (\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\t\tClick here to select MRI type\n\t\t\t</Link>\n\t\t);\n\t}\n\tif (typeof value === 'string') {\n\t\treturn (\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\t\tScan type: {value} &times;\n\t\t\t</Link>\n\t\t);\n\t}\n\treturn (\n\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\tScan type: {value.name || 'e!name'} {value.contrast || 'e!contrast'} &times;\n\t\t</Link>\n\t)\n};\n\nexport const TimeslotBreadcrumb = (props: {slot: SlotAvailabilityTime | null, reserved?: boolean}) => (\n\t!!props.slot ? (\n\t\t<Link to=\"/pick-time\" className=\"breadcrumb w-button\">\n\t\t\t{(props.slot.slotId || 'no time selected').replace(/(\\d{4})-(\\d{2})-(\\d{2})T([^\\s]{5}).*/g, \"$2/$3/$1 at $4\")} &times;<br /><small>({props.reserved ? 'reserved' : 'not yet reserved'})</small>\n\t\t</Link>\n\t) : <div />\n);\n","import * as React from 'react'\nimport * as Api from '../api/api'\nimport IndexLayout from '../layouts'\nimport {Ez123, MriTypeBreadcrumb} from \"../components/breadcrumb\";\nimport {navigate} from \"gatsby\";\nimport {SafetyState} from \"../models/SafetyState\";\nimport ReactModal from 'react-modal';\nimport {IScan} from \"../models/Scan\";\n\nconst take = 4;\n\ninterface TimePickState {\n\terr: any,\n\toffset: number;\n\ttotal: number;\n\tqna: SafetyState;\n\ttimes: Api.SlotAvailabilityDate[];\n\tshowModal: boolean;\n}\n\nexport class TimePickWidget extends React.Component<{scan: IScan, onPick: (time: Api.SlotAvailabilityTime) => any}, TimePickState> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\terr: '',\n\t\t\toffset: 0,\n\t\t\ttotal: 14,\n\t\t\tqna: SafetyState.loadState(),\n\t\t\ttimes: [],\n\t\t\tshowModal: false,\n\t\t};\n\t}\n\n\tpublic componentDidMount() {\n\t\tnew Api.ScheduleApi().timeSlotsGET({\n\t\t\twithContrast: this.props.scan.contrast === 'with and without contrast',\n\t\t\tlocationId: ''\n\t\t}).then((result) => {\n\t\t\tif (result.value) {\n\t\t\t\tthis.setState({\n\t\t\t\t\ttimes: result.value || [],\n\t\t\t\t\ttotal: result.value.length || 0,\n\t\t\t\t\tqna: SafetyState.loadState(),\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({\n\t\t\t\t\terr: result.message || 'Error',\n\t\t\t\t\tqna: SafetyState.loadState(),\n\t\t\t\t});\n\t\t\t}\n\t\t}, (err) => this.setState({\n\t\t\terr,\n\t\t\tqna: SafetyState.loadState(),\n\t\t}));\n\t}\n\n\tpublic renderSlotAvailabilityDate(dt: Api.SlotAvailabilityDate, needConfirm: boolean) {\n\t\treturn (\n\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t<h3 style={{whiteSpace: 'nowrap'}}>{dt.friendlyBegin}</h3>\n\t\t\t\t{dt.times ? dt.times.map((timeSlot) => (\n\t\t\t\t\t<a key={timeSlot.time}\n\t\t\t\t\t   href=\"#\"\n\t\t\t\t\t   className={`buttontimeslot ${timeSlot.isAvailable ? '' : 'unavailable '}w-button`}\n\t\t\t\t\t   onClick={() => this.pickTime(timeSlot, needConfirm)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{timeSlot.time}\n\t\t\t\t\t</a>\n\t\t\t\t)) : <div>dt.times is {typeof dt.times}</div>}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tpublic renderModal() {\n\t\treturn (\n\t\t\t<ReactModal\n\t\t\t\tisOpen={this.state.showModal}\n\t\t\t\tclassName=\"modal-content animated fadeInUp\"\n\t\t\t\toverlayClassName=\"modal-wrapper\"\n\t\t\t>\n\t\t\t\t<p><b>The time you selected is tomorrow.</b></p>\n\t\t\t\t<p>We won't have time to obtain prior authorization from your insurance carrier. If you aren't using insurance, this won't be a problem.</p>\n\t\t\t\t<p>Are you sure you want to select this time?</p>\n\t\t\t\t<p>\n\t\t\t\t\t<button type=\"button\"\n\t\t\t\t\t\t\tclassName=\"button w-button\"\n\t\t\t\t\t\t\tonClick={() => this.props.onPick(this.state.selectedTime)}>\n\t\t\t\t\t\tYes, continue\n\t\t\t\t\t</button>\n\t\t\t\t\t<button type=\"button\"\n\t\t\t\t\t\t\tclassName=\"button w-button\"\n\t\t\t\t\t\t\tonClick={() => this.setState({showModal: false})}>\n\t\t\t\t\t\tNo, change time\n\t\t\t\t\t</button>\n\t\t\t\t</p>\n\t\t\t</ReactModal>\n\t\t);\n\t}\n\n\tpublic render() {\n\t\tconst {offset, total, err, times} = this.state;\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<div className=\"w-row\">\n\t\t\t\t\t<div className=\"w-col w-col-2\">\n\t\t\t\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t\t\t\t{offset > 0 && (\n\t\t\t\t\t\t\t\t<a href=\"#\"\n\t\t\t\t\t\t\t\t   onClick={() => this.setState({offset: offset - 1})}\n\t\t\t\t\t\t\t\t   className=\"buttontimeslot w-button\">\n\t\t\t\t\t\t\t\t\t&laquo; Earlier Dates\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{times && times.map((date, i) => (\n\t\t\t\t\t\t(i >= offset && (i - offset) < take) && (\n\t\t\t\t\t\t\t<div key={JSON.stringify(date || i)} className=\"w-col w-col-2\">\n\t\t\t\t\t\t\t\t{this.renderSlotAvailabilityDate(date, i < 1)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t))}\n\t\t\t\t\t{offset + take < total && (\n\t\t\t\t\t\t<div className=\"w-col w-col-2\">\n\t\t\t\t\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t\t\t\t\t<a href=\"#\"\n\t\t\t\t\t\t\t\t   onClick={() => this.setState({offset: offset + 1})}\n\t\t\t\t\t\t\t\t   className=\"buttontimeslot w-button\">\n\t\t\t\t\t\t\t\t\tLater Dates &gt;&gt;\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t{this.renderModal()}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n\n\tprivate pickTime(timeSlot: Api.SlotAvailabilityTime, needConfirm: boolean) {\n\t\tif (timeSlot.isAvailable) {\n\t\t\tif (needConfirm) {\n\t\t\t\tthis.setState({showModal: true});\n\t\t\t} else {\n\t\t\t\tthis.props.onPick(timeSlot);\n\t\t\t}\n\t\t}\n\t}\n}"],"sourceRoot":""}