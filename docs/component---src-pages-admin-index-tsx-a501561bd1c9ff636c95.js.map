{"version":3,"sources":["webpack:///./src/pages/admin/index.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/api/api.ts","webpack:///./src/components/Page.tsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/LayoutRoot.tsx","webpack:///./src/components/LayoutMain.tsx","webpack:///./src/forms/index.tsx","webpack:///./src/layouts/admin.tsx","webpack:///./src/components/Container.tsx","webpack:///./src/styles/variables.ts"],"names":["AdminIndex","props","context","_this","_React$Component","call","this","state","name","username","password","sessionId","err","render","_this2","react__WEBPACK_IMPORTED_MODULE_1__","createElement","_layouts_admin__WEBPACK_IMPORTED_MODULE_6__","a","_components_Page__WEBPACK_IMPORTED_MODULE_4__","_components_Container__WEBPACK_IMPORTED_MODULE_5__","className","length","action","onSubmit","e","doLogin","_forms__WEBPACK_IMPORTED_MODULE_3__","boundTextboxValue","setState","type","gatsby__WEBPACK_IMPORTED_MODULE_2__","Link","to","n","_this3","preventDefault","_api_api__WEBPACK_IMPORTED_MODULE_7__","auth","authToken","req","partitionKey","apiKey","then","result","sessionStorage","setItem","Object","navigate","removeItem","t","Component","__webpack_exports__","default","h","160","__webpack_require__","r","d","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","withPrefix","push","replace","navigateTo","_wait_for_route_change__WEBPACK_IMPORTED_MODULE_3__","c","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4___default","_parse_path__WEBPACK_IMPORTED_MODULE_5__","createContext","Consumer","staticQueryData","data","query","children","Error","propTypes","object","string","isRequired","func","m","module","exports","BASE_PATH","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","parse","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","contentTypeHeader","fetchOptions","method","Content-Type","body","JSON","stringify","headers","url","format","AuthApiFetchParamCreator","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","prototype","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","runPOST","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","locationId","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesGET","availabilityRulesPOST","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","withContrast","search","ScheduleApiFetchParamCreator","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerDELETE","appointmentHandlerGET","appointmentHandlerPOST","appointmentHandlerPUT","timeSlotsGET","react_emotion__WEBPACK_IMPORTED_MODULE_1__","StyledPage","target","_ref","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","_loader__WEBPACK_IMPORTED_MODULE_3__","ProdPageRenderer","location","pageResources","getResourcesForPathname","pathname","shape","173","175","177","179","181","StyledLayoutRoot","moment","formStyle","Row","react__WEBPACK_IMPORTED_MODULE_5__","Col","EditFormBase","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4___default","boundLabel","title","defaultValue","ucshared__WEBPACK_IMPORTED_MODULE_7__","isEmpty","toString","formGroup","sm","sm3","ctrlLabel","sm9","boundTextbox","bindFn","placeHolder","readOnly","isDisabled","wrn","renderWarnings","disabled","maxLength","onChange","value","placeholder","style","backgroundColor","bindValFn","inputType","currentTarget","minWidth","boundChoices","choices","cc","map","choice","i","key","label","submitRow","actionText","submitButton","boundDate","isStart","start","end","react_datepicker__WEBPACK_IMPORTED_MODULE_6__","selected","selectsEnd","startDate","endDate","dateFormatCalendar","showMonthDropdown","showYearDropdown","val","vlc","toLowerCase","indexOf","boundTextarea","rows","boundTextareaValue","boundCheckbox","defaultChecked","checked","boundCheckboxValue","boundBooleanSwitch","insertBlock","detailBlock","gatsby__WEBPACK_IMPORTED_MODULE_3__","_components_LayoutRoot__WEBPACK_IMPORTED_MODULE_8__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","site","siteMetadata","meta","content","description","_components_LayoutMain__WEBPACK_IMPORTED_MODULE_9__","_public_static_d_2945440950_json__WEBPACK_IMPORTED_MODULE_0__","StyledContainer","index_esm","react"],"mappings":"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","file":"component---src-pages-admin-index-tsx-a501561bd1c9ff636c95.js","sourcesContent":["import * as React from 'react'\nimport { Link, navigate } from 'gatsby'\nimport {EditFormBase} from '../../forms';\n\nimport Page from '../../components/Page'\nimport Container from '../../components/Container'\nimport AdminLayout from '../../layouts/admin'\nimport {AuthApi} from \"../../api/api\";\n\nclass AdminIndex extends React.Component<{}, {name: string, username: string, password: string, sessionId: string, err: string}> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {name: '', username: '', password: '', sessionId: '', err: ''};\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<AdminLayout>\n\t\t\t<Page>\n\t\t\t\t<Container className=\"centered\">\n\t\t\t\t\t<h1>Restricted Access</h1>\n\t\t\t\t\t{(this.state.err || '').length > 0 && <div className=\"breadcrumb-stack\">\n\t\t\t\t\t\t{this.state.err}\n\t\t\t\t\t</div>}\n\t\t\t\t\t<form action=\"#\" onSubmit={(e) => this.doLogin(e)}>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{EditFormBase.boundTextboxValue(\n\t\t\t\t\t\t\t\t'Username/email',\n\t\t\t\t\t\t\t\tthis.state.username,\n\t\t\t\t\t\t\t\tusername => this.setState({username}),\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t{EditFormBase.boundTextboxValue(\n\t\t\t\t\t\t\t\t'Password',\n\t\t\t\t\t\t\t\tthis.state.password,\n\t\t\t\t\t\t\t\tpassword => this.setState({password}),\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t'password'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p className=\"vspace40\">\n\t\t\t\t\t\t\t<button type=\"submit\" className=\"button w-button\">\n\t\t\t\t\t\t\t\tSign in\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</form>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/admin/manage-questions\">Manage Questions</Link>\n\t\t\t\t\t\t\t<Link to=\"/admin/manage-time-slots\">Manage Time Slots</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</Container>\n\t\t\t</Page>\n\t\t\t</AdminLayout>\n\t\t);\n\t}\n\n\tprivate doLogin(e: React.FormEvent<HTMLFormElement>) {\n\t\te.preventDefault();\n\t\tnew AuthApi().auth({\n\t\t\tauthToken: '',\n\t\t\treq: {\n\t\t\t\tpartitionKey: this.state.username,\n\t\t\t\tapiKey: this.state.password,\n\t\t\t},\n\t\t}).then((result) => {\n\t\t\tthis.setState({sessionId: result.apiKey || ''});\n\t\t\tsessionStorage.setItem('sessionId', result.apiKey || '');\n\t\t\tnavigate('/admin/site');\n\t\t}, (err) => {\n\t\t\tthis.setState({err: 'Authentication failed'});\n\t\t\tsessionStorage.removeItem('sessionId');\n\t\t});\n\t}\n}\n\nexport default AdminIndex\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport { waitForRouteChange } from \"./wait-for-route-change\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  waitForRouteChange,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","/**\n * ideal MRI\n * Signup Center API\n *\n * OpenAPI spec version: v1\n * Contact: ben@herila.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as querystring from \"querystring\";\nimport * as url from \"url\";\n\nimport * as isomorphicFetch from \"isomorphic-fetch\";\nimport * as assign from \"core-js/library/fn/object/assign\";\n\ninterface Dictionary<T> { [index: string]: T; }\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\n\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\nexport class BaseAPI {\n    basePath: string;\n    fetch: FetchAPI;\n\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\n        this.basePath = basePath;\n        this.fetch = fetch;\n    }\n};\n\nexport interface ApiResultListAppointment {\n    \"value\"?: Array<Appointment>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListAvailabilityRule {\n    \"value\"?: Array<AvailabilityRule>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListSlotAvailabilityDate {\n    \"value\"?: Array<SlotAvailabilityDate>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface Appointment {\n    \"resourceId\"?: string;\n    \"serviceType\"?: string;\n    \"serviceLength\"?: number;\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"address1\"?: string;\n    \"city\"?: string;\n    \"state\"?: string;\n    \"zip\"?: string;\n    \"height\"?: string;\n    \"weight\"?: string;\n    \"reminder\"?: number;\n    \"doctorName\"?: string;\n    \"doctorPhone\"?: string;\n    \"insuranceCarrier\"?: string;\n    \"insuranceGroupNumber\"?: string;\n    \"insurancePolicyNumber\"?: string;\n    \"insuranceVerified\"?: boolean;\n    \"priorAuthObtained\"?: boolean;\n    \"orderEnteredToRIS\"?: boolean;\n    \"patientWasCalled\"?: boolean;\n    \"confirmed\"?: boolean;\n    \"orderImageUrl\"?: string;\n    \"insuranceFrontUrl\"?: string;\n    \"insuranceBackUrl\"?: string;\n    \"surveyDataJson\"?: string;\n    \"approvedDate\"?: Date;\n    \"submittedDate\"?: Date;\n    \"confirmedDate\"?: Date;\n    \"birthday\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface AvailabilityRule {\n    \"priority\"?: number;\n    \"resourceID\"?: string;\n    \"onThisDay\"?: string;\n    \"startTime\"?: string;\n    \"endTime\"?: string;\n    \"comment\"?: string;\n    \"status\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface CustomerLead {\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"dob\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"serviceType\"?: string;\n    \"timeSlot\"?: string;\n    \"withContrast\"?: boolean;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface Location {\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface SlotAvailabilityDate {\n    \"date\"?: Date;\n    \"friendlyBegin\"?: string;\n    \"times\"?: Array<SlotAvailabilityTime>;\n}\n\nexport interface SlotAvailabilityTime {\n    \"time\"?: string;\n    \"resourceId\"?: string;\n    \"isHidden\"?: boolean;\n    \"isAvailable\"?: boolean;\n    \"isContrastAvailable\"?: boolean;\n    \"isContrastRequired\"?: boolean;\n    \"linkedAppointment\"?: Appointment;\n    \"slotId\"?: string;\n}\n\nexport interface Stack {\n    \"in\"?: string;\n    \"at\"?: string;\n}\n\nexport interface SurveyQuestion {\n    \"questionId\"?: string;\n    \"questionShowIf\"?: string;\n    \"questionShowIfAnswer\"?: string;\n    \"questionText\"?: string;\n    \"questionType\"?: string;\n    \"isRequired\"?: boolean;\n    \"isHidden\"?: boolean;\n    \"order\"?: number;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface TableResult {\n    \"result\"?: any;\n    \"httpStatusCode\"?: number;\n    \"etag\"?: string;\n}\n\nexport interface User {\n    \"apiKey\"?: string;\n    \"immutableId\"?: string;\n    \"referenceRowKey\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\n\n\n/**\n * AuthApi - fetch parameter creator\n */\nexport const AuthApiFetchParamCreator = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/auth`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * AuthApi - functional programming interface\n */\nexport const AuthApiFp = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * AuthApi - object-oriented interface\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * AuthApi - factory interface\n */\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Auth\n         * @param req\n         * @param authToken\n         */\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n            return AuthApiFp.auth(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * LeadGenApi - fetch parameter creator\n */\nexport const LeadGenApiFetchParamCreator = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * LeadGenApi - functional programming interface\n */\nexport const LeadGenApiFp = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * LeadGenApi - object-oriented interface\n */\nexport class LeadGenApi extends BaseAPI {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * LeadGenApi - factory interface\n */\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * PostQuestionApi - fetch parameter creator\n */\nexport const PostQuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * PostQuestionApi - functional programming interface\n */\nexport const PostQuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * PostQuestionApi - object-oriented interface\n */\nexport class PostQuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * PostQuestionApi - factory interface\n */\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         * @param req\n         */\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * QuestionApi - fetch parameter creator\n */\nexport const QuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * QuestionApi - functional programming interface\n */\nexport const QuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * QuestionApi - object-oriented interface\n */\nexport class QuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any) {\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * QuestionApi - factory interface\n */\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         */\n        getQuestions(options?: any) {\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ResourceApi - fetch parameter creator\n */\nexport const ResourceApiFetchParamCreator = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ResourceApi - functional programming interface\n */\nexport const ResourceApiFp = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ResourceApi - object-oriented interface\n */\nexport class ResourceApi extends BaseAPI {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ResourceApi - factory interface\n */\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param authToken\n         */\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ScheduleApi - fetch parameter creator\n */\nexport const ScheduleApiFetchParamCreator = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslots`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"length\": params[\"length\"],\n            \"locationId\": params[\"locationId\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ScheduleApi - functional programming interface\n */\nexport const ScheduleApiFp = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ScheduleApi - object-oriented interface\n */\nexport class ScheduleApi extends BaseAPI {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ScheduleApi - factory interface\n */\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary TimeSlots\n         * @param authToken\n         * @param withContrast\n         * @param length\n         * @param locationId\n         */\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\n        },\n    };\n};\n\n","import * as React from 'react'\nimport styled from 'react-emotion'\n\nimport { dimensions } from '../styles/variables'\n\nconst StyledPage = styled.div`\n  display: block;\n  flex: 1;\n  position: relative;\n`\n\ninterface PageProps {\n  className?: string\n}\n\nconst Page: React.SFC<PageProps> = ({ children, className }) => <StyledPage className={className}>{children}</StyledPage>\n\nexport default Page\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathname(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import * as React from 'react'\nimport styled from 'react-emotion'\n\nconst StyledLayoutRoot = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`\n\ninterface LayoutRootProps {\n  className?: string\n}\n\nconst LayoutRoot: React.SFC<LayoutRootProps> = ({ children, className }) => (\n  <StyledLayoutRoot className={className}>{children}</StyledLayoutRoot>\n)\n\nexport default LayoutRoot\n","import * as React from 'react'\n// import styled from 'react-emotion'\n// const StyledLayoutMain = styled.main`\n//   display: flex;\n//   flex-direction: column;\n//   flex: 1;\n//\n\ninterface LayoutMainProps {\n  className?: string\n}\n\n// <StyledLayoutMain className={className}>{children}</StyledLayoutMain>\nconst LayoutMain: React.SFC<LayoutMainProps> = ({ children, className }) => (\n  <main className={className || \"white-section\"}>\n      <div className=\"vspace80 w-container\">\n          {children}\n      </div>\n  </main>\n);\n\nexport default LayoutMain\n","import * as React from 'react';\nimport DatePicker from 'react-datepicker';\nimport {isEmpty} from 'ucshared';\n\nconst moment = require('moment');\nconst formStyle = require('./formStyle.css');\n\nexport function formatAdminDate(date: any) {\n\treturn moment(date).format('MM/DD/YYYY');\n}\n\nconst Row = (props: any) => <div>{props.children}</div>;\nconst Col = (props: any) => <div>{props.children}</div>;\n\nexport class EditFormBase<TProps, TState> extends React.Component<TProps, TState> {\n\tpublic static formGroup = 'form-group';\n\tpublic static ctrlLabel = 'control-label';\n\tpublic static sm3 = '3';\n\tpublic static sm9 = '9';\n\tpublic static insertBlock = formStyle.insertBlock;\n\tpublic static detailBlock = formStyle.detailBlock;\n\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t}\n\n\tpublic static boundLabel(title: string, defaultValue: string | number | Date) {\n\t\tif (isEmpty(title)) {\n\t\t\treturn <span>{(defaultValue || 'null').toString()}</span>;\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{(defaultValue || 'null').toString()}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextbox(title: string, defaultValue: string | number | Date, bindFn: React.FormEventHandler<HTMLInputElement>, placeHolder?: string, readOnly?: boolean, isDisabled?: boolean) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextboxValue(title: string|null, defaultValue: string | number | Date, bindValFn: (value: string) => any, placeHolder?: string, readOnly?: boolean, isDisabled?: boolean, inputType?: string) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype={inputType || 'text'}\n\t\t\t\t\t\tonChange={(e) => bindValFn(e.currentTarget.value)}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {minWidth: '40px'} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.boundTextboxValue(null, defaultValue, bindValFn, placeHolder, readOnly, isDisabled, inputType)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundChoices(title: string|null, choices: Array<{label?: string, value: string}|string>, defaultValue: string | number | Date, bindValFn: (value: string) => any, placeHolder?: string, isDisabled?: boolean) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\tconst cc = choices.map((choice) => (typeof choice === 'string') ? {value: choice} : choice);\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<select\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tonChange={(e) => bindValFn(e.currentTarget.value)}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\tstyle={!wrn ? {minWidth: '40px'} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"\">(none)</option>\n\t\t\t\t\t\t{cc.map((choice, i) => <option key={choice.value + i} value={choice.value}>{choice.label || choice.value}</option>)}\n\t\t\t\t\t</select>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.boundChoices(null, choices, defaultValue, bindValFn, placeHolder, isDisabled)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\n\tpublic static submitRow(actionText?: string) {\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}/>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.submitButton(actionText)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static submitButton(actionText?: string) {\n\t\treturn (\n\t\t\t<button type=\"submit\">{actionText || 'Submit'}</button>\n\t\t);\n\t}\n\n\tpublic static boundDate(title: string, bindFn: React.FormEventHandler<HTMLInputElement>, isStart: boolean, start?: Date, end?: Date, isDisabled?: boolean) {\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t<DatePicker\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tclassName={'form-control'}\n\t\t\t\t\t\tselected={isStart ? moment(start) : moment(end)}\n\t\t\t\t\t\tselectsEnd\n\t\t\t\t\t\tstartDate={start && moment(start)}\n\t\t\t\t\t\tendDate={end && moment(end)}\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tdateFormatCalendar={'MMM YYYY'}\n\t\t\t\t\t\tshowMonthDropdown\n\t\t\t\t\t\tshowYearDropdown\n\t\t\t\t\t/>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tprotected static renderWarnings(val: string|number|Date) {\n\t\tif (typeof val !== 'string') {\n\t\t\treturn this.renderWarnings(val.toString());\n\t\t}\n\t\tif (val) {\n\t\t\tconst vlc = val.toLowerCase();\n\t\t\tif (vlc.indexOf('included') > -1) {\n\t\t\t\treturn <div className=\"alert alert-error\"><b>Warning:</b> Consider removing term <em>included</em></div>;\n\t\t\t}\n\t\t\tif (vlc.indexOf('refund') > -1) {\n\t\t\t\treturn <div className=\"alert alert-error\"><b>Warning:</b> We don't offer refunds.</div>;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static boundTextarea(title: string, defaultValue: string | number, bindFn: React.FormEventHandler<HTMLTextAreaElement>) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<textarea className=\"form-control\" onChange={bindFn} value={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\t  style={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t\t  rows={5}/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextareaValue(title: string, defaultValue: string | number, bindFn: (value) => any) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<textarea className=\"form-control\"\n\t\t\t\t\t\t  onChange={(e) => bindFn(e.currentTarget.value)}\n\t\t\t\t\t\t  value={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\t  style={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t\t  rows={5}/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundCheckbox(title: string, defaultChecked: boolean, bindFn: React.FormEventHandler<HTMLInputElement>, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={bindFn}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n\n\tpublic static boundCheckboxValue(title: string, defaultChecked: boolean, bindFn: (isChecked: boolean) => any, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={(e) => bindFn(e.currentTarget.checked)}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n\n\tpublic static boundBooleanSwitch(title: string, defaultChecked: boolean, bindFn: (isChecked: boolean) => any, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={(e) => bindFn(e.currentTarget.checked)}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n}\n","import * as React from 'react'\nimport Helmet from 'react-helmet'\nimport {StaticQuery, graphql} from 'gatsby'\n\n// import 'modern-normalize'\n// import '../styles/normalize'\nimport '../styles/webflow.css'\nimport '../styles/webflow.grid.css'\nimport '../styles/animate.css'\nimport '../styles/tables.css'\n\nimport LayoutRoot from '../components/LayoutRoot'\nimport LayoutMain from '../components/LayoutMain'\n\ntype StaticQueryProps = {\n\tsite: {\n\t\tsiteMetadata: {\n\t\t\ttitle: string\n\t\t\tdescription: string\n\t\t}\n\t}\n}\n\nconst AdminLayout: React.SFC = ({children}) => (\n\t<StaticQuery\n\t\tquery={graphql`\n      query AdminLayoutQuery {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `}\n\t\trender={(data: StaticQueryProps) => (\n\t\t\t<LayoutRoot>\n\t\t\t\t<Helmet\n\t\t\t\t\ttitle={data.site.siteMetadata.title}\n\t\t\t\t\tmeta={[\n\t\t\t\t\t\t{name: 'description', content: data.site.siteMetadata.description},\n\t\t\t\t\t\t{name: 'keywords', content: 'gatsbyjs, gatsby, javascript, sample, something'}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<LayoutMain>{children}</LayoutMain>\n\t\t\t</LayoutRoot>\n\t\t)}\n\t/>\n)\n\nexport default AdminLayout\n","import * as React from 'react'\nimport styled from 'react-emotion'\n\nimport { widths } from '../styles/variables'\nimport { getEmSize } from '../styles/mixins'\n\nconst StyledContainer = styled.div`\n  position: relative;\n  margin-left: auto;\n  margin-right: auto;\n  width: auto;\n  max-width: ${getEmSize(widths.lg)}em;\n`\n\ninterface ContainerProps {\n  className?: string\n}\n\nconst Container: React.SFC<ContainerProps> = ({ children, className }) => (\n  <StyledContainer className={className}>{children}</StyledContainer>\n)\n\nexport default Container\n","/* tslint:disable:max-line-length */\n\nexport const colors = {\n  brand: '#663399',\n  lilac: '#9d7cbf',\n  accent: '#ffb238',\n  success: '#37b635',\n  warning: '#ec1818',\n  ui: {\n    bright: '#e0d6eb',\n    light: '#f5f3f7',\n    whisper: '#fbfafc'\n  },\n  code: '#fcf6f0',\n  gray: {\n    dark: 'hsla(270, 17.119554496%, 0%, 0.92)',\n    copy: 'hsla(270, 15.797828016000002%, 0%, 0.88)',\n    calm: 'rgba(0, 0, 0, 0.54)'\n  },\n  white: '#fff',\n  black: '#000'\n};\n\nexport const fonts = {\n  sansSerif:\n    '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", Arial, sans-serif',\n  serif: 'Georgia, \"Times New Roman\", Times, serif',\n  monospace: 'Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace, monospace'\n};\n\nexport const breakpoints = {\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200\n};\n\nexport const widths = {\n  md: 720,\n  lg: 960,\n  xl: 1140\n};\n\nexport const dimensions = {\n  fontSize: {\n    regular: 16,\n    large: 18\n  },\n  headingSizes: {\n    h1: 2.441,\n    h2: 1.953,\n    h3: 1.563,\n    h4: 1.25\n  },\n  lineHeight: {\n    regular: 1.45,\n    heading: 1.2\n  },\n  containerPadding: 1.5\n};\n\nexport const heights = {\n  header: 60\n};\n"],"sourceRoot":""}