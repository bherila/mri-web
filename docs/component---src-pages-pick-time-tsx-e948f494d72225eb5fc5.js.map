{"version":3,"sources":["webpack:///./src/pages/pick-time.tsx","webpack:///./src/models/SafetyState.ts","webpack:///./src/components/breadcrumb.tsx","webpack:///./src/api/api.ts","webpack:///./node_modules/core-js/modules/es6.regexp.to-string.js","webpack:///./node_modules/core-js/modules/es6.date.to-string.js","webpack:///./node_modules/core-js/modules/_flags.js","webpack:///./node_modules/core-js/modules/es6.regexp.flags.js"],"names":["PickTimePage","props","context","_this","_React$Component","call","this","state","qna","_models_SafetyState__WEBPACK_IMPORTED_MODULE_9__","a","loadState","times","err","offset","total","showModal","componentDidMount","_this2","sessionStorage","scan","location","href","_api_api__WEBPACK_IMPORTED_MODULE_5__","f","timeSlotsGET","withContrast","contrast","locationId","then","result","value","setState","length","message","renderSlotAvailabilityDate","dt","needConfirm","_this3","react__WEBPACK_IMPORTED_MODULE_4__","createElement","className","friendlyBegin","map","timeSlot","key","time","isAvailable","onClick","pickTime","renderModal","_this4","react_modal__WEBPACK_IMPORTED_MODULE_10___default","isOpen","overlayClassName","type","Object","gatsby__WEBPACK_IMPORTED_MODULE_8__","navigate","n","render","_this5","_this$state","_layouts__WEBPACK_IMPORTED_MODULE_6__","id","_components_breadcrumb__WEBPACK_IMPORTED_MODULE_7__","num","b","fname","toString","date","i","JSON","stringify","setItem","e","Component","__webpack_exports__","default","161","t","d","r","SafetyState","lname","email","phone","answers","implants","currentImplant","haveOrder","overrideSafetyWarning","height","weight","doctorName","doctorContact","insFront","insBack","mriOrder","carrierNumber","groupNumber","policyNumber","dob","address1","address2","city","zip","optedIn","parse","getItem","jsonState","o","assign","165","s","u","c","Chevron","react__WEBPACK_IMPORTED_MODULE_2__","src","width","alt","translucent","Ez123","OrderBreadcrumb","gatsby__WEBPACK_IMPORTED_MODULE_3__","Link","to","style","display","MriTypeBreadcrumb","_ref","name","TimeslotBreadcrumb","slot","slotId","replace","reserved","168","y","w","D","B","BASE_PATH","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","query","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","authToken","contentTypeHeader","fetchOptions","method","Content-Type","req","body","headers","url","format","AuthApiFetchParamCreator","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","prototype","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","runPOST","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesGET","availabilityRulesPOST","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","search","ScheduleApiFetchParamCreator","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerDELETE","appointmentHandlerGET","appointmentHandlerPOST","appointmentHandlerPUT","__webpack_require__","anObject","$flags","DESCRIPTORS","$toString","define","fn","RegExp","source","flags","R","concat","DateProto","Date","getTime","NaN","205","module","exports","that","global","ignoreCase","multiline","unicode","sticky","configurable","get"],"mappings":"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","file":"component---src-pages-pick-time-tsx-e948f494d72225eb5fc5.js","sourcesContent":["import * as React from 'react'\nimport * as Api from '../api/api'\nimport IndexLayout from '../layouts'\nimport {Ez123, MriTypeBreadcrumb} from \"../components/breadcrumb\";\nimport {navigate} from \"gatsby\";\nimport {SafetyState} from \"../models/SafetyState\";\nimport ReactModal from 'react-modal';\n\nconst take = 4;\n\ninterface IState\n{\n\terr: any,\n\toffset: number;\n\ttotal: number;\n\tqna: SafetyState;\n\ttimes: Api.SlotAvailabilityDate[];\n\tshowModal: boolean;\n}\n\nclass PickTimePage extends React.Component<{}, IState> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\tqna: SafetyState.loadState(),\n\t\t\ttimes: [],\n\t\t\terr: null,\n\t\t\toffset: 0,\n\t\t\ttotal: 0,\n\t\t\tshowModal: false,\n\t\t};\n\t}\n\n\tpublic componentDidMount() {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst scan = this.state.qna.scan;\n\t\t\tif (!scan) {\n\t\t\t\tlocation.href = '/?err=no-scan';\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tnew Api.ScheduleApi().timeSlotsGET({\n\t\t\t\twithContrast: scan.contrast === 'with and without contrast',\n\t\t\t\tlocationId: ''\n\t\t\t}).then((result) => {\n\t\t\t\tif (result.value) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\ttimes: result.value || [],\n\t\t\t\t\t\ttotal: result.value.length || 0,\n\t\t\t\t\t\tqna: SafetyState.loadState(),\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\terr: result.message || 'Error',\n\t\t\t\t\t\tqna: SafetyState.loadState(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, (err) => this.setState({\n\t\t\t\terr,\n\t\t\t\tqna: SafetyState.loadState(),\n\t\t\t}));\n\t\t}\n\t}\n\n\tpublic renderSlotAvailabilityDate(dt: Api.SlotAvailabilityDate, needConfirm: boolean) {\n\t\treturn (\n\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t<h3>{dt.friendlyBegin}</h3>\n\t\t\t\t{dt.times ? dt.times.map((timeSlot) => (\n\t\t\t\t\t<a key={timeSlot.time}\n\t\t\t\t\t   href=\"#\"\n\t\t\t\t\t   className={`buttontimeslot ${timeSlot.isAvailable ? '' : 'unavailable '}w-button`}\n\t\t\t\t\t   onClick={() => this.pickTime(timeSlot, needConfirm)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{timeSlot.time}\n\t\t\t\t\t</a>\n\t\t\t\t)) : <div>dt.times is {typeof dt.times}</div>}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tpublic renderModal() {\n\t\treturn (\n\t\t\t<ReactModal\n\t\t\t\tisOpen={this.state.showModal}\n\t\t\t\tclassName=\"modal-content animated fadeInUp\"\n\t\t\t\toverlayClassName=\"modal-wrapper\"\n\t\t\t>\n\t\t\t\t<p><b>The time you selected is tomorrow.</b></p>\n\t\t\t\t<p>We won't have time to obtain prior authorization from your insurance carrier. If you aren't using insurance, this won't be a problem.</p>\n\t\t\t\t<p>Are you sure you want to select this time?</p>\n\t\t\t\t<p>\n\t\t\t\t\t<button type=\"button\"\n\t\t\t\t\t\t\tclassName=\"button w-button\"\n\t\t\t\t\t\t\tonClick={() => navigate('/addl-info')}>\n\t\t\t\t\t\tYes, continue\n\t\t\t\t\t</button>\n\t\t\t\t\t<button type=\"button\"\n\t\t\t\t\t\t\tclassName=\"button w-button\"\n\t\t\t\t\t\t\tonClick={() => this.setState({showModal: false})}>\n\t\t\t\t\t\tNo, change time\n\t\t\t\t\t</button>\n\t\t\t\t</p>\n\t\t\t</ReactModal>\n\t\t);\n\t}\n\n\tpublic render() {\n\t\tconst {offset, total, err, times} = this.state;\n\t\treturn (\n\t\t\t<IndexLayout>\n\t\t\t<section id=\"Q2\" className=\"vspace80 w-container\">\n\t\t\t\t<div>\n\t\t\t\t\t<Ez123 num={2} />\n\t\t\t\t\t<div className=\"breadcrumb-stack animated zoomIn\">\n\t\t\t\t\t\t<MriTypeBreadcrumb value={this.state.qna.scan}/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"w-row\">\n\t\t\t\t\t{/*<div className=\"centered w-col w-col-2\" />*/}\n\t\t\t\t\t<div className=\"centered w-col w-col-3\">\n\t\t\t\t\t\t{/*<img*/}\n\t\t\t\t\t\t\t{/*src=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f3661e73d2f76eedd_Meet%20Our%20Team.svg\"*/}\n\t\t\t\t\t\t\t{/*width={150}*/}\n\t\t\t\t\t\t\t{/*height={150}*/}\n\t\t\t\t\t\t{/*/>*/}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"centered w-col w-col-6\">\n\t\t\t\t\t\t<h3>Almost done, {this.state.qna.fname}!</h3>\n\t\t\t\t\t\t<h3>Choose an available time slot to book your {this.state.qna.scan && this.state.qna.scan.time} appointment.</h3>\n\t\t\t\t\t\t<p>If you're interested in a same day appointment, please call us for same day availability at <a href=\"tel:+18334332567\">1 833-IDEAL-MR</a>.</p>\n\t\t\t\t\t\t{err && <p>Oops! {err.toString()}</p>}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"w-row\">\n\t\t\t\t\t<div className=\"w-col w-col-2\">\n\t\t\t\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t\t\t\t{offset > 0 && (\n\t\t\t\t\t\t\t\t<a href=\"#\"\n\t\t\t\t\t\t\t\t   onClick={() => this.setState({offset: offset - 1})}\n\t\t\t\t\t\t\t\t   className=\"buttontimeslot w-button\">\n\t\t\t\t\t\t\t\t\t&laquo; Earlier Dates\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{times && times.map((date, i) => (\n\t\t\t\t\t\t(i >= offset && (i - offset) < take) && (\n\t\t\t\t\t\t\t<div key={JSON.stringify(date || i)} className=\"w-col w-col-2\">\n\t\t\t\t\t\t\t\t{this.renderSlotAvailabilityDate(date, i < 1)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t))}\n\t\t\t\t\t{offset + take < total && (\n\t\t\t\t\t\t<div className=\"w-col w-col-2\">\n\t\t\t\t\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t\t\t\t\t<a href=\"#\"\n\t\t\t\t\t\t\t\t   onClick={() => this.setState({offset: offset + 1})}\n\t\t\t\t\t\t\t\t   className=\"buttontimeslot w-button\">\n\t\t\t\t\t\t\t\t\tLater Dates &gt;&gt;\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t\t{this.renderModal()}\n\t\t\t</IndexLayout>\n\t\t);\n\t}\n\n\tprivate pickTime(timeSlot: Api.SlotAvailabilityTime, needConfirm: boolean) {\n\t\tif (timeSlot.isAvailable) {\n\t\t\tsessionStorage.setItem('timeSlot', JSON.stringify(timeSlot));\n\t\t\tif (needConfirm) {\n\t\t\t\tthis.setState({showModal: true});\n\t\t\t} else {\n\t\t\t\tnavigate('/addl-info');\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default PickTimePage;\n","import {SlotAvailabilityTime} from \"../api/api\";\nimport {IScan} from \"./Scan\";\n\nexport class SafetyState {\n\tconstructor() {\n\t\tthis.fname =  '';\n\t\tthis.lname =  '';\n\t\tthis.answers =  {};\n\t\tthis.implants =  [];\n\t\tthis.currentImplant =  '';\n\t\tthis.scan =  null;\n\t\tthis.haveOrder =  false;\n\t\tthis.overrideSafetyWarning =  false;\n\t\tthis.email = '';\n\t\tthis.phone = '';\n\t\tthis.height = '';\n\t\tthis.weight = '';\n\t\tthis.doctorName = '';\n\t\tthis.doctorContact = '';\n\t\tthis.insFront = '';\n\t\tthis.insBack = '';\n\t\tthis.mriOrder = '';\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tthis.timeSlot = JSON.parse(sessionStorage.getItem('timeSlot') || '{}');\n\t\t} else {\n\t\t\tthis.timeSlot = null;\n\t\t}\n\t\tthis.err = '';\n\t\tthis.dob = '';\n\t\tthis.carrierNumber = '';\n\t\tthis.groupNumber = '';\n\t\tthis.policyNumber = '';\n\t\tthis.address1 = '';\n\t\tthis.address2 = '';\n\t\tthis.city = '';\n\t\tthis.state = '';\n\t\tthis.zip = '';\n\t\tthis.optedIn = true;\n\t}\n\tpublic fname: string;\n\tpublic lname: string;\n\tpublic email: string;\n\tpublic phone: string;\n\tpublic answers: any;\n\tpublic implants: string[];\n\tpublic currentImplant: string;\n\tpublic haveOrder: boolean;\n\tpublic scan: IScan | null;\n\tpublic overrideSafetyWarning: boolean;\n\tpublic height: string;\n\tpublic weight: string;\n\tpublic doctorName: string;\n\tpublic doctorContact: string;\n\tpublic insFront: string;\n\tpublic insBack: string;\n\tpublic mriOrder: string;\n\tpublic carrierNumber: string;\n\tpublic groupNumber: string;\n\tpublic policyNumber: string;\n\tpublic timeSlot: SlotAvailabilityTime | null;\n\tpublic err: string;\n\tpublic dob: string;\n\tpublic address1: string;\n\tpublic address2: string;\n\tpublic city: string;\n\tpublic state: string;\n\tpublic zip: string;\n\tpublic optedIn: boolean;\n\n\tpublic static loadState(): SafetyState {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst jsonState = JSON.parse(sessionStorage.getItem('wizard') || '{}');\n\t\t\tconst o = {\n\t\t\t\t// fname: sessionStorage.getItem('fname') || '',\n\t\t\t\t// lname: sessionStorage.getItem('lname') || '',\n\t\t\t\t// email: sessionStorage.getItem('email') || '',\n\t\t\t\t// phone: sessionStorage.getItem('phone') || '',\n\t\t\t\t// height: sessionStorage.getItem('height') || '',\n\t\t\t\t// weight: sessionStorage.getItem('weight') || '',\n\t\t\t\t// doctorName: sessionStorage.getItem('doctorName') || '',\n\t\t\t\t// insFront: sessionStorage.getItem('insFront') || '',\n\t\t\t\t// insBack: sessionStorage.getItem('insBack') || '',\n\t\t\t\t// mriOrder: sessionStorage.getItem('mriOrder') || '',\n\t\t\t\tscan: JSON.parse(sessionStorage.getItem('scan') || '{}'),\n\t\t\t\thaveOrder: sessionStorage.getItem('haveOrder') === 'true',\n\t\t\t};\n\t\t\treturn Object.assign(new SafetyState(), jsonState, o);\n\t\t}\n\t\treturn new SafetyState();\n\t}\n}\n","import * as React from 'react';\nimport {Link} from 'gatsby';\nimport {SlotAvailabilityTime} from \"../api/api\";\n\nconst Chevron = (props: {translucent?: boolean}) => (\n\t<img\n\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5be12c8e888fb5963088dc64_chevron-right-blue-2.svg\"\n\t\twidth=\"38\" height=\"38\" alt=\"Chevron right\" className={props.translucent ? 'translucent' : ''}/>\n);\n\nexport const Ez123 = (props: {num: number}) => (\n\t<div>\n\t\t<div className=\"breadcrumb-row\">\n\t\t\t<div className={'circled ' + (props.num < 1 ? 'translucent' : '') }>1</div>\n\t\t\t<Chevron translucent={props.num < 2} />\n\t\t\t<div className={'circled ' + (props.num < 2 ? 'translucent' : '') }>2</div>\n\t\t\t<Chevron translucent={props.num < 3} />\n\t\t\t<div className={'circled ' + (props.num < 3 ? 'translucent' : '') }>3</div>\n\t\t</div>\n\t\t<div className=\"breadcrumb-row\">\n\t\t\t{props.num === 1 && <h3><strong>Step 1.</strong> Your details</h3>}\n\t\t\t{props.num === 2 && <h3><strong>Step 2.</strong> Choose your scan</h3>}\n\t\t\t{props.num === 3 && <h3><strong>Step 3.</strong> Health &amp; Safety Information</h3>}\n\t\t</div>\n\t</div>\n);\n\nexport const OrderBreadcrumb = (props: {value: boolean}) => (\n    <Link to=\"/have-order\"\n       className=\"breadcrumb w-button\" style={{display: 'none'}}>\n\t\t{props.value ? 'Have Doctor\\'s Order' : 'No Order'} ✓\n\t</Link>\n);\n\nexport const MriTypeBreadcrumb = ({value}) => {\n\tif (!value) {\n\t\treturn (\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\t\tClick here to select MRI type\n\t\t\t</Link>\n\t\t);\n\t}\n\tif (typeof value === 'string') {\n\t\treturn (\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\t\tScan type: {value} &times;\n\t\t\t</Link>\n\t\t);\n\t}\n\treturn (\n\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\tScan type: {value.name || 'e!name'} {value.contrast || 'e!contrast'} &times;\n\t\t</Link>\n\t)\n};\n\nexport const TimeslotBreadcrumb = (props: {slot: SlotAvailabilityTime | null, reserved?: boolean}) => (\n\t!!props.slot ? (\n\t\t<Link to=\"/pick-time\" className=\"breadcrumb w-button\">\n\t\t\t{(props.slot.slotId || 'no time selected').replace(/(\\d{4})-(\\d{2})-(\\d{2})T([^\\s]{5}).*/g, \"$2/$3/$1 at $4\")} &times;<br /><small>({props.reserved ? 'reserved' : 'not yet reserved'})</small>\n\t\t</Link>\n\t) : <div />\n);\n","/**\n * ideal MRI\n * Signup Center API\n *\n * OpenAPI spec version: v1\n * Contact: ben@herila.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as querystring from \"querystring\";\nimport * as url from \"url\";\n\nimport * as isomorphicFetch from \"isomorphic-fetch\";\nimport * as assign from \"core-js/library/fn/object/assign\";\n\ninterface Dictionary<T> { [index: string]: T; }\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\n\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\nexport class BaseAPI {\n    basePath: string;\n    fetch: FetchAPI;\n\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\n        this.basePath = basePath;\n        this.fetch = fetch;\n    }\n};\n\nexport interface ApiResultListAppointment {\n    \"value\"?: Array<Appointment>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListAvailabilityRule {\n    \"value\"?: Array<AvailabilityRule>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListSlotAvailabilityDate {\n    \"value\"?: Array<SlotAvailabilityDate>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface Appointment {\n    \"resourceId\"?: string;\n    \"serviceType\"?: string;\n    \"serviceLength\"?: number;\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"address1\"?: string;\n    \"city\"?: string;\n    \"state\"?: string;\n    \"zip\"?: string;\n    \"height\"?: string;\n    \"weight\"?: string;\n    \"reminder\"?: number;\n    \"doctorName\"?: string;\n    \"doctorPhone\"?: string;\n    \"insuranceCarrier\"?: string;\n    \"insuranceGroupNumber\"?: string;\n    \"insurancePolicyNumber\"?: string;\n    \"insuranceVerified\"?: boolean;\n    \"priorAuthObtained\"?: boolean;\n    \"orderEnteredToRIS\"?: boolean;\n    \"patientWasCalled\"?: boolean;\n    \"confirmed\"?: boolean;\n    \"orderImageUrl\"?: string;\n    \"insuranceFrontUrl\"?: string;\n    \"insuranceBackUrl\"?: string;\n    \"surveyDataJson\"?: string;\n    \"approvedDate\"?: Date;\n    \"submittedDate\"?: Date;\n    \"confirmedDate\"?: Date;\n    \"birthday\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface AvailabilityRule {\n    \"priority\"?: number;\n    \"resourceID\"?: string;\n    \"onThisDay\"?: string;\n    \"startTime\"?: string;\n    \"endTime\"?: string;\n    \"comment\"?: string;\n    \"status\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface CustomerLead {\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"dob\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"serviceType\"?: string;\n    \"timeSlot\"?: string;\n    \"withContrast\"?: boolean;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface Location {\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface SlotAvailabilityDate {\n    \"date\"?: Date;\n    \"friendlyBegin\"?: string;\n    \"times\"?: Array<SlotAvailabilityTime>;\n}\n\nexport interface SlotAvailabilityTime {\n    \"time\"?: string;\n    \"resourceId\"?: string;\n    \"isHidden\"?: boolean;\n    \"isAvailable\"?: boolean;\n    \"isContrastAvailable\"?: boolean;\n    \"isContrastRequired\"?: boolean;\n    \"linkedAppointment\"?: Appointment;\n    \"slotId\"?: string;\n}\n\nexport interface Stack {\n    \"in\"?: string;\n    \"at\"?: string;\n}\n\nexport interface SurveyQuestion {\n    \"questionId\"?: string;\n    \"questionShowIf\"?: string;\n    \"questionShowIfAnswer\"?: string;\n    \"questionText\"?: string;\n    \"questionType\"?: string;\n    \"isRequired\"?: boolean;\n    \"isHidden\"?: boolean;\n    \"order\"?: number;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface TableResult {\n    \"result\"?: any;\n    \"httpStatusCode\"?: number;\n    \"etag\"?: string;\n}\n\nexport interface User {\n    \"apiKey\"?: string;\n    \"immutableId\"?: string;\n    \"referenceRowKey\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\n\n\n/**\n * AuthApi - fetch parameter creator\n */\nexport const AuthApiFetchParamCreator = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/auth`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * AuthApi - functional programming interface\n */\nexport const AuthApiFp = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * AuthApi - object-oriented interface\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * AuthApi - factory interface\n */\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Auth\n         * @param req\n         * @param authToken\n         */\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n            return AuthApiFp.auth(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * LeadGenApi - fetch parameter creator\n */\nexport const LeadGenApiFetchParamCreator = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * LeadGenApi - functional programming interface\n */\nexport const LeadGenApiFp = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * LeadGenApi - object-oriented interface\n */\nexport class LeadGenApi extends BaseAPI {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * LeadGenApi - factory interface\n */\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * PostQuestionApi - fetch parameter creator\n */\nexport const PostQuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * PostQuestionApi - functional programming interface\n */\nexport const PostQuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * PostQuestionApi - object-oriented interface\n */\nexport class PostQuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * PostQuestionApi - factory interface\n */\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         * @param req\n         */\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * QuestionApi - fetch parameter creator\n */\nexport const QuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * QuestionApi - functional programming interface\n */\nexport const QuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * QuestionApi - object-oriented interface\n */\nexport class QuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any) {\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * QuestionApi - factory interface\n */\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         */\n        getQuestions(options?: any) {\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ResourceApi - fetch parameter creator\n */\nexport const ResourceApiFetchParamCreator = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ResourceApi - functional programming interface\n */\nexport const ResourceApiFp = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ResourceApi - object-oriented interface\n */\nexport class ResourceApi extends BaseAPI {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ResourceApi - factory interface\n */\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param authToken\n         */\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ScheduleApi - fetch parameter creator\n */\nexport const ScheduleApiFetchParamCreator = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslots`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"length\": params[\"length\"],\n            \"locationId\": params[\"locationId\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ScheduleApi - functional programming interface\n */\nexport const ScheduleApiFp = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ScheduleApi - object-oriented interface\n */\nexport class ScheduleApi extends BaseAPI {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ScheduleApi - factory interface\n */\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary TimeSlots\n         * @param authToken\n         * @param withContrast\n         * @param length\n         * @param locationId\n         */\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\n        },\n    };\n};\n\n","'use strict';\nrequire('./es6.regexp.flags');\nvar anObject = require('./_an-object');\nvar $flags = require('./_flags');\nvar DESCRIPTORS = require('./_descriptors');\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n","var DateProto = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar $toString = DateProto[TO_STRING];\nvar getTime = DateProto.getTime;\nif (new Date(NaN) + '' != INVALID_DATE) {\n  require('./_redefine')(DateProto, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? $toString.call(this) : INVALID_DATE;\n  });\n}\n","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n"],"sourceRoot":""}