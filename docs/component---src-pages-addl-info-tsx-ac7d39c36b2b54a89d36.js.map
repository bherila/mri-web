{"version":3,"sources":["webpack:///./src/components/FileUpload.tsx","webpack:///./src/pages/addl-info.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/Header.tsx","webpack:///./src/components/LayoutRoot.tsx","webpack:///./src/components/LayoutMain.tsx","webpack:///./src/components/Footer.tsx","webpack:///./src/components/FooterNav.tsx","webpack:///./src/layouts/index.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/breadcrumb.tsx","webpack:///./src/api/api.ts","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/helpers/authToken.ts"],"names":["__webpack_require__","showImageOrPlaceholder","img","length","react","createElement","alt","src","className","style","maxHeight","maxWidth","Component","h","n","f","addl_info_ContactInformation","ContactInformation","props","context","_this","_React$Component","call","this","state","fname","email","dob","phone","hasInsurance","lname","scan","haveOrder","height","weight","doctorName","mriOrder","insFront","insBack","timeSlot","err","componentDidMount","sessionStorage","getItem","JSON","parse","setState","updateStorage","setItem","render","_this2","layouts","a","id","breadcrumb","num","b","value","d","name","data-name","action","onSubmit","e","handleSubmit","htmlFor","type","maxLength","onChange","currentTarget","es","accept","onDrop","files","_this3","console","log","sObj","_this4","preventDefault","slotId","api","appointmentHandlerPOST","req","partitionKey","split","rowKey","lastName","firstName","address1","confirmed","insuranceBackUrl","insuranceFrontUrl","insuranceCarrier","insuranceGroupNumber","insurancePolicyNumber","insuranceVerified","orderImageUrl","resourceId","serviceType","stringify","birthday","serviceLength","search","authToken","Object","withContrast","locationId","then","res","success","gatsby_browser_entry","navigate","message","alert","t","__webpack_exports__","default","p","160","r","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","withPrefix","push","replace","navigateTo","_wait_for_route_change__WEBPACK_IMPORTED_MODULE_3__","c","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4___default","_parse_path__WEBPACK_IMPORTED_MODULE_5__","createContext","Consumer","staticQueryData","data","query","children","Error","propTypes","object","string","isRequired","func","components_Header","_ref","objectDestructuringEmpty_default","href","data-collapse","data-animation","data-duration","role","StyledLayoutRoot","index_esm","target","components_LayoutRoot","components_LayoutMain","components_Footer","Helmet_default","integrity","crossOrigin","FooterNav","title","site","siteMetadata","meta","content","description","_991718019","m","module","exports","Chevron","react__WEBPACK_IMPORTED_MODULE_2__","width","translucent","Ez123","OrderBreadcrumb","gatsby__WEBPACK_IMPORTED_MODULE_3__","Link","to","display","MriTypeBreadcrumb","_ref2","contrast","TimeslotBreadcrumb","170","g","w","F","B","i","s","o","BASE_PATH","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","contentTypeHeader","fetchOptions","method","Content-Type","body","headers","url","format","AuthApiFetchParamCreator","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","prototype","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","runPOST","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesGET","availabilityRulesPOST","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","ScheduleApiFetchParamCreator","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerDELETE","appointmentHandlerGET","appointmentHandlerPUT","timeSlotsGET","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","_loader__WEBPACK_IMPORTED_MODULE_3__","ProdPageRenderer","location","pageResources","getResourcesForPathname","pathname","shape","l","173","175","177","179","196","getAuthToken","loginRedirect","gatsby__WEBPACK_IMPORTED_MODULE_0__","token","removeItem"],"mappings":"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","file":"component---src-pages-addl-info-tsx-ac7d39c36b2b54a89d36.js","sourcesContent":["import Dropzone from \"react-dropzone\";\r\nimport * as React from \"react\";\r\nimport {BASE_PATH} from \"ucshared\";\r\nconst $ = require('jquery');\r\n\r\nexport function showImageOrPlaceholder(img: string | null) {\r\n\tif (typeof img !== 'string' || img === null || img.length < 1) {\r\n\t\treturn <div>Click here to select picture/PDF</div>;\r\n\t}\r\n\treturn (\r\n\t\t<img alt=\"Uploaded image\" src={img} className=\"img-fluid\" style={{maxHeight: '100px', maxWidth: '100%'}}/>\r\n\t);\r\n}\r\n\r\nexport class FileUpload extends React.Component<{bucket: string, url: string, onNewUrl: (url: string)=>any}, {isLoading: boolean}> {\r\n\tconstructor(props, context) {\r\n\t\tsuper(props, context);\r\n\t\tthis.state = {isLoading: false};\r\n\t}\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<Dropzone\r\n\t\t\t\taccept=\"image/*\"\r\n\t\t\t\tclassName=\"button green small w-button\"\r\n\t\t\t\tonDrop={(files) => this.onDrop(this.props.bucket, files)}\r\n\t\t\t>{showImageOrPlaceholder(this.props.url)}\r\n\t\t\t</Dropzone>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate onDrop(bucket: string, files: File[]) {\r\n\t\tconst fd = new FormData();\r\n\t\tfd.append('file', files[0]);\r\n\r\n\t\t$.ajax({\r\n\t\t\turl: BASE_PATH + '/api/upload/?to=' + bucket,\r\n\t\t\ttype: 'POST',\r\n\t\t\tenctype: 'multipart/form-data',\r\n\t\t\tprocessData: false,  // Important!\r\n\t\t\tcacheData: false,\r\n\t\t\tcontentType: false,\r\n\t\t\tdata: fd,\r\n\t\t}).then(\r\n\t\t\t(data: any, textStatus: string, jqXhr: any) => {\r\n\t\t\t\tconsole.log(textStatus, data);\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisLoading: false,\r\n\t\t\t\t\tuploadedUri: data,\r\n\t\t\t\t} as any, () => {\r\n\t\t\t\t\tif (this.props.onNewUrl) {\r\n\t\t\t\t\t\tthis.props.onNewUrl(data);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from 'react'\r\nimport { navigate } from 'gatsby'\r\nimport IndexLayout from '../layouts'\r\nimport {Ez123, MriTypeBreadcrumb, TimeslotBreadcrumb} from \"../components/breadcrumb\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport {showImageOrPlaceholder} from \"../components/FileUpload\";\r\nimport {ScheduleApi, SlotAvailabilityTime} from \"../api/api\";\r\nimport {getAuthToken} from \"../helpers/authToken\";\r\n\r\ninterface ICPState {\r\n\tlname: string;\r\n\tscan: string;\r\n\tfname: string;\r\n\thasInsurance: boolean;\r\n\thaveOrder: boolean;\r\n\theight: string;\r\n\tweight: string;\r\n\tdoctorName: string;\r\n\tmriOrder: string;\r\n\tinsFront: string;\r\n\tinsBack: string;\r\n\ttimeSlot: SlotAvailabilityTime | null;\r\n\temail: string;\r\n\tphone: string;\r\n\tdob: string;\r\n\terr: string;\r\n}\r\n\r\nclass ContactInformation extends React.Component<{}, ICPState> {\r\n\tconstructor(props, context) {\r\n\t\tsuper(props, context);\r\n\t\tthis.state = {\r\n\t\t\tfname: '',\r\n\t\t\temail: '',\r\n\t\t\tdob: '',\r\n\t\t\tphone: '',\r\n\t\t\thasInsurance: true,\r\n\t\t\tlname: '',\r\n\t\t\tscan: '',\r\n\t\t\thaveOrder: false,\r\n\t\t\theight: '',\r\n\t\t\tweight: '',\r\n\t\t\tdoctorName: '',\r\n\t\t\tmriOrder: '',\r\n\t\t\tinsFront: '',\r\n\t\t\tinsBack: '',\r\n\t\t\ttimeSlot: null,\r\n\t\t\terr: '',\r\n\t\t};\r\n\t}\r\n\r\n\tpublic componentDidMount() {\r\n\t\tif (typeof sessionStorage !== 'undefined') {\r\n\t\t\tconst fname = sessionStorage.getItem('fname') || '';\r\n\t\t\tconst lname = sessionStorage.getItem('lname') || '';\r\n\t\t\tconst email = sessionStorage.getItem('email') || '';\r\n\t\t\tconst phone = sessionStorage.getItem('phone') || '';\r\n\t\t\tconst scan = JSON.parse(sessionStorage.getItem('scan') || '{}');\r\n\t\t\tconst haveOrder = sessionStorage.getItem('haveOrder') === 'true';\r\n\t\t\tthis.setState({fname, lname, email, phone, haveOrder, scan});\r\n\r\n\t\t\tconst height = sessionStorage.getItem('height') || '';\r\n\t\t\tconst weight = sessionStorage.getItem('weight') || '';\r\n\t\t\tconst doctorName = sessionStorage.getItem('doctorName') || '';\r\n\t\t\tconst insFront = sessionStorage.getItem('insFront') || '';\r\n\t\t\tconst insBack = sessionStorage.getItem('insBack') || '';\r\n\t\t\tconst mriOrder = sessionStorage.getItem('mriOrder') || '';\r\n\r\n\t\t\tconst timeSlot = JSON.parse(sessionStorage.getItem('timeSlot') || '{}');\r\n\t\t\tthis.setState({height, weight, doctorName, insFront, insBack, mriOrder, timeSlot});\r\n\t\t}\r\n\t}\r\n\r\n\tpublic updateStorage() {\r\n\t\tif (typeof sessionStorage !== 'undefined') {\r\n\t\t\tsessionStorage.setItem('height', this.state.height);\r\n\t\t\tsessionStorage.setItem('weight', this.state.weight);\r\n\t\t\tsessionStorage.setItem('doctorName', this.state.doctorName);\r\n\t\t\tsessionStorage.setItem('insFront', this.state.insFront);\r\n\t\t\tsessionStorage.setItem('insBack', this.state.insBack);\r\n\t\t\tsessionStorage.setItem('mriOrder', this.state.mriOrder);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<IndexLayout>\r\n\t\t\t\t<section id=\"Q1\" className=\"vspace80 w-container\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Ez123 num={3} />\r\n\t\t\t\t\t\t<div className=\"breadcrumb-stack\">\r\n\t\t\t\t\t\t\t<MriTypeBreadcrumb value={this.state.scan}/>\r\n\t\t\t\t\t\t\t<TimeslotBreadcrumb value={this.state.timeSlot}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"vspace80 centered w-row\">\r\n\t\t\t\t\t\t<div className=\"w-hidden-small w-hidden-tiny w-col w-col-4\">\r\n\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5ba72c92e33cb6832a1bd949_idealMRI_lady_3.png\"\r\n\t\t\t\t\t\t\t\talt=\"\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"w-hidden-small w-hidden-tiny w-col w-col-1\" />\r\n\t\t\t\t\t\t<div className=\"w-col w-col-7\">\r\n\t\t\t\t\t\t\t<div className=\"w-form\">\r\n\t\t\t\t\t\t\t\t<form\r\n\t\t\t\t\t\t\t\t\tid=\"email-form\"\r\n\t\t\t\t\t\t\t\t\tname=\"email-form\"\r\n\t\t\t\t\t\t\t\t\tdata-name=\"Email Form\"\r\n\t\t\t\t\t\t\t\t\taction=\"#\"\r\n\t\t\t\t\t\t\t\t\tonSubmit={(e) => this.handleSubmit(e)}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<h3>Additional Information</h3>\r\n\t\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t\t<strong>Thanks! You're all set. </strong>We will give you\r\n\t\t\t\t\t\t\t\t\t\ta call to confirm any details. &nbsp;We'll also send you a\r\n\t\t\t\t\t\t\t\t\t\treminder before your scan. &nbsp;You can fill out this\r\n\t\t\t\t\t\t\t\t\t\tadditional information now, to save time. It takes about 2\r\n\t\t\t\t\t\t\t\t\t\tor 3 more minutes.\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t\t<div className=\"inputrow\">\r\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"Height\" className=\"flexlabel\">\r\n\t\t\t\t\t\t\t\t\t\t\tHeight\r\n\t\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flexinput w-input\"\r\n\t\t\t\t\t\t\t\t\t\t\tmaxLength={256}\r\n\t\t\t\t\t\t\t\t\t\t\tname=\"Height\"\r\n\t\t\t\t\t\t\t\t\t\t\tdata-name=\"Height\"\r\n\t\t\t\t\t\t\t\t\t\t\tid=\"Height\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={this.state.height}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({height: e.currentTarget.value}, () => this.updateStorage())}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"inputrow\">\r\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"Weight\" className=\"flexlabel\">\r\n\t\t\t\t\t\t\t\t\t\t\tWeight\r\n\t\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flexinput w-input\"\r\n\t\t\t\t\t\t\t\t\t\t\tmaxLength={256}\r\n\t\t\t\t\t\t\t\t\t\t\tname=\"Weight\"\r\n\t\t\t\t\t\t\t\t\t\t\tdata-name=\"Weight\"\r\n\t\t\t\t\t\t\t\t\t\t\tid=\"Weight\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={this.state.weight}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({weight: e.currentTarget.value}, () => this.updateStorage())}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"inputrow\">\r\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"DoctorName\" className=\"flexlabel\">\r\n\t\t\t\t\t\t\t\t\t\t\tWho is your doctor?\r\n\t\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flexinput w-input\"\r\n\t\t\t\t\t\t\t\t\t\t\tmaxLength={256}\r\n\t\t\t\t\t\t\t\t\t\t\tname=\"DoctorName\"\r\n\t\t\t\t\t\t\t\t\t\t\tdata-name=\"DoctorName\"\r\n\t\t\t\t\t\t\t\t\t\t\tid=\"DoctorName\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={this.state.doctorName}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({doctorName: e.currentTarget.value}, () => this.updateStorage())}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"inputrow\">\r\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"name-6\" className=\"flexlabel\">\r\n\t\t\t\t\t\t\t\t\t\t\tUpload MRI&nbsp;order\r\n\t\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"flexinput\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Dropzone\r\n\t\t\t\t\t\t\t\t\t\t\t\taccept=\"image/*\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"button green small w-button\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonDrop={(files) => this.onDrop('mri-order', files)}\r\n\t\t\t\t\t\t\t\t\t\t\t>{showImageOrPlaceholder(this.state.mriOrder)}\r\n\t\t\t\t\t\t\t\t\t\t\t</Dropzone>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"inputrow\">\r\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"name-6\" className=\"flexlabel\">\r\n\t\t\t\t\t\t\t\t\t\t\t<strong>Insurance Card Front</strong>\r\n\t\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"flexinput\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Dropzone\r\n\t\t\t\t\t\t\t\t\t\t\t\taccept=\"image/*\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"button green small w-button\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonDrop={(files) => this.onDrop('ins-front', files)}\r\n\t\t\t\t\t\t\t\t\t\t\t>{showImageOrPlaceholder(this.state.insFront)}\r\n\t\t\t\t\t\t\t\t\t\t\t</Dropzone>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"inputrow\">\r\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"name-6\" className=\"flexlabel\">\r\n\t\t\t\t\t\t\t\t\t\t\t<strong>Insurance Card Back</strong>\r\n\t\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"flexinput\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Dropzone\r\n\t\t\t\t\t\t\t\t\t\t\t\taccept=\"image/*\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"button green small w-button\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonDrop={(files) => this.onDrop('ins-back', files)}\r\n\t\t\t\t\t\t\t\t\t\t\t>{showImageOrPlaceholder(this.state.insBack)}\r\n\t\t\t\t\t\t\t\t\t\t\t</Dropzone>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"cta-subitem distributed\">\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"cta-link wider w-inline-block\" type=\"submit\">\r\n\t\t\t\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f3661e73d2f76eedd_Meet%20Our%20Team.svg\"\r\n\t\t\t\t\t\t\t\t\t\t\t\talt=\"Submit\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"image\"\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t<div>Submit</div>\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</section>\r\n\t\t\t</IndexLayout>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate onDrop(insBack: string, files: File[]) {\r\n\t\tconsole.log(insBack, files);\r\n\t\tif (files.length) {\r\n\t\t\tif (files[0]) {\r\n\t\t\t\tconst sObj = {};\r\n\t\t\t\tsObj[insBack] = files[0].name;\r\n\t\t\t\tthis.setState(sObj, () => this.updateStorage());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n\t\te.preventDefault();\r\n\t\tif (!this.state.timeSlot) {\r\n\t\t\talert('missing timeSlot');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst slotId = this.state.timeSlot.slotId || '';\r\n\t\tnew ScheduleApi().appointmentHandlerPOST({\r\n\t\t\treq: {\r\n\t\t\t\tpartitionKey: slotId.split(' ')[1], // extract location from slotId\r\n\t\t\t\trowKey: slotId,\r\n\t\t\t\tlastName: this.state.lname,\r\n\t\t\t\tfirstName: this.state.fname,\r\n\t\t\t\taddress1: '',\r\n\t\t\t\tconfirmed: false,\r\n\t\t\t\tdoctorName: this.state.doctorName,\r\n\t\t\t\temail: this.state.email,\r\n\t\t\t\tphone: this.state.phone,\r\n\t\t\t\theight: this.state.height || '',\r\n\t\t\t\tinsuranceBackUrl: this.state.insBack,\r\n\t\t\t\tinsuranceFrontUrl: this.state.insFront,\r\n\t\t\t\tinsuranceCarrier: '',\r\n\t\t\t\tinsuranceGroupNumber: '',\r\n\t\t\t\tinsurancePolicyNumber: '',\r\n\t\t\t\tinsuranceVerified: false,\r\n\t\t\t\torderImageUrl: this.state.mriOrder,\r\n\t\t\t\tresourceId: this.state.timeSlot.resourceId,\r\n\t\t\t\tserviceType: JSON.stringify(this.state.scan),\r\n\t\t\t\tweight: this.state.weight,\r\n\t\t\t\tbirthday: this.state.dob,\r\n\t\t\t\tserviceLength: 45, // TODO: Update service length?\r\n\t\t\t},\r\n\t\t\tsearch: '',\r\n\t\t\tauthToken: getAuthToken(),\r\n\t\t\twithContrast: false,\r\n\t\t\tlocationId: ''\r\n\t\t}).then((res) => {\r\n\t\t\tif (res.success && !!res.value && !!res.value.length) {\r\n\t\t\t\tsessionStorage.setItem('appointmentEntity', JSON.stringify(res.value[0] || null));\r\n\t\t\t\tnavigate('/safety-questions');\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({err: res.message || ''});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport default ContactInformation;\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport { waitForRouteChange } from \"./wait-for-route-change\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  waitForRouteChange,\n}\n","import * as React from 'react'\r\nimport styled from 'react-emotion'\r\nimport { transparentize } from 'polished'\r\nimport { Link } from 'gatsby'\r\n\r\nimport { heights, dimensions, colors } from '../styles/variables'\r\nimport Container from './Container'\r\nimport * as Webflow from '../styles/webflow';\r\nimport { css } from \"emotion\";\r\n\r\nconst StyledHeader = styled.header('navContainer');\r\n\r\nconst Header: React.SFC<{}> = ({}) => (\r\n\t<header>\r\n\t\t<div className=\"nav-grid\">\r\n\t\t\t<div id=\"w-node-82dfbff5e208-14f3913a\" className=\"header-cta-top\">\r\n\t\t\t\t<div className=\"header-inline-block\">\r\n\t\t\t\t\t<div className=\"cta-heading inline-block blue\">Call :</div>\r\n\t\t\t\t\t<div className=\"cta-heading inline-block\"><a href=\"tel:+18334332567\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t className=\"white\">833-IDEAL-MR</a></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<a href=\"/schedule\" className=\"button-3\">Schedule Online</a></div>\r\n\t\t\t<a href=\"/\" id=\"w-node-82dfbff5e20f-14f3913a\" className=\"brand w-nav-brand w--current\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5ba3081aff7d475f9a6fa6d1_Logo%20Dark.svg\"\r\n\t\t\t\talt=\"\" className=\"image-3\"/></a>\r\n\t\t\t<div data-collapse=\"medium\" data-animation=\"default\" data-duration=\"400\" id=\"w-node-82dfbff5e211-14f3913a\"\r\n\t\t\t\t className=\"navbar w-nav\">\r\n\t\t\t\t<nav role=\"navigation\" className=\"navigation-menu w-nav-menu\"><a href=\"/why-ideal-mri\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t className=\"navigation-link-2 white w-nav-link\">Why\r\n\t\t\t\t\tideal MRI</a><a href=\"/for-clinicians\" className=\"navigation-link-2 white w-nav-link\">Meet Our\r\n\t\t\t\t\tTeam</a><a href=\"/what-to-expect\" className=\"navigation-link-2 white w-nav-link\">What to\r\n\t\t\t\t\tExpect</a><a href=\"/pricing-and-insurance\"\r\n\t\t\t\t\t\t\t\t className=\"navigation-link-2 white w-nav-link\">Pricing &amp; Insurance</a><a\r\n\t\t\t\t\thref=\"/for-clinicians\" className=\"navigation-link-2 white w-nav-link\">For Clinicians</a><a\r\n\t\t\t\t\thref=\"/come-see-us\" className=\"navigation-link-2 white w-nav-link\">Find Us</a></nav>\r\n\t\t\t\t<div className=\"hamburger-button-2 white w-nav-button\">\r\n\t\t\t\t\t<div className=\"w-icon-nav-menu\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div className=\"nav-spacer\">&nbsp;</div>\r\n\t</header>\r\n);\r\n\r\nexport default Header\r\n","import * as React from 'react'\r\nimport styled from 'react-emotion'\r\n\r\nconst StyledLayoutRoot = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh;\r\n`\r\n\r\ninterface LayoutRootProps {\r\n  className?: string\r\n}\r\n\r\nconst LayoutRoot: React.SFC<LayoutRootProps> = ({ children, className }) => (\r\n  <StyledLayoutRoot className={className}>{children}</StyledLayoutRoot>\r\n)\r\n\r\nexport default LayoutRoot\r\n","import * as React from 'react'\r\n// import styled from 'react-emotion'\r\n// const StyledLayoutMain = styled.main`\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   flex: 1;\r\n//\r\n\r\ninterface LayoutMainProps {\r\n  className?: string\r\n}\r\n\r\n// <StyledLayoutMain className={className}>{children}</StyledLayoutMain>\r\nconst LayoutMain: React.SFC<LayoutMainProps> = ({ children, className }) => (\r\n  <main className={className || \"white-section\"}>\r\n      <div className=\"vspace80 w-container\">\r\n          {children}\r\n      </div>\r\n  </main>\r\n);\r\n\r\nexport default LayoutMain\r\n","import * as React from 'react'\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Footer: React.SFC<{}> = ({}) => (\r\n\t<footer className=\"cta-section centered-accented\">\r\n\t\t<div className=\"cta-footer\">\r\n\t\t\t<div className=\"footer-inline-block\">\r\n\t\t\t\t<h2 className=\"cta-heading inline-block blue\"><a href=\"tel:+18334332567\">Call</a> : </h2>\r\n\t\t\t\t<h2 className=\"cta-heading inline-block\"><a href=\"tel:+18334332567\" className=\"white\">833-IDEAL-MR</a>\r\n\t\t\t\t</h2>\r\n\t\t\t</div>\r\n\t\t\t<a href=\"/schedule\" className=\"button large\">Schedule Online</a></div>\r\n\t\t<div className=\"cta-footer\"><img\r\n\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5ba3081aff7d475f9a6fa6d1_Logo%20Dark.svg\"\r\n\t\t\theight=\"60\" alt=\"\" className=\"cta-branding\"/><a href=\"/policies-and-hipaa-notice\">Policies and\r\n\t\t\tInformation</a></div>\r\n\t\t<Helmet>\r\n\t\t\t<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" type=\"text/javascript\"\r\n\t\t\t\t\tintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossOrigin=\"anonymous\" />\r\n\t\t\t<script src=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/js/ideal-mri.71c22ec14.js\"\r\n\t\t\t\t\ttype=\"text/javascript\" />\r\n\t\t</Helmet>\r\n\t</footer>\r\n);\r\n\r\nexport default Footer\r\n","import * as React from 'react'\r\n\r\nconst Footer: React.SFC<{}> = ({}) => (\r\n\t<section className=\"cta-section\">\r\n\t\t<div className=\"w-container\">\r\n\t\t\t<div className=\"w-layout-grid grid-2\"><a href=\"/why-ideal-mri\" id=\"w-node-774288a9e25a-774089fe\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead31fb9e09c21b36b101_Why.svg\" alt=\"\"\r\n\t\t\t\tclassName=\"cta-button-image\"/>\r\n\t\t\t\t<div id=\"w-node-774288a9e25c-774089fe\">Why ideal MRI</div>\r\n\t\t\t</a><a href=\"/what-to-expect\" id=\"w-node-774288a9e25e-774089fe\"\r\n\t\t\t\t   className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f69d670128b342c0a_Expect.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>What to Expect</div>\r\n\t\t\t</a><a href=\"/meet-our-team\" id=\"w-node-774288a9e262-774089fe\" className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f3661e73d2f76eedd_Meet%20Our%20Team.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>Meet Our Team</div>\r\n\t\t\t</a><a href=\"/for-clinicians\" id=\"w-node-774288a9e266-774089fe\"\r\n\t\t\t\t   className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead313661e7266876eedf_Providers.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>For Clinicians</div>\r\n\t\t\t</a><a href=\"/pricing-and-insurance\" id=\"w-node-774288a9e26a-774089fe\"\r\n\t\t\t\t   className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead313661e7547b76eee0_Pricing.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>Pricing &amp; Insurance</div>\r\n\t\t\t</a><a href=\"/come-see-us\" id=\"w-node-774288a9e26e-774089fe\" className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f08470e4beefa3f54_Find%20Us.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>Find Us</div>\r\n\t\t\t</a></div>\r\n\t\t</div>\r\n\t</section>\r\n);\r\n\r\nexport default Footer\r\n","import * as React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport {StaticQuery, graphql} from 'gatsby'\r\n\r\n// import 'modern-normalize'\r\n// import '../styles/normalize'\r\nimport '../styles/webflow.css'\r\nimport '../styles/webflow.grid.css'\r\nimport '../styles/animate.css'\r\nimport '../styles/tables.css'\r\n\r\nimport Header from '../components/Header'\r\nimport LayoutRoot from '../components/LayoutRoot'\r\nimport LayoutMain from '../components/LayoutMain'\r\nimport Footer from \"../components/Footer\";\r\nimport FooterNav from \"../components/FooterNav\";\r\n\r\ntype StaticQueryProps = {\r\n\tsite: {\r\n\t\tsiteMetadata: {\r\n\t\t\ttitle: string\r\n\t\t\tdescription: string\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst IndexLayout: React.SFC = ({children}) => (\r\n\t<StaticQuery\r\n\t\tquery={graphql`\r\n      query IndexLayoutQuery {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n          }\r\n        }\r\n      }\r\n    `}\r\n\t\trender={(data: StaticQueryProps) => (\r\n\t\t\t<LayoutRoot>\r\n\t\t\t\t<Helmet\r\n\t\t\t\t\ttitle={data.site.siteMetadata.title}\r\n\t\t\t\t\tmeta={[\r\n\t\t\t\t\t\t{name: 'description', content: data.site.siteMetadata.description},\r\n\t\t\t\t\t\t{name: 'keywords', content: 'gatsbyjs, gatsby, javascript, sample, something'}\r\n\t\t\t\t\t]}\r\n\t\t\t\t/>\r\n\t\t\t\t<Header/>\r\n\t\t\t\t<LayoutMain>{children}</LayoutMain>\r\n\t\t\t\t<FooterNav/>\r\n\t\t\t\t<Footer/>\r\n\t\t\t</LayoutRoot>\r\n\t\t)}\r\n\t/>\r\n)\r\n\r\nexport default IndexLayout\r\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import * as React from 'react';\r\nimport {Link} from 'gatsby';\r\nimport {SlotAvailabilityTime} from \"../api/api\";\r\n\r\nconst Chevron = (props: {translucent?: boolean}) => (\r\n\t<img\r\n\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5be12c8e888fb5963088dc64_chevron-right-blue-2.svg\"\r\n\t\twidth=\"38\" height=\"38\" alt=\"Chevron right\" className={props.translucent ? 'translucent' : ''}/>\r\n);\r\n\r\nexport const Ez123 = (props: {num: number}) => (\r\n\t<div>\r\n\t\t<div className=\"breadcrumb-row\">\r\n\t\t\t<div className={'circled ' + (props.num < 1 ? 'translucent' : '') }>1</div>\r\n\t\t\t<Chevron translucent={props.num < 2} />\r\n\t\t\t<div className={'circled ' + (props.num < 2 ? 'translucent' : '') }>2</div>\r\n\t\t\t<Chevron translucent={props.num < 3} />\r\n\t\t\t<div className={'circled ' + (props.num < 3 ? 'translucent' : '') }>3</div>\r\n\t\t</div>\r\n\t\t<div className=\"breadcrumb-row\">\r\n\t\t\t{props.num === 1 && <h3><strong>Step 1.</strong> Your details</h3>}\r\n\t\t\t{props.num === 2 && <h3><strong>Step 2.</strong> Choose your scan</h3>}\r\n\t\t\t{props.num === 3 && <h3><strong>Step 3.</strong> Health &amp; Safety Information</h3>}\r\n\t\t</div>\r\n\t</div>\r\n);\r\n\r\nexport const OrderBreadcrumb = ({value}) => (\r\n    <Link to=\"/have-order\"\r\n       className=\"breadcrumb w-button\" style={{display: 'none'}}>\r\n\t\t{value ? 'Have Doctor\\'s Order' : 'No Order'} ✓\r\n\t</Link>\r\n);\r\n\r\nexport const MriTypeBreadcrumb = ({value}) => {\r\n\tif (!value) {\r\n\t\treturn (\r\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\r\n\t\t\t\tClick here to select MRI type\r\n\t\t\t</Link>\r\n\t\t);\r\n\t}\r\n\tif (typeof value === 'string') {\r\n\t\treturn (\r\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\r\n\t\t\t\tScan type: {value}\r\n\t\t\t</Link>\r\n\t\t);\r\n\t}\r\n\treturn (\r\n\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\r\n\t\t\tScan type: {value.name || 'e!name'} {value.contrast || 'e!contrast'}\r\n\t\t</Link>\r\n\t)\r\n};\r\n\r\nexport const TimeslotBreadcrumb = (props: {value: SlotAvailabilityTime | null}) => (\r\n\t!!props.value && <Link to=\"/pick-time\"\r\n\t   className=\"breadcrumb w-button\">\r\n\t\t{(props.value.slotId || 'no time selected').replace(/(\\d{4})-(\\d{2})-(\\d{2})T([^\\s]{5}).*/g, \"$2/$3/$1 at $4\")}<br /><small>(not yet reserved)</small>\r\n\t</Link>\r\n);\r\n","/**\n * ideal MRI\n * Signup Center API\n *\n * OpenAPI spec version: v1\n * Contact: ben@herila.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as querystring from \"querystring\";\nimport * as url from \"url\";\n\nimport * as isomorphicFetch from \"isomorphic-fetch\";\nimport * as assign from \"core-js/library/fn/object/assign\";\n\ninterface Dictionary<T> { [index: string]: T; }\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\n\nconst BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\nexport class BaseAPI {\n    basePath: string;\n    fetch: FetchAPI;\n\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\n        this.basePath = basePath;\n        this.fetch = fetch;\n    }\n};\n\nexport interface ApiResultListAppointment {\n    \"value\"?: Array<Appointment>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListAvailabilityRule {\n    \"value\"?: Array<AvailabilityRule>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListSlotAvailabilityDate {\n    \"value\"?: Array<SlotAvailabilityDate>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface Appointment {\n    \"resourceId\"?: string;\n    \"startTimeRequested\"?: string;\n    \"serviceType\"?: string;\n    \"serviceLength\"?: number;\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"address1\"?: string;\n    \"city\"?: string;\n    \"state\"?: string;\n    \"zip\"?: string;\n    \"height\"?: string;\n    \"weight\"?: string;\n    \"reminder\"?: number;\n    \"doctorName\"?: string;\n    \"doctorPhone\"?: string;\n    \"insuranceCarrier\"?: string;\n    \"insuranceGroupNumber\"?: string;\n    \"insurancePolicyNumber\"?: string;\n    \"insuranceVerified\"?: boolean;\n    \"priorAuthObtained\"?: boolean;\n    \"orderEnteredToRIS\"?: boolean;\n    \"patientWasCalled\"?: boolean;\n    \"confirmed\"?: boolean;\n    \"orderImageUrl\"?: string;\n    \"insuranceFrontUrl\"?: string;\n    \"insuranceBackUrl\"?: string;\n    \"surveyDataJson\"?: string;\n    \"approvedDate\"?: Date;\n    \"submittedDate\"?: Date;\n    \"confirmedDate\"?: Date;\n    \"birthday\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface AvailabilityRule {\n    \"priority\"?: number;\n    \"resourceID\"?: string;\n    \"onThisDay\"?: string;\n    \"startTime\"?: string;\n    \"endTime\"?: string;\n    \"comment\"?: string;\n    \"status\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface CustomerLead {\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"dob\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"serviceType\"?: string;\n    \"timeSlot\"?: string;\n    \"withContrast\"?: boolean;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface Location {\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface SlotAvailabilityDate {\n    \"date\"?: Date;\n    \"friendlyBegin\"?: string;\n    \"times\"?: Array<SlotAvailabilityTime>;\n}\n\nexport interface SlotAvailabilityTime {\n    \"time\"?: string;\n    \"resourceId\"?: string;\n    \"isHidden\"?: boolean;\n    \"isAvailable\"?: boolean;\n    \"isContrastAvailable\"?: boolean;\n    \"isContrastRequired\"?: boolean;\n    \"linkedAppointment\"?: Appointment;\n    \"slotId\"?: string;\n}\n\nexport interface Stack {\n    \"in\"?: string;\n    \"at\"?: string;\n}\n\nexport interface SurveyQuestion {\n    \"questionId\"?: string;\n    \"questionShowIf\"?: string;\n    \"questionShowIfAnswer\"?: string;\n    \"questionText\"?: string;\n    \"questionType\"?: string;\n    \"isRequired\"?: boolean;\n    \"isHidden\"?: boolean;\n    \"order\"?: number;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface TableResult {\n    \"result\"?: any;\n    \"httpStatusCode\"?: number;\n    \"etag\"?: string;\n}\n\nexport interface User {\n    \"apiKey\"?: string;\n    \"immutableId\"?: string;\n    \"referenceRowKey\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\n\n\n/**\n * AuthApi - fetch parameter creator\n */\nexport const AuthApiFetchParamCreator = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/auth`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * AuthApi - functional programming interface\n */\nexport const AuthApiFp = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * AuthApi - object-oriented interface\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * AuthApi - factory interface\n */\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Auth\n         * @param req\n         * @param authToken\n         */\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n            return AuthApiFp.auth(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * LeadGenApi - fetch parameter creator\n */\nexport const LeadGenApiFetchParamCreator = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * LeadGenApi - functional programming interface\n */\nexport const LeadGenApiFp = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * LeadGenApi - object-oriented interface\n */\nexport class LeadGenApi extends BaseAPI {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * LeadGenApi - factory interface\n */\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * PostQuestionApi - fetch parameter creator\n */\nexport const PostQuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * PostQuestionApi - functional programming interface\n */\nexport const PostQuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * PostQuestionApi - object-oriented interface\n */\nexport class PostQuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * PostQuestionApi - factory interface\n */\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         * @param req\n         */\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * QuestionApi - fetch parameter creator\n */\nexport const QuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * QuestionApi - functional programming interface\n */\nexport const QuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * QuestionApi - object-oriented interface\n */\nexport class QuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any) {\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * QuestionApi - factory interface\n */\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         */\n        getQuestions(options?: any) {\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ResourceApi - fetch parameter creator\n */\nexport const ResourceApiFetchParamCreator = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ResourceApi - functional programming interface\n */\nexport const ResourceApiFp = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ResourceApi - object-oriented interface\n */\nexport class ResourceApi extends BaseAPI {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ResourceApi - factory interface\n */\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param authToken\n         */\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ScheduleApi - fetch parameter creator\n */\nexport const ScheduleApiFetchParamCreator = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslots`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"length\": params[\"length\"],\n            \"locationId\": params[\"locationId\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ScheduleApi - functional programming interface\n */\nexport const ScheduleApiFp = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ScheduleApi - object-oriented interface\n */\nexport class ScheduleApi extends BaseAPI {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ScheduleApi - factory interface\n */\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary TimeSlots\n         * @param authToken\n         * @param withContrast\n         * @param length\n         * @param locationId\n         */\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\n        },\n    };\n};\n\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathname(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { navigate } from \"gatsby\"\r\n\r\nexport function getAuthToken(): string {\r\n\tconst token = sessionStorage.getItem('sessionId') || '';\r\n\tif (token.length == 0) {\r\n\t\tloginRedirect();\r\n\t}\r\n\treturn token;\r\n}\r\n\r\nexport function loginRedirect() {\r\n\tsessionStorage.removeItem('sessionId');\r\n\tnavigate('/admin');\r\n}"],"sourceRoot":""}