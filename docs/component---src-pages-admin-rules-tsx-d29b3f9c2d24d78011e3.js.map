{"version":3,"sources":["webpack:///./src/pages/admin/rules.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/api/api.ts","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Page.tsx","webpack:///./src/components/LayoutRoot.tsx","webpack:///./src/components/LayoutMain.tsx","webpack:///./src/forms/index.tsx","webpack:///./src/layouts/admin.tsx","webpack:///./src/helpers/authToken.ts"],"names":["RulesPage","props","context","_this","_React$Component","call","this","state","hideUnavailable","hideAvailable","open","reservedUnconfirmed","confirmed","search","modal","data","startTime","endTime","resourceName","contrastReqStatus","date","err","newItemComment","componentDidMount","_this2","_api_api__WEBPACK_IMPORTED_MODULE_6__","e","availabilityRulesGET","authToken","Object","_helpers_authToken__WEBPACK_IMPORTED_MODULE_9__","a","locationId","withContrast","then","result","value","setState","message","console","log","render","react__WEBPACK_IMPORTED_MODULE_4__","createElement","_layouts_admin__WEBPACK_IMPORTED_MODULE_8__","_components_Page__WEBPACK_IMPORTED_MODULE_7__","renderInner","handleAddRule","_this3","preventDefault","availabilityRulesPOST","req","status","comment","onThisDay","partitionKey","rowKey","priority","resourceID","resp","success","alert","handleDeleteRule","renderTable","_this4","action","onSubmit","className","style","width","cellPadding","whiteSpace","map","rule","key","_forms__WEBPACK_IMPORTED_MODULE_5__","boundChoices","split","boundTextboxValue","type","n","onClick","gatsby__WEBPACK_IMPORTED_MODULE_10__","navigate","t","Component","__webpack_exports__","default","h","160","__webpack_require__","r","d","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","withPrefix","push","replace","navigateTo","_wait_for_route_change__WEBPACK_IMPORTED_MODULE_3__","c","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4___default","_parse_path__WEBPACK_IMPORTED_MODULE_5__","createContext","Consumer","staticQueryData","query","children","Error","propTypes","object","string","isRequired","func","m","module","exports","BASE_PATH","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","parse","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","contentTypeHeader","fetchOptions","method","Content-Type","body","JSON","stringify","headers","url","format","AuthApiFetchParamCreator","response","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","prototype","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","runPOST","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","ScheduleApiFetchParamCreator","length","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerDELETE","appointmentHandlerGET","appointmentHandlerPOST","appointmentHandlerPUT","timeSlotsGET","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","_loader__WEBPACK_IMPORTED_MODULE_3__","ProdPageRenderer","_ref","location","pageResources","getResourcesForPathname","pathname","shape","172","react_emotion__WEBPACK_IMPORTED_MODULE_1__","StyledPage","target","StyledLayoutRoot","moment","formStyle","Row","react__WEBPACK_IMPORTED_MODULE_5__","Col","EditFormBase","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4___default","boundLabel","title","defaultValue","ucshared__WEBPACK_IMPORTED_MODULE_7__","isEmpty","toString","formGroup","sm","sm3","ctrlLabel","sm9","boundTextbox","bindFn","placeHolder","readOnly","isDisabled","wrn","renderWarnings","disabled","maxLength","onChange","placeholder","backgroundColor","bindValFn","inputType","currentTarget","minWidth","choices","cc","choice","i","label","submitRow","actionText","submitButton","boundDate","isStart","start","end","react_datepicker__WEBPACK_IMPORTED_MODULE_6__","selected","selectsEnd","startDate","endDate","dateFormatCalendar","showMonthDropdown","showYearDropdown","val","vlc","toLowerCase","indexOf","boundTextarea","rows","boundTextareaValue","boundCheckbox","defaultChecked","checked","boundCheckboxValue","boundBooleanSwitch","insertBlock","detailBlock","react__WEBPACK_IMPORTED_MODULE_1__","gatsby__WEBPACK_IMPORTED_MODULE_3__","_components_LayoutRoot__WEBPACK_IMPORTED_MODULE_8__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","site","siteMetadata","meta","name","content","description","_components_LayoutMain__WEBPACK_IMPORTED_MODULE_9__","_public_static_d_2945440950_json__WEBPACK_IMPORTED_MODULE_0__","getAuthToken","loginRedirect","gatsby__WEBPACK_IMPORTED_MODULE_0__","token","sessionStorage","getItem","removeItem"],"mappings":"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","file":"component---src-pages-admin-rules-tsx-d29b3f9c2d24d78011e3.js","sourcesContent":["import * as React from 'react'\r\nimport {EditFormBase} from '../../forms';\r\nimport * as Api from '../../api/api';\r\nimport Page from '../../components/Page'\r\nimport AdminLayout from '../../layouts/admin'\r\nimport {getAuthToken} from \"../../helpers/authToken\";\r\nimport {navigate} from \"gatsby\";\r\n\r\ninterface IRuleEditorState {\r\n\thideUnavailable: boolean;\r\n\thideAvailable: boolean;\r\n\topen: boolean;\r\n\treservedUnconfirmed: boolean;\r\n\tconfirmed: boolean;\r\n\tsearch: string;\r\n\tmodal: 'confirm' | 'edit' | 'release' | null;\r\n\tdata: Api.AvailabilityRule[];\r\n\tstartTime: string;\r\n\tendTime: string;\r\n\tresourceName: string;\r\n\tcontrastReqStatus: string;\r\n\terr: string;\r\n\tdate: string;\r\n\tnewItemComment: string;\r\n}\r\n\r\nclass RulesPage extends React.Component<{classes: any}, IRuleEditorState>{\r\n\tconstructor(props, context) {\r\n\t\tsuper(props, context);\r\n\t\tthis.state = {\r\n\t\t\thideUnavailable: false,\r\n\t\t\thideAvailable: false,\r\n\t\t\topen: false,\r\n\t\t\treservedUnconfirmed: false,\r\n\t\t\tconfirmed: false,\r\n\t\t\tsearch: '',\r\n\t\t\tmodal: null,\r\n\t\t\tdata: [],\r\n\t\t\tstartTime: '7:00',\r\n\t\t\tendTime: '19:00',\r\n\t\t\tresourceName: '',\r\n\t\t\tcontrastReqStatus: '',\r\n\t\t\tdate: 'yyyy-mm-dd',\r\n\t\t\terr: '',\r\n\t\t\tnewItemComment: '',\r\n\t\t};\r\n\t}\r\n\r\n\tpublic componentDidMount() {\r\n\t\tnew Api.ResourceApi().availabilityRulesGET({\r\n\t\t\tsearch: '',\r\n\t\t\tauthToken: getAuthToken(),\r\n\t\t\tlocationId: '',\r\n\t\t\twithContrast: false,\r\n\t\t} as any).then((result) => {\r\n\t\t\tif (result.value) {\r\n\t\t\t\tthis.setState({data: result.value || []});\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({err: result.message || 'Error'});\r\n\t\t\t}\r\n\t\t}, (err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\t// TODO: loginRedirect()\r\n\t\t});\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<AdminLayout>\r\n\t\t\t\t<Page>\r\n\t\t\t\t\t{this.renderInner()}\r\n\t\t\t\t</Page>\r\n\t\t\t</AdminLayout>\r\n\t\t);\r\n\t}\r\n\r\n\tpublic handleAddRule(e) {\r\n\t\te.preventDefault();\r\n\t\tnew Api.ResourceApi().availabilityRulesPOST({\r\n\t\t\tauthToken: getAuthToken(),\r\n\t\t\treq: {\r\n\t\t\t\tstatus: this.state.contrastReqStatus,\r\n\t\t\t\tcomment: this.state.newItemComment,\r\n\t\t\t\tstartTime: this.state.startTime,\r\n\t\t\t\tendTime: this.state.endTime,\r\n\t\t\t\tonThisDay: this.state.search === 'Specific Date' ? this.state.date : this.state.search,\r\n\t\t\t\tpartitionKey: 'DefaultLocation',\r\n\t\t\t\trowKey: 'Auto',\r\n\t\t\t\tpriority: 0,\r\n\t\t\t\tresourceID: this.state.resourceName,\r\n\t\t\t},\r\n\t\t}).then((resp) => {\r\n\t\t\tif (resp.success) {\r\n\t\t\t\tthis.setState({data: resp.value || []});\r\n\t\t\t} else {\r\n\t\t\t\talert(resp.message);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic handleDeleteRule(e) {\r\n\t\te.preventDefault();\r\n\t}\r\n\r\n\tpublic renderTable() {\r\n\t\treturn (\r\n\t\t\t<form action=\"#\" onSubmit={(e) => this.handleAddRule(e)}>\r\n\t\t\t\t<table className=\"blue\" style={{width: '500px'}} cellPadding={3}>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>#</th>\r\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>On this day</th>\r\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>Starting at time</th>\r\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>Until time</th>\r\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>ResID</th>\r\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>Comment</th>\r\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>Allow Contrast?</th>\r\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>Actions</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t{(this.state.data || []).map((rule) => (\r\n\t\t\t\t\t\t<tr key={(rule.partitionKey || '') + (rule.rowKey || '')}>\r\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>{rule.priority}</td>\r\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>{rule.onThisDay}</td>\r\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>{rule.startTime}</td>\r\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>{rule.endTime}</td>\r\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>{rule.resourceID}</td>\r\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>{rule.comment}</td>\r\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>{rule.status}</td>\r\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>-</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td>New</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t{EditFormBase.boundChoices(\r\n\t\t\t\t\t\t\t\t'',\r\n\t\t\t\t\t\t\t\t\"Any Weekday,Weekend,Mon,Tue,Wed,Thu,Fri,Sat,Sun,Specific Date\".split(','),\r\n\t\t\t\t\t\t\t\tthis.state.search,\r\n\t\t\t\t\t\t\t\t(search) => this.setState({search}),\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t{this.state.search === 'Specific Date' && (\r\n\t\t\t\t\t\t\t\tEditFormBase.boundTextboxValue(\r\n\t\t\t\t\t\t\t\t\t'',\r\n\t\t\t\t\t\t\t\t\tthis.state.date,\r\n\t\t\t\t\t\t\t\t\t(date) => this.setState({date})\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t{EditFormBase.boundTextboxValue('', this.state.startTime, (startTime) => this.setState({startTime}))}\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t{EditFormBase.boundTextboxValue('', this.state.endTime, (endTime) => this.setState({endTime}))}\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t{EditFormBase.boundTextboxValue('',\r\n\t\t\t\t\t\t\t\tthis.state.resourceName,\r\n\t\t\t\t\t\t\t\t(resourceName) => this.setState({resourceName})\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t{EditFormBase.boundTextboxValue('',\r\n\t\t\t\t\t\t\t\tthis.state.newItemComment,\r\n\t\t\t\t\t\t\t\t(newItemComment) => this.setState({newItemComment})\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t{EditFormBase.boundChoices('',\r\n\t\t\t\t\t\t\t\t['Contrast Unavailable', 'Contrast Available', 'Contrast Required', 'Blocked'],\r\n\t\t\t\t\t\t\t\tthis.state.contrastReqStatus,\r\n\t\t\t\t\t\t\t\t(contrastReqStatus) => this.setState({contrastReqStatus})\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t<button className=\"w-button\" type=\"submit\">Add</button>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n\r\n\tpublic renderInner() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h2>Time Rules For This Location</h2>\r\n\t\t\t\t{this.renderTable()}\r\n\r\n\t\t\t\t<button className=\"w-button\" onClick={() => navigate('/admin/site')}>\r\n\t\t\t\t\tGo back to site\r\n\t\t\t\t</button>\r\n\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default RulesPage;\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport { waitForRouteChange } from \"./wait-for-route-change\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  waitForRouteChange,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","/**\r\n * ideal MRI\r\n * Signup Center API\r\n *\r\n * OpenAPI spec version: v1\r\n * Contact: ben@herila.net\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport * as querystring from \"querystring\";\r\nimport * as url from \"url\";\r\n\r\nimport * as isomorphicFetch from \"isomorphic-fetch\";\r\nimport * as assign from \"core-js/library/fn/object/assign\";\r\n\r\ninterface Dictionary<T> { [index: string]: T; }\r\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\r\n\r\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\r\n\r\nexport interface FetchArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\nexport class BaseAPI {\r\n    basePath: string;\r\n    fetch: FetchAPI;\r\n\r\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\r\n        this.basePath = basePath;\r\n        this.fetch = fetch;\r\n    }\r\n};\r\n\r\nexport interface ApiResultListAppointment {\r\n    \"value\"?: Array<Appointment>;\r\n    \"success\"?: boolean;\r\n    \"message\"?: string;\r\n    \"stackTrace\"?: Array<Stack>;\r\n}\r\n\r\nexport interface ApiResultListAvailabilityRule {\r\n    \"value\"?: Array<AvailabilityRule>;\r\n    \"success\"?: boolean;\r\n    \"message\"?: string;\r\n    \"stackTrace\"?: Array<Stack>;\r\n}\r\n\r\nexport interface ApiResultListSlotAvailabilityDate {\r\n    \"value\"?: Array<SlotAvailabilityDate>;\r\n    \"success\"?: boolean;\r\n    \"message\"?: string;\r\n    \"stackTrace\"?: Array<Stack>;\r\n}\r\n\r\nexport interface Appointment {\r\n    \"resourceId\"?: string;\r\n    \"serviceType\"?: string;\r\n    \"serviceLength\"?: number;\r\n    \"firstName\"?: string;\r\n    \"lastName\"?: string;\r\n    \"phone\"?: string;\r\n    \"email\"?: string;\r\n    \"address1\"?: string;\r\n    \"city\"?: string;\r\n    \"state\"?: string;\r\n    \"zip\"?: string;\r\n    \"height\"?: string;\r\n    \"weight\"?: string;\r\n    \"reminder\"?: number;\r\n    \"doctorName\"?: string;\r\n    \"doctorPhone\"?: string;\r\n    \"insuranceCarrier\"?: string;\r\n    \"insuranceGroupNumber\"?: string;\r\n    \"insurancePolicyNumber\"?: string;\r\n    \"insuranceVerified\"?: boolean;\r\n    \"priorAuthObtained\"?: boolean;\r\n    \"orderEnteredToRIS\"?: boolean;\r\n    \"patientWasCalled\"?: boolean;\r\n    \"confirmed\"?: boolean;\r\n    \"orderImageUrl\"?: string;\r\n    \"insuranceFrontUrl\"?: string;\r\n    \"insuranceBackUrl\"?: string;\r\n    \"surveyDataJson\"?: string;\r\n    \"approvedDate\"?: Date;\r\n    \"submittedDate\"?: Date;\r\n    \"confirmedDate\"?: Date;\r\n    \"birthday\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface AvailabilityRule {\r\n    \"priority\"?: number;\r\n    \"resourceID\"?: string;\r\n    \"onThisDay\"?: string;\r\n    \"startTime\"?: string;\r\n    \"endTime\"?: string;\r\n    \"comment\"?: string;\r\n    \"status\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface CustomerLead {\r\n    \"firstName\"?: string;\r\n    \"lastName\"?: string;\r\n    \"dob\"?: string;\r\n    \"phone\"?: string;\r\n    \"email\"?: string;\r\n    \"serviceType\"?: string;\r\n    \"timeSlot\"?: string;\r\n    \"withContrast\"?: boolean;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface Location {\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface SlotAvailabilityDate {\r\n    \"date\"?: Date;\r\n    \"friendlyBegin\"?: string;\r\n    \"times\"?: Array<SlotAvailabilityTime>;\r\n}\r\n\r\nexport interface SlotAvailabilityTime {\r\n    \"time\"?: string;\r\n    \"resourceId\"?: string;\r\n    \"isHidden\"?: boolean;\r\n    \"isAvailable\"?: boolean;\r\n    \"isContrastAvailable\"?: boolean;\r\n    \"isContrastRequired\"?: boolean;\r\n    \"linkedAppointment\"?: Appointment;\r\n    \"slotId\"?: string;\r\n}\r\n\r\nexport interface Stack {\r\n    \"in\"?: string;\r\n    \"at\"?: string;\r\n}\r\n\r\nexport interface SurveyQuestion {\r\n    \"questionId\"?: string;\r\n    \"questionShowIf\"?: string;\r\n    \"questionShowIfAnswer\"?: string;\r\n    \"questionText\"?: string;\r\n    \"questionType\"?: string;\r\n    \"isRequired\"?: boolean;\r\n    \"isHidden\"?: boolean;\r\n    \"order\"?: number;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface TableResult {\r\n    \"result\"?: any;\r\n    \"httpStatusCode\"?: number;\r\n    \"etag\"?: string;\r\n}\r\n\r\nexport interface User {\r\n    \"apiKey\"?: string;\r\n    \"immutableId\"?: string;\r\n    \"referenceRowKey\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\n\r\n\r\n/**\r\n * AuthApi - fetch parameter creator\r\n */\r\nexport const AuthApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/auth`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * AuthApi - functional programming interface\r\n */\r\nexport const AuthApiFp = {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\r\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * AuthApi - object-oriented interface\r\n */\r\nexport class AuthApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\r\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * AuthApi - factory interface\r\n */\r\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Auth\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\r\n            return AuthApiFp.auth(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * LeadGenApi - fetch parameter creator\r\n */\r\nexport const LeadGenApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/leadGen`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/leadGen`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LeadGenApi - functional programming interface\r\n */\r\nexport const LeadGenApiFp = {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\r\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\r\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LeadGenApi - object-oriented interface\r\n */\r\nexport class LeadGenApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * LeadGenApi - factory interface\r\n */\r\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Run\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Run\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * PostQuestionApi - fetch parameter creator\r\n */\r\nexport const PostQuestionApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/question`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * PostQuestionApi - functional programming interface\r\n */\r\nexport const PostQuestionApiFp = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\r\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * PostQuestionApi - object-oriented interface\r\n */\r\nexport class PostQuestionApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\r\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * PostQuestionApi - factory interface\r\n */\r\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary GetQuestions\r\n         * @param req\r\n         */\r\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\r\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * QuestionApi - fetch parameter creator\r\n */\r\nexport const QuestionApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any): FetchArgs {\r\n        const baseUrl = `/api/question`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * QuestionApi - functional programming interface\r\n */\r\nexport const QuestionApiFp = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\r\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * QuestionApi - object-oriented interface\r\n */\r\nexport class QuestionApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any) {\r\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * QuestionApi - factory interface\r\n */\r\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary GetQuestions\r\n         */\r\n        getQuestions(options?: any) {\r\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * ResourceApi - fetch parameter creator\r\n */\r\nexport const ResourceApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param authToken\r\n     */\r\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/locations`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"locationId\": params[\"locationId\"],\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/locations`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"locationId\": params[\"locationId\"],\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ResourceApi - functional programming interface\r\n */\r\nexport const ResourceApiFp = {\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param authToken\r\n     */\r\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ResourceApi - object-oriented interface\r\n */\r\nexport class ResourceApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param authToken\r\n     */\r\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * ResourceApi - factory interface\r\n */\r\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param authToken\r\n         */\r\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Locations\r\n         * @param locationId\r\n         * @param authToken\r\n         */\r\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Locations\r\n         * @param locationId\r\n         * @param authToken\r\n         */\r\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * ScheduleApi - fetch parameter creator\r\n */\r\nexport const ScheduleApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param length\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslots`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"length\": params[\"length\"],\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ScheduleApi - functional programming interface\r\n */\r\nexport const ScheduleApiFp = {\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param length\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ScheduleApi - object-oriented interface\r\n */\r\nexport class ScheduleApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param length\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * ScheduleApi - factory interface\r\n */\r\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param req\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param req\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param req\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary TimeSlots\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param length\r\n         * @param locationId\r\n         */\r\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathname(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import * as React from 'react'\r\nimport styled from 'react-emotion'\r\n\r\nimport { dimensions } from '../styles/variables'\r\n\r\nconst StyledPage = styled.div`\r\n  display: block;\r\n  flex: 1;\r\n  position: relative;\r\n`\r\n\r\ninterface PageProps {\r\n  className?: string\r\n}\r\n\r\nconst Page: React.SFC<PageProps> = ({ children, className }) => <StyledPage className={className}>{children}</StyledPage>\r\n\r\nexport default Page\r\n","import * as React from 'react'\r\nimport styled from 'react-emotion'\r\n\r\nconst StyledLayoutRoot = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh;\r\n`\r\n\r\ninterface LayoutRootProps {\r\n  className?: string\r\n}\r\n\r\nconst LayoutRoot: React.SFC<LayoutRootProps> = ({ children, className }) => (\r\n  <StyledLayoutRoot className={className}>{children}</StyledLayoutRoot>\r\n)\r\n\r\nexport default LayoutRoot\r\n","import * as React from 'react'\r\n// import styled from 'react-emotion'\r\n// const StyledLayoutMain = styled.main`\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   flex: 1;\r\n//\r\n\r\ninterface LayoutMainProps {\r\n  className?: string\r\n}\r\n\r\n// <StyledLayoutMain className={className}>{children}</StyledLayoutMain>\r\nconst LayoutMain: React.SFC<LayoutMainProps> = ({ children, className }) => (\r\n  <main className={className || \"white-section\"}>\r\n      <div className=\"vspace80 w-container\">\r\n          {children}\r\n      </div>\r\n  </main>\r\n);\r\n\r\nexport default LayoutMain\r\n","import * as React from 'react';\nimport DatePicker from 'react-datepicker';\nimport {isEmpty} from 'ucshared';\n\nconst moment = require('moment');\nconst formStyle = require('./formStyle.css');\n\nexport function formatAdminDate(date: any) {\n\treturn moment(date).format('MM/DD/YYYY');\n}\n\nconst Row = (props: any) => <div>{props.children}</div>;\nconst Col = (props: any) => <div>{props.children}</div>;\n\nexport class EditFormBase<TProps, TState> extends React.Component<TProps, TState> {\n\tpublic static formGroup = 'form-group';\n\tpublic static ctrlLabel = 'control-label';\n\tpublic static sm3 = '3';\n\tpublic static sm9 = '9';\n\tpublic static insertBlock = formStyle.insertBlock;\n\tpublic static detailBlock = formStyle.detailBlock;\n\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t}\n\n\tpublic static boundLabel(title: string, defaultValue: string | number | Date) {\n\t\tif (isEmpty(title)) {\n\t\t\treturn <span>{(defaultValue || 'null').toString()}</span>;\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{(defaultValue || 'null').toString()}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextbox(title: string, defaultValue: string | number | Date, bindFn: React.FormEventHandler<HTMLInputElement>, placeHolder?: string, readOnly?: boolean, isDisabled?: boolean) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextboxValue(title: string|null, defaultValue: string | number | Date, bindValFn: (value: string) => any, placeHolder?: string, readOnly?: boolean, isDisabled?: boolean, inputType?: string) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype={inputType || 'text'}\n\t\t\t\t\t\tonChange={(e) => bindValFn(e.currentTarget.value)}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {minWidth: '40px'} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.boundTextboxValue(null, defaultValue, bindValFn, placeHolder, readOnly, isDisabled, inputType)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundChoices(title: string|null, choices: Array<{label?: string, value: string}|string>, defaultValue: string | number | Date, bindValFn: (value: string) => any, placeHolder?: string, isDisabled?: boolean) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\tconst cc = choices.map((choice) => (typeof choice === 'string') ? {value: choice} : choice);\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<select\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tonChange={(e) => bindValFn(e.currentTarget.value)}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\tstyle={!wrn ? {minWidth: '40px'} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"\">(none)</option>\n\t\t\t\t\t\t{cc.map((choice, i) => <option key={choice.value + i} value={choice.value}>{choice.label || choice.value}</option>)}\n\t\t\t\t\t</select>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.boundChoices(null, choices, defaultValue, bindValFn, placeHolder, isDisabled)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\n\tpublic static submitRow(actionText?: string) {\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}/>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.submitButton(actionText)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static submitButton(actionText?: string) {\n\t\treturn (\n\t\t\t<button type=\"submit\">{actionText || 'Submit'}</button>\n\t\t);\n\t}\n\n\tpublic static boundDate(title: string, bindFn: React.FormEventHandler<HTMLInputElement>, isStart: boolean, start?: Date, end?: Date, isDisabled?: boolean) {\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t<DatePicker\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tclassName={'form-control'}\n\t\t\t\t\t\tselected={isStart ? moment(start) : moment(end)}\n\t\t\t\t\t\tselectsEnd\n\t\t\t\t\t\tstartDate={start && moment(start)}\n\t\t\t\t\t\tendDate={end && moment(end)}\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tdateFormatCalendar={'MMM YYYY'}\n\t\t\t\t\t\tshowMonthDropdown\n\t\t\t\t\t\tshowYearDropdown\n\t\t\t\t\t/>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tprotected static renderWarnings(val: string|number|Date) {\n\t\tif (typeof val !== 'string') {\n\t\t\treturn this.renderWarnings(val.toString());\n\t\t}\n\t\tif (val) {\n\t\t\tconst vlc = val.toLowerCase();\n\t\t\tif (vlc.indexOf('included') > -1) {\n\t\t\t\treturn <div className=\"alert alert-error\"><b>Warning:</b> Consider removing term <em>included</em></div>;\n\t\t\t}\n\t\t\tif (vlc.indexOf('refund') > -1) {\n\t\t\t\treturn <div className=\"alert alert-error\"><b>Warning:</b> We don't offer refunds.</div>;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static boundTextarea(title: string, defaultValue: string | number, bindFn: React.FormEventHandler<HTMLTextAreaElement>) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<textarea className=\"form-control\" onChange={bindFn} value={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\t  style={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t\t  rows={5}/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextareaValue(title: string, defaultValue: string | number, bindFn: (value) => any) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<textarea className=\"form-control\"\n\t\t\t\t\t\t  onChange={(e) => bindFn(e.currentTarget.value)}\n\t\t\t\t\t\t  value={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\t  style={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t\t  rows={5}/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundCheckbox(title: string, defaultChecked: boolean, bindFn: React.FormEventHandler<HTMLInputElement>, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={bindFn}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n\n\tpublic static boundCheckboxValue(title: string, defaultChecked: boolean, bindFn: (isChecked: boolean) => any, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={(e) => bindFn(e.currentTarget.checked)}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n\n\tpublic static boundBooleanSwitch(title: string, defaultChecked: boolean, bindFn: (isChecked: boolean) => any, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={(e) => bindFn(e.currentTarget.checked)}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n}\n","import * as React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport {StaticQuery, graphql} from 'gatsby'\r\n\r\n// import 'modern-normalize'\r\n// import '../styles/normalize'\r\nimport '../styles/webflow.css'\r\nimport '../styles/webflow.grid.css'\r\nimport '../styles/animate.css'\r\nimport '../styles/tables.css'\r\n\r\nimport LayoutRoot from '../components/LayoutRoot'\r\nimport LayoutMain from '../components/LayoutMain'\r\n\r\ntype StaticQueryProps = {\r\n\tsite: {\r\n\t\tsiteMetadata: {\r\n\t\t\ttitle: string\r\n\t\t\tdescription: string\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst AdminLayout: React.SFC = ({children}) => (\r\n\t<StaticQuery\r\n\t\tquery={graphql`\r\n      query AdminLayoutQuery {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n          }\r\n        }\r\n      }\r\n    `}\r\n\t\trender={(data: StaticQueryProps) => (\r\n\t\t\t<LayoutRoot>\r\n\t\t\t\t<Helmet\r\n\t\t\t\t\ttitle={data.site.siteMetadata.title}\r\n\t\t\t\t\tmeta={[\r\n\t\t\t\t\t\t{name: 'description', content: data.site.siteMetadata.description},\r\n\t\t\t\t\t\t{name: 'keywords', content: 'gatsbyjs, gatsby, javascript, sample, something'}\r\n\t\t\t\t\t]}\r\n\t\t\t\t/>\r\n\t\t\t\t<LayoutMain>{children}</LayoutMain>\r\n\t\t\t</LayoutRoot>\r\n\t\t)}\r\n\t/>\r\n)\r\n\r\nexport default AdminLayout\r\n","import { navigate } from \"gatsby\"\r\n\r\nexport function getAuthToken(): string {\r\n\tconst token = sessionStorage.getItem('sessionId') || '';\r\n\tif (token.length == 0) {\r\n\t\tloginRedirect();\r\n\t}\r\n\treturn token;\r\n}\r\n\r\nexport function loginRedirect() {\r\n\tsessionStorage.removeItem('sessionId');\r\n\tnavigate('/admin');\r\n}"],"sourceRoot":""}