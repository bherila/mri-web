{"version":3,"sources":["webpack:///./src/pages/pick-time.tsx","webpack:///./src/models/SafetyState.ts","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./src/api/api.ts","webpack:///./src/components/breadcrumb.tsx","webpack:///./src/helpers/FormBasePage.tsx","webpack:///./src/components/pick-time-component.tsx"],"names":["PickTimePage","props","context","_this","_React$Component","call","this","state","qna","_models_SafetyState__WEBPACK_IMPORTED_MODULE_5__","a","loadState","componentDidMount","sessionStorage","scan","location","href","setState","render","_this2","react__WEBPACK_IMPORTED_MODULE_1__","createElement","_layouts__WEBPACK_IMPORTED_MODULE_2__","id","className","_components_breadcrumb__WEBPACK_IMPORTED_MODULE_3__","num","b","value","fname","time","_components_pick_time_component__WEBPACK_IMPORTED_MODULE_8__","onPick","timeSlot","pickTime","isAvailable","setItem","JSON","stringify","_api_api__WEBPACK_IMPORTED_MODULE_6__","f","appointmentHandlerDELETE","authToken","req","_helpers_FormBasePage__WEBPACK_IMPORTED_MODULE_7__","getAppointment","Object","gatsby__WEBPACK_IMPORTED_MODULE_4__","navigate","e","Component","__webpack_exports__","default","m","161","t","n","d","r","SafetyState","lname","email","phone","answers","implants","currentImplant","haveOrder","overrideSafetyWarning","height","weight","doctorName","doctorContact","insFront","insBack","mriOrder","carrierNumber","groupNumber","policyNumber","err","dob","address1","address2","city","zip","optedIn","validationResult","parse","getItem","jsonState","o","assign","165","dP","__webpack_require__","FProto","Function","prototype","nameRE","configurable","get","match","166","u","y","E","D","$","i","s","BASE_PATH","replace","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","query","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","contentTypeHeader","fetchOptions","method","Content-Type","body","headers","url","format","AuthApiFetchParamCreator","then","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","runPOST","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","locationId","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesGET","availabilityRulesPOST","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","withContrast","search","ScheduleApiFetchParamCreator","length","skip","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerGET","appointmentHandlerPOST","appointmentHandlerPUT","timeSlotsGET","Chevron","react__WEBPACK_IMPORTED_MODULE_2__","src","width","alt","translucent","Ez123","OrderBreadcrumb","gatsby__WEBPACK_IMPORTED_MODULE_3__","Link","to","style","display","MriTypeBreadcrumb","_ref","name","contrast","TimeslotBreadcrumb","slot","slotId","reserved","168","FormBasePage","_models_SafetyState__WEBPACK_IMPORTED_MODULE_3__","setAppointment","appt","_proto","getAns","q","console","log","ans","val","saveState","223","l","c","TimePickWidget","offset","total","_models_SafetyState__WEBPACK_IMPORTED_MODULE_4__","times","showModal","_api_api__WEBPACK_IMPORTED_MODULE_3__","result","message","renderSlotAvailabilityDate","dt","needConfirm","_this3","whiteSpace","friendlyBegin","map","key","onClick","renderModal","_this4","react_modal__WEBPACK_IMPORTED_MODULE_5___default","isOpen","overlayClassName","type","selectedTime","_this5","_this$state","Fragment","date"],"mappings":"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","file":"component---src-pages-pick-time-tsx-4f22cc635cb29553d61c.js","sourcesContent":["import * as React from 'react'\nimport * as Api from '../api/api'\nimport IndexLayout from '../layouts'\nimport {Ez123, MriTypeBreadcrumb} from \"../components/breadcrumb\";\nimport {navigate} from \"gatsby\";\nimport {SafetyState} from \"../models/SafetyState\";\nimport {ScheduleApi} from \"../api/api\";\nimport {FormBasePage} from \"../helpers/FormBasePage\";\nimport {TimePickWidget} from \"../components/pick-time-component\";\n\ninterface IState\n{\n\tqna: SafetyState;\n}\n\nclass PickTimePage extends React.Component<{}, IState> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\tqna: SafetyState.loadState(),\n\t\t};\n\t}\n\n\tpublic componentDidMount() {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst scan = this.state.qna.scan;\n\t\t\tif (!scan) {\n\t\t\t\tlocation.href = '/?err=no-scan';\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tqna: SafetyState.loadState(),\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<IndexLayout>\n\t\t\t<section id=\"Q2\" className=\"vspace80 w-container\">\n\t\t\t\t<div>\n\t\t\t\t\t<Ez123 num={2} />\n\t\t\t\t\t<div className=\"breadcrumb-stack animated zoomIn\">\n\t\t\t\t\t\t<MriTypeBreadcrumb value={this.state.qna.scan}/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"w-row\">\n\t\t\t\t\t<div className=\"centered w-col w-col-3 w-hidden-tiny\" />\n\t\t\t\t\t<div className=\"centered w-col w-col-6\">\n\t\t\t\t\t\t<h3>Almost done, {this.state.qna.fname}!</h3>\n\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\tChoose an available time slot to book\n\t\t\t\t\t\t\tyour {this.state.qna.scan && this.state.qna.scan.time} appointment.\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tIf you're interested in a same day appointment, please call us at\n\t\t\t\t\t\t\t<a href=\"tel:+18334332567\">1 833-IDEAL-MR</a>.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{this.state.qna.scan && (\n\t\t\t\t\t<TimePickWidget\n\t\t\t\t\t\tonPick={(timeSlot) => this.pickTime(timeSlot)}\n\t\t\t\t\t\tscan={this.state.qna.scan}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</section>\n\t\t\t</IndexLayout>\n\t\t);\n\t}\n\n\tprivate pickTime(timeSlot: Api.SlotAvailabilityTime) {\n\t\tif (timeSlot.isAvailable) {\n\t\t\tsessionStorage.setItem('timeSlot', JSON.stringify(timeSlot));\n\n\t\t\t// attempt to release the time slot\n\t\t\tnew ScheduleApi().appointmentHandlerDELETE({\n\t\t\t\tauthToken: '',\n\t\t\t\treq: FormBasePage.getAppointment()\n\t\t\t});\n\t\t\tnavigate('/addl-info');\n\t\t}\n\t}\n}\n\nexport default PickTimePage;\n","import {SlotAvailabilityTime} from \"../api/api\";\nimport {IScan} from \"./Scan\";\n\nexport class SafetyState {\n\tconstructor() {\n\t\tthis.fname = '';\n\t\tthis.lname = '';\n\t\tthis.answers = {};\n\t\tthis.implants = [];\n\t\tthis.currentImplant = '';\n\t\tthis.scan = null;\n\t\tthis.haveOrder = false;\n\t\tthis.overrideSafetyWarning = false;\n\t\tthis.email = '';\n\t\tthis.phone = '';\n\t\tthis.height = '';\n\t\tthis.weight = '';\n\t\tthis.doctorName = '';\n\t\tthis.doctorContact = '';\n\t\tthis.insFront = '';\n\t\tthis.insBack = '';\n\t\tthis.mriOrder = '';\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tthis.timeSlot = JSON.parse(sessionStorage.getItem('timeSlot') || '{}');\n\t\t} else {\n\t\t\tthis.timeSlot = null;\n\t\t}\n\t\tthis.err = '';\n\t\tthis.dob = '';\n\t\tthis.carrierNumber = '';\n\t\tthis.groupNumber = '';\n\t\tthis.policyNumber = '';\n\t\tthis.address1 = '';\n\t\tthis.address2 = '';\n\t\tthis.city = '';\n\t\tthis.state = '';\n\t\tthis.zip = '';\n\t\tthis.optedIn = true;\n\t\tthis.validationResult = [];\n\t}\n\n\tpublic fname: string;\n\tpublic lname: string;\n\tpublic email: string;\n\tpublic phone: string;\n\tpublic answers: any;\n\tpublic implants: string[];\n\tpublic currentImplant: string;\n\tpublic haveOrder: boolean;\n\tpublic scan: IScan | null;\n\tpublic overrideSafetyWarning: boolean;\n\tpublic height: string;\n\tpublic weight: string;\n\tpublic doctorName: string;\n\tpublic doctorContact: string;\n\tpublic insFront: string;\n\tpublic insBack: string;\n\tpublic mriOrder: string;\n\tpublic carrierNumber: string;\n\tpublic groupNumber: string;\n\tpublic policyNumber: string;\n\tpublic timeSlot: SlotAvailabilityTime | null;\n\tpublic err: string;\n\tpublic dob: string;\n\tpublic address1: string;\n\tpublic address2: string;\n\tpublic city: string;\n\tpublic state: string;\n\tpublic zip: string;\n\tpublic optedIn: boolean;\n\tpublic validationResult: string[];\n\n\tpublic static loadState(): SafetyState {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst jsonState = JSON.parse(sessionStorage.getItem('wizard') || '{}');\n\t\t\tconst o = {\n\t\t\t\t// fname: sessionStorage.getItem('fname') || '',\n\t\t\t\t// lname: sessionStorage.getItem('lname') || '',\n\t\t\t\t// email: sessionStorage.getItem('email') || '',\n\t\t\t\t// phone: sessionStorage.getItem('phone') || '',\n\t\t\t\t// height: sessionStorage.getItem('height') || '',\n\t\t\t\t// weight: sessionStorage.getItem('weight') || '',\n\t\t\t\t// doctorName: sessionStorage.getItem('doctorName') || '',\n\t\t\t\t// insFront: sessionStorage.getItem('insFront') || '',\n\t\t\t\t// insBack: sessionStorage.getItem('insBack') || '',\n\t\t\t\t// mriOrder: sessionStorage.getItem('mriOrder') || '',\n\t\t\t\tscan: JSON.parse(sessionStorage.getItem('scan') || '{}'),\n\t\t\t\thaveOrder: sessionStorage.getItem('haveOrder') === 'true',\n\t\t\t};\n\t\t\treturn Object.assign(new SafetyState(), jsonState, o);\n\t\t}\n\t\treturn new SafetyState();\n\t}\n}\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","/**\n * ideal MRI\n * Signup Center API\n *\n * OpenAPI spec version: v1\n * Contact: ben@herila.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as querystring from \"querystring\";\nimport * as url from \"url\";\n\nimport * as isomorphicFetch from \"isomorphic-fetch\";\nimport * as assign from \"core-js/library/fn/object/assign\";\n\ninterface Dictionary<T> { [index: string]: T; }\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\n\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\nexport class BaseAPI {\n    basePath: string;\n    fetch: FetchAPI;\n\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\n        this.basePath = basePath;\n        this.fetch = fetch;\n    }\n};\n\nexport interface ApiResultListAppointment {\n    \"value\"?: Array<Appointment>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListAvailabilityRule {\n    \"value\"?: Array<AvailabilityRule>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListSlotAvailabilityDate {\n    \"value\"?: Array<SlotAvailabilityDate>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface Appointment {\n    \"resourceId\"?: string;\n    \"serviceType\"?: string;\n    \"serviceLength\"?: number;\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"address1\"?: string;\n    \"address2\"?: string;\n    \"city\"?: string;\n    \"state\"?: string;\n    \"zip\"?: string;\n    \"height\"?: string;\n    \"weight\"?: string;\n    \"reminder\"?: number;\n    \"doctorName\"?: string;\n    \"doctorPhone\"?: string;\n    \"insuranceCarrier\"?: string;\n    \"insuranceGroupNumber\"?: string;\n    \"insurancePolicyNumber\"?: string;\n    \"insuranceVerified\"?: boolean;\n    \"priorAuthObtained\"?: boolean;\n    \"orderEnteredToRIS\"?: boolean;\n    \"patientWasCalled\"?: boolean;\n    \"confirmed\"?: boolean;\n    \"orderImageUrl\"?: string;\n    \"insuranceFrontUrl\"?: string;\n    \"insuranceBackUrl\"?: string;\n    \"surveyDataJson\"?: string;\n    \"safetyWarnings\"?: string;\n    \"approvedDate\"?: Date;\n    \"submittedDate\"?: Date;\n    \"confirmedDate\"?: Date;\n    \"birthday\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface AvailabilityRule {\n    \"priority\"?: number;\n    \"resourceID\"?: string;\n    \"onThisDay\"?: string;\n    \"startTime\"?: string;\n    \"endTime\"?: string;\n    \"comment\"?: string;\n    \"status\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface CustomerLead {\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"dob\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"serviceType\"?: string;\n    \"timeSlot\"?: string;\n    \"withContrast\"?: boolean;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface Location {\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface SlotAvailabilityDate {\n    \"date\"?: Date;\n    \"friendlyBegin\"?: string;\n    \"times\"?: Array<SlotAvailabilityTime>;\n}\n\nexport interface SlotAvailabilityTime {\n    \"time\"?: string;\n    \"resourceId\"?: string;\n    \"isHidden\"?: boolean;\n    \"isAvailable\"?: boolean;\n    \"isContrastAvailable\"?: boolean;\n    \"isContrastRequired\"?: boolean;\n    \"linkedAppointment\"?: Appointment;\n    \"slotId\"?: string;\n}\n\nexport interface Stack {\n    \"in\"?: string;\n    \"at\"?: string;\n}\n\nexport interface SurveyQuestion {\n    \"questionId\"?: string;\n    \"questionShowIf\"?: string;\n    \"questionShowIfAnswer\"?: string;\n    \"questionText\"?: string;\n    \"questionType\"?: string;\n    \"isRequired\"?: boolean;\n    \"isHidden\"?: boolean;\n    \"order\"?: number;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface TableResult {\n    \"result\"?: any;\n    \"httpStatusCode\"?: number;\n    \"etag\"?: string;\n}\n\nexport interface User {\n    \"apiKey\"?: string;\n    \"immutableId\"?: string;\n    \"referenceRowKey\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\n\n\n/**\n * AuthApi - fetch parameter creator\n */\nexport const AuthApiFetchParamCreator = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/auth`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * AuthApi - functional programming interface\n */\nexport const AuthApiFp = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * AuthApi - object-oriented interface\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * AuthApi - factory interface\n */\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Auth\n         * @param req\n         * @param authToken\n         */\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n            return AuthApiFp.auth(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * LeadGenApi - fetch parameter creator\n */\nexport const LeadGenApiFetchParamCreator = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * LeadGenApi - functional programming interface\n */\nexport const LeadGenApiFp = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * LeadGenApi - object-oriented interface\n */\nexport class LeadGenApi extends BaseAPI {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * LeadGenApi - factory interface\n */\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * PostQuestionApi - fetch parameter creator\n */\nexport const PostQuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * PostQuestionApi - functional programming interface\n */\nexport const PostQuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * PostQuestionApi - object-oriented interface\n */\nexport class PostQuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * PostQuestionApi - factory interface\n */\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         * @param req\n         */\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * QuestionApi - fetch parameter creator\n */\nexport const QuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * QuestionApi - functional programming interface\n */\nexport const QuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * QuestionApi - object-oriented interface\n */\nexport class QuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any) {\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * QuestionApi - factory interface\n */\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         */\n        getQuestions(options?: any) {\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ResourceApi - fetch parameter creator\n */\nexport const ResourceApiFetchParamCreator = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ResourceApi - functional programming interface\n */\nexport const ResourceApiFp = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ResourceApi - object-oriented interface\n */\nexport class ResourceApi extends BaseAPI {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ResourceApi - factory interface\n */\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param authToken\n         */\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ScheduleApi - fetch parameter creator\n */\nexport const ScheduleApiFetchParamCreator = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslots`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"length\": params[\"length\"],\n            \"locationId\": params[\"locationId\"],\n            \"skip\": params[\"skip\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ScheduleApi - functional programming interface\n */\nexport const ScheduleApiFp = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ScheduleApi - object-oriented interface\n */\nexport class ScheduleApi extends BaseAPI {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any) {\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ScheduleApi - factory interface\n */\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary TimeSlots\n         * @param authToken\n         * @param withContrast\n         * @param length\n         * @param locationId\n         */\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\n        },\n    };\n};\n\n","import * as React from 'react';\nimport {Link} from 'gatsby';\nimport {SlotAvailabilityTime} from \"../api/api\";\n\nconst Chevron = (props: {translucent?: boolean}) => (\n\t<img\n\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5be12c8e888fb5963088dc64_chevron-right-blue-2.svg\"\n\t\twidth=\"38\" height=\"38\" alt=\"Chevron right\" className={props.translucent ? 'translucent' : ''}/>\n);\n\nexport const Ez123 = (props: {num: number}) => (\n\t<div>\n\t\t<div className=\"breadcrumb-row\">\n\t\t\t<div className={'circled ' + (props.num < 1 ? 'translucent' : '') }>1</div>\n\t\t\t<Chevron translucent={props.num < 2} />\n\t\t\t<div className={'circled ' + (props.num < 2 ? 'translucent' : '') }>2</div>\n\t\t\t<Chevron translucent={props.num < 3} />\n\t\t\t<div className={'circled ' + (props.num < 3 ? 'translucent' : '') }>3</div>\n\t\t</div>\n\t\t<div className=\"breadcrumb-row\">\n\t\t\t{props.num === 1 && <h3><strong>Step 1.</strong> Your details</h3>}\n\t\t\t{props.num === 2 && <h3><strong>Step 2.</strong> Choose your scan</h3>}\n\t\t\t{props.num === 3 && <h3><strong>Step 3.</strong> Health &amp; Safety Information</h3>}\n\t\t</div>\n\t</div>\n);\n\nexport const OrderBreadcrumb = (props: {value: boolean}) => (\n    <Link to=\"/have-order\"\n       className=\"breadcrumb w-button\" style={{display: 'none'}}>\n\t\t{props.value ? 'Have Doctor\\'s Order' : 'No Order'} ✓\n\t</Link>\n);\n\nexport const MriTypeBreadcrumb = ({value}) => {\n\tif (!value) {\n\t\treturn (\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\t\tClick here to select MRI type\n\t\t\t</Link>\n\t\t);\n\t}\n\tif (typeof value === 'string') {\n\t\treturn (\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\t\tScan type: {value} &times;\n\t\t\t</Link>\n\t\t);\n\t}\n\treturn (\n\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\tScan type: {value.name || 'e!name'} {value.contrast || 'e!contrast'} &times;\n\t\t</Link>\n\t)\n};\n\nexport const TimeslotBreadcrumb = (props: {slot: SlotAvailabilityTime | null, reserved?: boolean}) => (\n\t!!props.slot ? (\n\t\t<Link to=\"/pick-time\" className=\"breadcrumb w-button\">\n\t\t\t{(props.slot.slotId || 'no time selected').replace(/(\\d{4})-(\\d{2})-(\\d{2})T([^\\s]{5}).*/g, \"$2/$3/$1 at $4\")} &times;<br /><small>({props.reserved ? 'reserved' : 'not yet reserved'})</small>\n\t\t</Link>\n\t) : <div />\n);\n","import * as React from 'react';\nimport {SafetyState} from \"../models/SafetyState\";\nimport {Appointment} from \"../api/api\";\n\nexport abstract class FormBasePage extends React.Component<{}, SafetyState> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = SafetyState.loadState();\n\t}\n\n\tpublic static setAppointment(appt: Appointment | null) {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tsessionStorage.setItem('appointmentEntity', JSON.stringify(appt || null));\n\t\t}\n\t}\n\n\tpublic static getAppointment(): Appointment {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst json = sessionStorage.getItem('appointmentEntity') || '{}';\n\t\t\treturn JSON.parse(json);\n\t\t}\n\t\treturn {};\n\t}\n\n\tpublic getAns(q) {\n\t\treturn this.state.answers[q];\n\t}\n\n\tpublic componentDidMount() {\n\t\tconst state = SafetyState.loadState();\n\t\tthis.setState(state);\n\t\tconsole.log('Loaded SafetyState', state);\n\t}\n\n\tpublic ans(q, val) {\n\t\tconst answers = Object.assign(new SafetyState(), this.state.answers);\n\t\tanswers[q] = val;\n\t\tconsole.log(q, val, answers);\n\t\tthis.setState({answers}, () => this.saveState());\n\t}\n\n\tpublic saveState() {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tsessionStorage.setItem('wizard', JSON.stringify({\n\t\t\t\tanswers: this.state.answers,\n\t\t\t\timplants: this.state.implants,\n\t\t\t\tcurrentImplant: this.state.currentImplant,\n\t\t\t\tfname: this.state.fname,\n\t\t\t\tlname: this.state.lname,\n\t\t\t\temail: this.state.email,\n\t\t\t\tphone: this.state.phone,\n\t\t\t\theight: this.state.height,\n\t\t\t\tweight: this.state.weight,\n\t\t\t\tdoctorName: this.state.doctorName,\n\t\t\t\tdoctorContact: this.state.doctorContact,\n\t\t\t\tinsFront: this.state.insFront,\n\t\t\t\tinsBack: this.state.insBack,\n\t\t\t\tmriOrder: this.state.mriOrder,\n\t\t\t\tscan: this.state.scan || null,\n\t\t\t\thaveOrder: this.state.haveOrder,\n\t\t\t\tdob: this.state.dob,\n\t\t\t}));\n\t\t}\n\t}\n\n\tabstract render();\n}","import * as React from 'react'\nimport * as Api from '../api/api'\nimport IndexLayout from '../layouts'\nimport {Ez123, MriTypeBreadcrumb} from \"../components/breadcrumb\";\nimport {navigate} from \"gatsby\";\nimport {SafetyState} from \"../models/SafetyState\";\nimport ReactModal from 'react-modal';\nimport {IScan} from \"../models/Scan\";\n\nconst take = 4;\n\ninterface TimePickState {\n\terr: any,\n\toffset: number;\n\ttotal: number;\n\tqna: SafetyState;\n\ttimes: Api.SlotAvailabilityDate[];\n\tshowModal: boolean;\n}\n\nexport class TimePickWidget extends React.Component<{scan: IScan, onPick: (time: Api.SlotAvailabilityTime) => any}, TimePickState> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\terr: '',\n\t\t\toffset: 0,\n\t\t\ttotal: 14,\n\t\t\tqna: SafetyState.loadState(),\n\t\t\ttimes: [],\n\t\t\tshowModal: false,\n\t\t};\n\t}\n\n\tpublic componentDidMount() {\n\t\tnew Api.ScheduleApi().timeSlotsGET({\n\t\t\twithContrast: this.props.scan.contrast === 'with and without contrast',\n\t\t\tlocationId: ''\n\t\t}).then((result) => {\n\t\t\tif (result.value) {\n\t\t\t\tthis.setState({\n\t\t\t\t\ttimes: result.value || [],\n\t\t\t\t\ttotal: result.value.length || 0,\n\t\t\t\t\tqna: SafetyState.loadState(),\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({\n\t\t\t\t\terr: result.message || 'Error',\n\t\t\t\t\tqna: SafetyState.loadState(),\n\t\t\t\t});\n\t\t\t}\n\t\t}, (err) => this.setState({\n\t\t\terr,\n\t\t\tqna: SafetyState.loadState(),\n\t\t}));\n\t}\n\n\tpublic renderSlotAvailabilityDate(dt: Api.SlotAvailabilityDate, needConfirm: boolean) {\n\t\treturn (\n\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t<h3 style={{whiteSpace: 'nowrap'}}>{dt.friendlyBegin}</h3>\n\t\t\t\t{dt.times ? dt.times.map((timeSlot) => (\n\t\t\t\t\t<a key={timeSlot.time}\n\t\t\t\t\t   href=\"#\"\n\t\t\t\t\t   className={`buttontimeslot ${timeSlot.isAvailable ? '' : 'unavailable '}w-button`}\n\t\t\t\t\t   onClick={() => this.pickTime(timeSlot, needConfirm)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{timeSlot.time}\n\t\t\t\t\t</a>\n\t\t\t\t)) : <div>dt.times is {typeof dt.times}</div>}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tpublic renderModal() {\n\t\treturn (\n\t\t\t<ReactModal\n\t\t\t\tisOpen={this.state.showModal}\n\t\t\t\tclassName=\"modal-content animated fadeInUp\"\n\t\t\t\toverlayClassName=\"modal-wrapper\"\n\t\t\t>\n\t\t\t\t<p><b>The time you selected is tomorrow.</b></p>\n\t\t\t\t<p>We won't have time to obtain prior authorization from your insurance carrier. If you aren't using insurance, this won't be a problem.</p>\n\t\t\t\t<p>Are you sure you want to select this time?</p>\n\t\t\t\t<p>\n\t\t\t\t\t<button type=\"button\"\n\t\t\t\t\t\t\tclassName=\"button w-button\"\n\t\t\t\t\t\t\tonClick={() => this.props.onPick(this.state.selectedTime)}>\n\t\t\t\t\t\tYes, continue\n\t\t\t\t\t</button>\n\t\t\t\t\t<button type=\"button\"\n\t\t\t\t\t\t\tclassName=\"button w-button\"\n\t\t\t\t\t\t\tonClick={() => this.setState({showModal: false})}>\n\t\t\t\t\t\tNo, change time\n\t\t\t\t\t</button>\n\t\t\t\t</p>\n\t\t\t</ReactModal>\n\t\t);\n\t}\n\n\tpublic render() {\n\t\tconst {offset, total, err, times} = this.state;\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<div className=\"w-row\">\n\t\t\t\t\t<div className=\"w-col w-col-2\">\n\t\t\t\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t\t\t\t{offset > 0 && (\n\t\t\t\t\t\t\t\t<a href=\"#\"\n\t\t\t\t\t\t\t\t   onClick={() => this.setState({offset: offset - 1})}\n\t\t\t\t\t\t\t\t   className=\"buttontimeslot w-button\">\n\t\t\t\t\t\t\t\t\t&laquo; Earlier Dates\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{times && times.map((date, i) => (\n\t\t\t\t\t\t(i >= offset && (i - offset) < take) && (\n\t\t\t\t\t\t\t<div key={JSON.stringify(date || i)} className=\"w-col w-col-2\">\n\t\t\t\t\t\t\t\t{this.renderSlotAvailabilityDate(date, i < 1)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t))}\n\t\t\t\t\t{offset + take < total && (\n\t\t\t\t\t\t<div className=\"w-col w-col-2\">\n\t\t\t\t\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t\t\t\t\t<a href=\"#\"\n\t\t\t\t\t\t\t\t   onClick={() => this.setState({offset: offset + 1})}\n\t\t\t\t\t\t\t\t   className=\"buttontimeslot w-button\">\n\t\t\t\t\t\t\t\t\tLater Dates &gt;&gt;\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t{this.renderModal()}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n\n\tprivate pickTime(timeSlot: Api.SlotAvailabilityTime, needConfirm: boolean) {\n\t\tif (timeSlot.isAvailable) {\n\t\t\tif (needConfirm) {\n\t\t\t\tthis.setState({showModal: true});\n\t\t\t} else {\n\t\t\t\tthis.props.onPick(timeSlot);\n\t\t\t}\n\t\t}\n\t}\n}"],"sourceRoot":""}