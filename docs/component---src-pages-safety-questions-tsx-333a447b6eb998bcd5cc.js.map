{"version":3,"sources":["webpack:///./src/pages/safety-questions.tsx","webpack:///./src/models/SafetyState.ts","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./src/api/api.ts","webpack:///./src/components/breadcrumb.tsx","webpack:///./src/helpers/FormBasePage.tsx","webpack:///./src/components/BigBtn.tsx","webpack:///./src/helpers/copyAppointment.ts","webpack:///./src/components/Questions.tsx"],"names":["qs","id","q","r","m","qEye","qPost","SafetyQuestions","props","context","_FormBasePage","call","this","componentDidMount","prototype","addImplant","implants","state","slice","push","currentImplant","setState","removeImplant","console","log","n","validate","qArray","problems","i","length","ans","answers","isValid","isComplete","getAns","renderQuestionSet","_this","map","item","react__WEBPACK_IMPORTED_MODULE_3__","createElement","_components_Questions__WEBPACK_IMPORTED_MODULE_6__","b","key","val","onChange","text","validateAll","validationResult","renderValidationError","_this2","react_modal__WEBPACK_IMPORTED_MODULE_8___default","a","isOpen","overrideSafetyWarning","className","overlayClassName","li","type","onClick","doSubmit","render","_layouts__WEBPACK_IMPORTED_MODULE_4__","_components_breadcrumb__WEBPACK_IMPORTED_MODULE_7__","num","c","value","haveOrder","scan","d","slot","timeSlot","reserved","renderInner","_this3","Fragment","style","paddingTop","htmlFor","_components_BigBtn__WEBPACK_IMPORTED_MODULE_5__","img","wide","opacity","href","_api_api__WEBPACK_IMPORTED_MODULE_11__","f","appointmentHandlerPUT","req","Object","assign","_helpers_copyAppointment__WEBPACK_IMPORTED_MODULE_12__","surveyDataJson","JSON","stringify","then","gatsby__WEBPACK_IMPORTED_MODULE_10__","navigate","err","alert","_helpers_FormBasePage__WEBPACK_IMPORTED_MODULE_9__","__webpack_exports__","default","g","161","t","e","SafetyState","fname","lname","email","phone","height","weight","doctorName","doctorContact","insFront","insBack","mriOrder","carrierNumber","groupNumber","policyNumber","dob","address1","address2","city","zip","optedIn","sessionStorage","parse","getItem","loadState","jsonState","o","162","dP","__webpack_require__","FProto","Function","nameRE","configurable","get","match","164","u","y","E","D","K","s","BASE_PATH","replace","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","query","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","authToken","contentTypeHeader","fetchOptions","method","Content-Type","body","headers","url","format","AuthApiFetchParamCreator","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","runPOST","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","locationId","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesGET","availabilityRulesPOST","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","withContrast","search","ScheduleApiFetchParamCreator","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerDELETE","appointmentHandlerGET","appointmentHandlerPOST","timeSlotsGET","Chevron","react__WEBPACK_IMPORTED_MODULE_2__","src","width","alt","translucent","Ez123","OrderBreadcrumb","gatsby__WEBPACK_IMPORTED_MODULE_3__","Link","to","display","MriTypeBreadcrumb","_ref","name","contrast","TimeslotBreadcrumb","slotId","168","FormBasePage","_React$Component","_models_SafetyState__WEBPACK_IMPORTED_MODULE_3__","setAppointment","appt","setItem","getAppointment","_proto","saveState","Component","183","BigButton","BigButtonJs","react__WEBPACK_IMPORTED_MODULE_0__","gatsby__WEBPACK_IMPORTED_MODULE_1__","marginRight","_ref2","partitionKey","rowKey","resourceId","serviceType","serviceLength","firstName","lastName","reminder","doctorPhone","insuranceCarrier","insuranceGroupNumber","insurancePolicyNumber","insuranceVerified","priorAuthObtained","orderEnteredToRIS","patientWasCalled","confirmed","orderImageUrl","insuranceFrontUrl","insuranceBackUrl","approvedDate","submittedDate","confirmedDate","birthday","timestamp","eTag","223","YesNoQuestion","TextQuestion","children","maxLength","currentTarget","data-name"],"mappings":"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","file":"component---src-pages-safety-questions-tsx-333a447b6eb998bcd5cc.js","sourcesContent":["import * as React from 'react'\n\nimport IndexLayout from '../layouts'\nimport {BigButton, BigButtonJs} from \"../components/BigBtn\";\nimport {TextQuestion, YesNoQuestion} from \"../components/Questions\";\nimport {Ez123, MriTypeBreadcrumb, OrderBreadcrumb, TimeslotBreadcrumb} from \"../components/breadcrumb\";\nimport ReactModal from 'react-modal';\nimport {FormBasePage} from \"../helpers/FormBasePage\";\nimport {navigate} from 'gatsby';\nimport {ScheduleApi} from \"../api/api\";\nimport copyAppointment from \"../helpers/copyAppointment\";\n\nconst qs = [\n\t{id: 'pacemaker', q: 'a cardiac pacemaker?', r: false, m: 'You have a cardiac pacemaker.'},\n\t{id: 'defibrillatorImplant', q: 'implanted defibrillator (also called ICD or AICD)?', r: false},\n\t{id: 'spinalStimulator', q: 'a spinal stimulator?', r: false},\n\t{id: 'loopRecorder', q: 'a loop recorder?', r: false},\n\t{id: 'neurostimulator', q: 'a brain neurostimulator?', r: false},\n];\n\nconst qEye = [\n\t{id: 'e1', q: 'Was it completely removed?', r: true },\n\t{id: 'e2', q: 'Have you had an xray of your eyes showing no metal?', r: true },\n\t{id: 'e3', q: 'Have you had an MRI since the injury?', r: true },\n];\n\nconst qPost = [\n\t{id: 'p1', q: 'Are you claustrophobic?', r: false, m: 'We recommend having your doctor prescribe a medicine for anxiety. We recommend 1mg of Xanax.'},\n\t{id: 'p2', q: 'Do you have any kidney disease?', r: false},\n\t{id: 'p3', q: 'Do you have diabetes?', r: false},\n];\n\n\nclass SafetyQuestions extends FormBasePage {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t}\n\tpublic componentDidMount() {\n\t\tsuper.componentDidMount();\n\t}\n\n\tpublic addImplant() {\n\t\tconst implants = this.state.implants.slice(0);\n\t\timplants.push(this.state.currentImplant);\n\t\tthis.setState({implants});\n\t}\n\n\tpublic removeImplant() {\n\t\tconsole.log('TODO');\n\t}\n\n\tpublic validate(qArray) {\n\t\tconst problems: string[] = [];\n\t\tfor (let i = 0; i < qArray.length; i = i + 1) {\n\t\t\tconst ans = this.state.answers[qArray[i].q];\n\t\t\tif (typeof ans === 'undefined') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (ans !== qArray[i].r) {\n\t\t\t\tproblems.push(qArray[i].q);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tproblems,\n\t\t\tisValid: problems.length === 0,\n\t\t};\n\t}\n\n\tpublic isComplete(qArray) {\n\t\tfor (let i = 0; i < qArray.length; i = i + 1) {\n\t\t\tconst ans = this.state.answers[qArray[i].q];\n\t\t\tif (typeof ans === 'undefined') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (typeof this.getAns('MetalInEye') === 'undefined') return false;\n\t\tif (typeof this.getAns('AllergicToContrast') === 'undefined') return false;\n\t\tif (typeof this.getAns('implants') === 'undefined') return false;\n\t\treturn true;\n\t}\n\n\tpublic renderQuestionSet(qArray) {\n\t\treturn qArray.map((item) => {\n\t\t\tif (typeof item.q === 'string') {\n\t\t\t\treturn (\n\t\t\t\t\t<YesNoQuestion\n\t\t\t\t\t\tkey={item.q}\n\t\t\t\t\t\tid={item.id}\n\t\t\t\t\t\tval={this.getAns(item.q)}\n\t\t\t\t\t\tonChange={(val) => this.ans(item.q, val)}\n\t\t\t\t\t\ttext={item.q}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic validateAll() {\n\t\tconst v1 = this.validate(qs);\n\t\t// const v2 = this.validate(qEye); // Carl says not to validate the eye items\n\t\tconst validationResult = v1.problems;\n\t\tthis.setState({validationResult});\n\t\treturn validationResult;\n\t}\n\n\tpublic renderValidationError() {\n\t\tconst val = this.state.validationResult || [];\n\t\treturn (\n\t\t\t<ReactModal isOpen={val.length > 0 && !this.state.overrideSafetyWarning}\n\t\t\t\tclassName=\"modal-content animated fadeInUp\"\n\t\t\t\toverlayClassName=\"modal-wrapper\">\n\t\t\t\t<p>Due to your medical history, we are unable to safely perform an MRI. If you feel that you are still a candidate for an MRI, you may submit the form anyway and we will contact you for further information.</p>\n\t\t\t\t<ul>{val.map((li) => (<li>{li}</li>))}</ul>\n\t\t\t\t<p>\n\t\t\t\t\t<button type=\"button\"\n\t\t\t\t\t\t\tclassName=\"button w-button\"\n\t\t\t\t\t\t\tonClick={() => this.setState({overrideSafetyWarning: true}, () => this.doSubmit())}>\n\t\t\t\t\t\tContinue Anyway\n\t\t\t\t\t</button>\n\t\t\t\t\t<button type=\"button\"\n\t\t\t\t\t\t\tclassName=\"button w-button\"\n\t\t\t\t\t\t\tonClick={() => this.setState({overrideSafetyWarning: false, validationResult: []})}>\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</button>\n\t\t\t\t</p>\n\t\t\t</ReactModal>\n\t\t);\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<IndexLayout>\n\t\t\t\t<section id=\"Q2\" className=\"vspace80 w-container\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Ez123 num={3} />\n\t\t\t\t\t\t<div className=\"breadcrumb-stack\">\n\t\t\t\t\t\t\t<OrderBreadcrumb value={this.state.haveOrder}/>\n\t\t\t\t\t\t\t<MriTypeBreadcrumb value={this.state.scan}/>\n\t\t\t\t\t\t\t<TimeslotBreadcrumb slot={this.state.timeSlot} reserved={true} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"w-col w-col-3\"/>\n\t\t\t\t\t<div className=\"w-col w-col-6\">\n\t\t\t\t\t\t{this.renderInner()}\n\t\t\t\t\t\t{this.renderValidationError()}\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</IndexLayout>\n\t\t);\n\t}\n\n\tpublic renderInner() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<h3>We need to ask some safety questions before we can finish scheduling you.</h3>\n\n\t\t\t\t<div className=\"inputrow\" style={{paddingTop: '1em'}}>\n\t\t\t\t\t<label htmlFor=\"DoctorName\" className=\"flexlabel\">\n\t\t\t\t\t\tDo you have...\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\n\t\t\t\t{this.renderQuestionSet(qs)}\n\n\t\t\t\t<YesNoQuestion\n\t\t\t\t\tid=\"implants\"\n\t\t\t\t\ttext=\"any other implants?\"\n\t\t\t\t\tonChange={(val) => this.ans('implants', val)}\n\t\t\t\t\tval={this.getAns('implants')}\n\t\t\t\t>\n\t\t\t\t\t<TextQuestion\n\t\t\t\t\t\tid=\"implants\"\n\t\t\t\t\t\tval={this.state.currentImplant}\n\t\t\t\t\t\tonChange={(currentImplant) => this.setState({currentImplant})}\n\t\t\t\t\t\ttext=\"Tell us as much as you can about them.\"\n\t\t\t\t\t/>\n\t\t\t\t</YesNoQuestion>\n\n\t\t\t\t<div style={{paddingTop: '1em'}}>\n\n\t\t\t\t\t<YesNoQuestion\n\t\t\t\t\t\tid=\"eye\"\n\t\t\t\t\t\ttext=\"Have you ever had injury to your eye with metal, or metal in your eye?\"\n\t\t\t\t\t\tonChange={(val) => this.ans('MetalInEye', val)}\n\t\t\t\t\t\tval={this.getAns('MetalInEye')}\n\t\t\t\t\t>\n\n\t\t\t\t\t\t{this.renderQuestionSet(qEye)}\n\n\t\t\t\t\t\t<TextQuestion\n\t\t\t\t\t\t\tid=\"eyeDetails\"\n\t\t\t\t\t\t\tval={this.state.currentImplant}\n\t\t\t\t\t\t\tonChange={(currentImplant) => this.setState({currentImplant})}\n\t\t\t\t\t\t\ttext=\"Additional details\"\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t</YesNoQuestion>\n\n\t\t\t\t\t{this.renderQuestionSet(qPost)}\n\n\t\t\t\t\t<YesNoQuestion\n\t\t\t\t\t\ttext=\"Are you allergic to IV contrast or MRI contrast?\"\n\t\t\t\t\t\tval={this.getAns('AllergicToContrast')}\n\t\t\t\t\t\tonChange={(val) => this.ans('AllergicToContrast', val)}\n\t\t\t\t\t\tid=\"contrastAllergy\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"alert\">\n\t\t\t\t\t\t\tIf your MRI requires contrast, you will need to be premedicated with steriods.\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</YesNoQuestion>\n\n\t\t\t\t</div>\n\n\t\t\t\t{this.isComplete(qs) ? (\n\t\t\t\t\t<div className=\"cta-subitem distributed\">\n\t\t\t\t\t\t<BigButtonJs\n\t\t\t\t\t\t\tonClick={() => this.doSubmit()}\n\t\t\t\t\t\t\timg=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f3661e73d2f76eedd_Meet%20Our%20Team.svg\"\n\t\t\t\t\t\t\ttext=\"Continue\"\n\t\t\t\t\t\t\twide\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"cta-subitem distributed\" style={{opacity: 0.5}}>\n\t\t\t\t\t\t<BigButton\n\t\t\t\t\t\t\thref=\"/safety-questions\"\n\t\t\t\t\t\t\timg=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f3661e73d2f76eedd_Meet%20Our%20Team.svg\"\n\t\t\t\t\t\t\ttext=\"All questions are required\"\n\t\t\t\t\t\t\twide\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n\n\tprivate doSubmit() {\n\t\tconst val = this.validateAll();\n\t\tif (this.state.overrideSafetyWarning || val.length === 0) {\n\t\t\tif (this.isComplete(qs)) {\n\t\t\t\tnew ScheduleApi().appointmentHandlerPUT({\n\t\t\t\t\treq: Object.assign(copyAppointment(this.state), {\n\t\t\t\t\t\tsurveyDataJson: JSON.stringify(this.state.answers)\n\t\t\t\t\t}),\n\t\t\t\t}).then(() => {\n\t\t\t\t\tnavigate('/questions-2');\n\t\t\t\t}, (err) => alert(err));\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default SafetyQuestions;","import {SlotAvailabilityTime} from \"../api/api\";\nimport {IScan} from \"./Scan\";\n\nexport class SafetyState {\n\tconstructor() {\n\t\tthis.fname = '';\n\t\tthis.lname = '';\n\t\tthis.answers = {};\n\t\tthis.implants = [];\n\t\tthis.currentImplant = '';\n\t\tthis.scan = null;\n\t\tthis.haveOrder = false;\n\t\tthis.overrideSafetyWarning = false;\n\t\tthis.email = '';\n\t\tthis.phone = '';\n\t\tthis.height = '';\n\t\tthis.weight = '';\n\t\tthis.doctorName = '';\n\t\tthis.doctorContact = '';\n\t\tthis.insFront = '';\n\t\tthis.insBack = '';\n\t\tthis.mriOrder = '';\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tthis.timeSlot = JSON.parse(sessionStorage.getItem('timeSlot') || '{}');\n\t\t} else {\n\t\t\tthis.timeSlot = null;\n\t\t}\n\t\tthis.err = '';\n\t\tthis.dob = '';\n\t\tthis.carrierNumber = '';\n\t\tthis.groupNumber = '';\n\t\tthis.policyNumber = '';\n\t\tthis.address1 = '';\n\t\tthis.address2 = '';\n\t\tthis.city = '';\n\t\tthis.state = '';\n\t\tthis.zip = '';\n\t\tthis.optedIn = true;\n\t\tthis.validationResult = [];\n\t}\n\n\tpublic fname: string;\n\tpublic lname: string;\n\tpublic email: string;\n\tpublic phone: string;\n\tpublic answers: any;\n\tpublic implants: string[];\n\tpublic currentImplant: string;\n\tpublic haveOrder: boolean;\n\tpublic scan: IScan | null;\n\tpublic overrideSafetyWarning: boolean;\n\tpublic height: string;\n\tpublic weight: string;\n\tpublic doctorName: string;\n\tpublic doctorContact: string;\n\tpublic insFront: string;\n\tpublic insBack: string;\n\tpublic mriOrder: string;\n\tpublic carrierNumber: string;\n\tpublic groupNumber: string;\n\tpublic policyNumber: string;\n\tpublic timeSlot: SlotAvailabilityTime | null;\n\tpublic err: string;\n\tpublic dob: string;\n\tpublic address1: string;\n\tpublic address2: string;\n\tpublic city: string;\n\tpublic state: string;\n\tpublic zip: string;\n\tpublic optedIn: boolean;\n\tpublic validationResult: string[];\n\n\tpublic static loadState(): SafetyState {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst jsonState = JSON.parse(sessionStorage.getItem('wizard') || '{}');\n\t\t\tconst o = {\n\t\t\t\t// fname: sessionStorage.getItem('fname') || '',\n\t\t\t\t// lname: sessionStorage.getItem('lname') || '',\n\t\t\t\t// email: sessionStorage.getItem('email') || '',\n\t\t\t\t// phone: sessionStorage.getItem('phone') || '',\n\t\t\t\t// height: sessionStorage.getItem('height') || '',\n\t\t\t\t// weight: sessionStorage.getItem('weight') || '',\n\t\t\t\t// doctorName: sessionStorage.getItem('doctorName') || '',\n\t\t\t\t// insFront: sessionStorage.getItem('insFront') || '',\n\t\t\t\t// insBack: sessionStorage.getItem('insBack') || '',\n\t\t\t\t// mriOrder: sessionStorage.getItem('mriOrder') || '',\n\t\t\t\tscan: JSON.parse(sessionStorage.getItem('scan') || '{}'),\n\t\t\t\thaveOrder: sessionStorage.getItem('haveOrder') === 'true',\n\t\t\t};\n\t\t\treturn Object.assign(new SafetyState(), jsonState, o);\n\t\t}\n\t\treturn new SafetyState();\n\t}\n}\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","/**\n * ideal MRI\n * Signup Center API\n *\n * OpenAPI spec version: v1\n * Contact: ben@herila.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as querystring from \"querystring\";\nimport * as url from \"url\";\n\nimport * as isomorphicFetch from \"isomorphic-fetch\";\nimport * as assign from \"core-js/library/fn/object/assign\";\n\ninterface Dictionary<T> { [index: string]: T; }\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\n\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\nexport class BaseAPI {\n    basePath: string;\n    fetch: FetchAPI;\n\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\n        this.basePath = basePath;\n        this.fetch = fetch;\n    }\n};\n\nexport interface ApiResultListAppointment {\n    \"value\"?: Array<Appointment>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListAvailabilityRule {\n    \"value\"?: Array<AvailabilityRule>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListSlotAvailabilityDate {\n    \"value\"?: Array<SlotAvailabilityDate>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface Appointment {\n    \"resourceId\"?: string;\n    \"serviceType\"?: string;\n    \"serviceLength\"?: number;\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"address1\"?: string;\n    \"address2\"?: string;\n    \"city\"?: string;\n    \"state\"?: string;\n    \"zip\"?: string;\n    \"height\"?: string;\n    \"weight\"?: string;\n    \"reminder\"?: number;\n    \"doctorName\"?: string;\n    \"doctorPhone\"?: string;\n    \"insuranceCarrier\"?: string;\n    \"insuranceGroupNumber\"?: string;\n    \"insurancePolicyNumber\"?: string;\n    \"insuranceVerified\"?: boolean;\n    \"priorAuthObtained\"?: boolean;\n    \"orderEnteredToRIS\"?: boolean;\n    \"patientWasCalled\"?: boolean;\n    \"confirmed\"?: boolean;\n    \"orderImageUrl\"?: string;\n    \"insuranceFrontUrl\"?: string;\n    \"insuranceBackUrl\"?: string;\n    \"surveyDataJson\"?: string;\n    \"approvedDate\"?: Date;\n    \"submittedDate\"?: Date;\n    \"confirmedDate\"?: Date;\n    \"birthday\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface AvailabilityRule {\n    \"priority\"?: number;\n    \"resourceID\"?: string;\n    \"onThisDay\"?: string;\n    \"startTime\"?: string;\n    \"endTime\"?: string;\n    \"comment\"?: string;\n    \"status\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface CustomerLead {\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"dob\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"serviceType\"?: string;\n    \"timeSlot\"?: string;\n    \"withContrast\"?: boolean;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface Location {\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface SlotAvailabilityDate {\n    \"date\"?: Date;\n    \"friendlyBegin\"?: string;\n    \"times\"?: Array<SlotAvailabilityTime>;\n}\n\nexport interface SlotAvailabilityTime {\n    \"time\"?: string;\n    \"resourceId\"?: string;\n    \"isHidden\"?: boolean;\n    \"isAvailable\"?: boolean;\n    \"isContrastAvailable\"?: boolean;\n    \"isContrastRequired\"?: boolean;\n    \"linkedAppointment\"?: Appointment;\n    \"slotId\"?: string;\n}\n\nexport interface Stack {\n    \"in\"?: string;\n    \"at\"?: string;\n}\n\nexport interface SurveyQuestion {\n    \"questionId\"?: string;\n    \"questionShowIf\"?: string;\n    \"questionShowIfAnswer\"?: string;\n    \"questionText\"?: string;\n    \"questionType\"?: string;\n    \"isRequired\"?: boolean;\n    \"isHidden\"?: boolean;\n    \"order\"?: number;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface TableResult {\n    \"result\"?: any;\n    \"httpStatusCode\"?: number;\n    \"etag\"?: string;\n}\n\nexport interface User {\n    \"apiKey\"?: string;\n    \"immutableId\"?: string;\n    \"referenceRowKey\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\n\n\n/**\n * AuthApi - fetch parameter creator\n */\nexport const AuthApiFetchParamCreator = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/auth`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * AuthApi - functional programming interface\n */\nexport const AuthApiFp = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * AuthApi - object-oriented interface\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * AuthApi - factory interface\n */\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Auth\n         * @param req\n         * @param authToken\n         */\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n            return AuthApiFp.auth(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * LeadGenApi - fetch parameter creator\n */\nexport const LeadGenApiFetchParamCreator = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * LeadGenApi - functional programming interface\n */\nexport const LeadGenApiFp = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * LeadGenApi - object-oriented interface\n */\nexport class LeadGenApi extends BaseAPI {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * LeadGenApi - factory interface\n */\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * PostQuestionApi - fetch parameter creator\n */\nexport const PostQuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * PostQuestionApi - functional programming interface\n */\nexport const PostQuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * PostQuestionApi - object-oriented interface\n */\nexport class PostQuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * PostQuestionApi - factory interface\n */\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         * @param req\n         */\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * QuestionApi - fetch parameter creator\n */\nexport const QuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * QuestionApi - functional programming interface\n */\nexport const QuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * QuestionApi - object-oriented interface\n */\nexport class QuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any) {\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * QuestionApi - factory interface\n */\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         */\n        getQuestions(options?: any) {\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ResourceApi - fetch parameter creator\n */\nexport const ResourceApiFetchParamCreator = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ResourceApi - functional programming interface\n */\nexport const ResourceApiFp = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ResourceApi - object-oriented interface\n */\nexport class ResourceApi extends BaseAPI {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ResourceApi - factory interface\n */\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param authToken\n         */\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ScheduleApi - fetch parameter creator\n */\nexport const ScheduleApiFetchParamCreator = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslots`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"length\": params[\"length\"],\n            \"locationId\": params[\"locationId\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ScheduleApi - functional programming interface\n */\nexport const ScheduleApiFp = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ScheduleApi - object-oriented interface\n */\nexport class ScheduleApi extends BaseAPI {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ScheduleApi - factory interface\n */\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary TimeSlots\n         * @param authToken\n         * @param withContrast\n         * @param length\n         * @param locationId\n         */\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\n        },\n    };\n};\n\n","import * as React from 'react';\nimport {Link} from 'gatsby';\nimport {SlotAvailabilityTime} from \"../api/api\";\n\nconst Chevron = (props: {translucent?: boolean}) => (\n\t<img\n\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5be12c8e888fb5963088dc64_chevron-right-blue-2.svg\"\n\t\twidth=\"38\" height=\"38\" alt=\"Chevron right\" className={props.translucent ? 'translucent' : ''}/>\n);\n\nexport const Ez123 = (props: {num: number}) => (\n\t<div>\n\t\t<div className=\"breadcrumb-row\">\n\t\t\t<div className={'circled ' + (props.num < 1 ? 'translucent' : '') }>1</div>\n\t\t\t<Chevron translucent={props.num < 2} />\n\t\t\t<div className={'circled ' + (props.num < 2 ? 'translucent' : '') }>2</div>\n\t\t\t<Chevron translucent={props.num < 3} />\n\t\t\t<div className={'circled ' + (props.num < 3 ? 'translucent' : '') }>3</div>\n\t\t</div>\n\t\t<div className=\"breadcrumb-row\">\n\t\t\t{props.num === 1 && <h3><strong>Step 1.</strong> Your details</h3>}\n\t\t\t{props.num === 2 && <h3><strong>Step 2.</strong> Choose your scan</h3>}\n\t\t\t{props.num === 3 && <h3><strong>Step 3.</strong> Health &amp; Safety Information</h3>}\n\t\t</div>\n\t</div>\n);\n\nexport const OrderBreadcrumb = (props: {value: boolean}) => (\n    <Link to=\"/have-order\"\n       className=\"breadcrumb w-button\" style={{display: 'none'}}>\n\t\t{props.value ? 'Have Doctor\\'s Order' : 'No Order'} ✓\n\t</Link>\n);\n\nexport const MriTypeBreadcrumb = ({value}) => {\n\tif (!value) {\n\t\treturn (\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\t\tClick here to select MRI type\n\t\t\t</Link>\n\t\t);\n\t}\n\tif (typeof value === 'string') {\n\t\treturn (\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\t\tScan type: {value} &times;\n\t\t\t</Link>\n\t\t);\n\t}\n\treturn (\n\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\tScan type: {value.name || 'e!name'} {value.contrast || 'e!contrast'} &times;\n\t\t</Link>\n\t)\n};\n\nexport const TimeslotBreadcrumb = (props: {slot: SlotAvailabilityTime | null, reserved?: boolean}) => (\n\t!!props.slot ? (\n\t\t<Link to=\"/pick-time\" className=\"breadcrumb w-button\">\n\t\t\t{(props.slot.slotId || 'no time selected').replace(/(\\d{4})-(\\d{2})-(\\d{2})T([^\\s]{5}).*/g, \"$2/$3/$1 at $4\")} &times;<br /><small>({props.reserved ? 'reserved' : 'not yet reserved'})</small>\n\t\t</Link>\n\t) : <div />\n);\n","import * as React from 'react';\nimport {SafetyState} from \"../models/SafetyState\";\nimport {Appointment} from \"../api/api\";\n\nexport abstract class FormBasePage extends React.Component<{}, SafetyState> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = SafetyState.loadState();\n\t}\n\n\tpublic static setAppointment(appt: Appointment | null) {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tsessionStorage.setItem('appointmentEntity', JSON.stringify(appt || null));\n\t\t}\n\t}\n\n\tpublic static getAppointment(): Appointment {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst json = sessionStorage.getItem('appointmentEntity') || '{}';\n\t\t\treturn JSON.parse(json);\n\t\t}\n\t\treturn {};\n\t}\n\n\tpublic getAns(q) {\n\t\treturn this.state.answers[q];\n\t}\n\n\tpublic componentDidMount() {\n\t\tconst state = SafetyState.loadState();\n\t\tthis.setState(state);\n\t}\n\n\tpublic ans(q, val) {\n\t\tconst answers = Object.assign(new SafetyState(), this.state.answers);\n\t\tanswers[q] = val;\n\t\tconsole.log(q, val, answers);\n\t\tthis.setState({answers}, () => this.saveState());\n\t}\n\n\tpublic saveState() {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tsessionStorage.setItem('wizard', JSON.stringify({\n\t\t\t\tanswers: this.state.answers,\n\t\t\t\timplants: this.state.implants,\n\t\t\t\tcurrentImplant: this.state.currentImplant,\n\t\t\t\tfname: this.state.fname,\n\t\t\t\tlname: this.state.lname,\n\t\t\t\temail: this.state.email,\n\t\t\t\tphone: this.state.phone,\n\t\t\t\theight: this.state.height,\n\t\t\t\tweight: this.state.weight,\n\t\t\t\tdoctorName: this.state.doctorName,\n\t\t\t\tdoctorContact: this.state.doctorContact,\n\t\t\t\tinsFront: this.state.insFront,\n\t\t\t\tinsBack: this.state.insBack,\n\t\t\t\tmriOrder: this.state.mriOrder,\n\t\t\t\tscan: this.state.scan || null,\n\t\t\t\thaveOrder: this.state.haveOrder,\n\t\t\t\tdob: this.state.dob,\n\t\t\t}));\n\t\t}\n\t}\n\n\tabstract render();\n}","import * as React from \"react\";\nimport {Link} from \"gatsby\";\n\nexport const BigButton = ({href, img, wide, text}) => (\n\t<Link to={href}\n\t\t  className={`cta-link ${wide ? 'wider' : ''} w-inline-block`}>\n\t\t<img\n\t\t\tsrc={img}\n\t\t\tclassName=\"image\"\n\t\t\tstyle={{marginRight: '8px'}}\n\t\t/>\n\t\t<div>{text}</div>\n\t</Link>\n);\n\nexport const BigButtonJs = ({onClick, img, wide, text}) => (\n\t<a href=\"javascript:void(0)\"\n\t   onClick={onClick}\n\t   className={`cta-link ${wide ? 'wider' : ''} w-inline-block`}>\n\t\t<img\n\t\t\tsrc={img}\n\t\t\tclassName=\"image\"\n\t\t\tstyle={{marginRight: '8px'}}\n\t\t/>\n\t\t<div>{text}</div>\n\t</a>\n);\n","import {Appointment} from \"../api/api\";\n\nfunction copyAppointment(o): Appointment {\n\tif (!o.partitionKey) {\n\t\tthrow 'No partitionKey';\n\t}\n\tif (!o.rowKey) {\n\t\tthrow 'No rowKey';\n\t}\n\treturn {\n\t\tresourceId: o.resourceId,\n\t\tserviceType: o.serviceType,\n\t\tserviceLength: o.serviceLength,\n\t\tfirstName: o.firstName,\n\t\tlastName: o.lastName,\n\t\tphone: o.phone,\n\t\temail: o.email,\n\t\taddress1: o.address1,\n\t\tcity: o.city,\n\t\tstate: o.state,\n\t\tzip: o.zip,\n\t\theight: o.height,\n\t\tweight: o.weight,\n\t\treminder: o.reminder,\n\t\tdoctorName: o.doctorName,\n\t\tdoctorPhone: o.doctorPhone,\n\t\tinsuranceCarrier: o.insuranceCarrier,\n\t\tinsuranceGroupNumber: o.insuranceGroupNumber,\n\t\tinsurancePolicyNumber: o.insurancePolicyNumber,\n\t\tinsuranceVerified: o.insuranceVerified,\n\t\tpriorAuthObtained: o.priorAuthObtained,\n\t\torderEnteredToRIS: o.orderEnteredToRIS,\n\t\tpatientWasCalled: o.patientWasCalled,\n\t\tconfirmed: o.confirmed,\n\t\torderImageUrl: o.orderImageUrl,\n\t\tinsuranceFrontUrl: o.insuranceFrontUrl,\n\t\tinsuranceBackUrl: o.insuranceBackUrl,\n\t\tsurveyDataJson: o.surveyDataJson,\n\t\tapprovedDate: o.approvedDate,\n\t\tsubmittedDate: o.submittedDate,\n\t\tconfirmedDate: o.confirmedDate,\n\t\tbirthday: o.birthday,\n\t\tpartitionKey: o.partitionKey,\n\t\trowKey: o.rowKey,\n\t\ttimestamp: o.timestamp,\n\t\teTag: '*',\n\t};\n}\n\nexport default copyAppointment;\n","import * as React from \"react\";\n\nexport const YesNoQuestion = (props: {text: string, val: boolean | null, onChange: any, id: string, children?: any}) => (\n\t<div>\n\t\t<div className=\"inputrow\">\n\t\t\t<label htmlFor={props.id} className=\"flexlabel\">{props.text}<br /></label>\n\t\t\t<div className=\"flexinput\">\n\t\t\t\t<a href=\"javascript:void(0);\" onClick={() => props.onChange(true)} className={`button green small ${props.val === true && 'selected'} w-button`}>\n\t\t\t\t\tYes\n\t\t\t\t</a>\n\t\t\t\t<a href=\"javascript:void(0);\" onClick={() => props.onChange(false)} className={`button green small ${props.val === false && 'selected'} w-button`}>\n\t\t\t\t\tNo\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t</div>\n\t\t{props.val === true && typeof props.children !== 'undefined' && <div className=\"inputrow\">\n            <span className=\"flexmargin\">&nbsp;</span>\n            <div className=\"flexsubitem\">\n\t\t\t{props.children}\n\t\t\t</div>\n\t\t</div>}\n\t</div>\n);\n\nexport const TextQuestion = ({text, val, onChange, id}) => (\n\t<div className=\"inputrow\"><label htmlFor={id} className=\"flexlabel\">{text}<br /></label>\n\t\t<input\n\t\t\ttype=\"text\"\n\t\t\tclassName=\"flexinput w-input\"\n\t\t\tmaxLength={256}\n\t\t\tname={id}\n\t\t\tonClick={(e) => onChange(e.currentTarget.value)}\n\t\t\tvalue={val || ''}\n\t\t\tdata-name={id}\n\t\t\tid={id}\n\t\t/>\n\t</div>\n);\n\n// export class ListQuestiton = ({text, val, onChange, id})"],"sourceRoot":""}