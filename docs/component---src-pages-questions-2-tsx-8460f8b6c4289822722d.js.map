{"version":3,"sources":["webpack:///./src/pages/questions-2.tsx","webpack:///./src/models/SafetyState.ts","webpack:///./src/api/api.ts","webpack:///./node_modules/@babel/runtime/helpers/objectDestructuringEmpty.js","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./src/components/breadcrumb.tsx","webpack:///./src/helpers/FormBasePage.tsx","webpack:///./node_modules/core-js/modules/es6.regexp.to-string.js","webpack:///./node_modules/core-js/modules/_flags.js","webpack:///./node_modules/core-js/modules/es6.date.to-string.js","webpack:///./src/helpers/copyAppointment.ts","webpack:///./src/components/BigBtn.tsx","webpack:///./node_modules/core-js/modules/es6.regexp.flags.js","webpack:///./src/components/Questions.tsx"],"names":["Questions2","props","context","_FormBasePage","call","this","componentDidMount","prototype","render","react__WEBPACK_IMPORTED_MODULE_2__","createElement","_layouts__WEBPACK_IMPORTED_MODULE_6__","a","id","className","_components_breadcrumb__WEBPACK_IMPORTED_MODULE_7__","num","c","value","state","haveOrder","b","scan","d","slot","timeSlot","reserved","renderInner","_this","Fragment","_components_Questions__WEBPACK_IMPORTED_MODULE_3__","val","getAns","onChange","whyMri","ans","text","required","_components_BigBtn__WEBPACK_IMPORTED_MODULE_4__","onClick","doSubmit","img","wide","n","_api_api__WEBPACK_IMPORTED_MODULE_8__","f","appointmentHandlerPUT","req","Object","assign","_helpers_copyAppointment__WEBPACK_IMPORTED_MODULE_9__","_helpers_FormBasePage__WEBPACK_IMPORTED_MODULE_5__","getAppointment","surveyDataJson","JSON","stringify","answers","safetyWarnings","ucshared__WEBPACK_IMPORTED_MODULE_10__","isEmpty","validationResult","then","gatsby__WEBPACK_IMPORTED_MODULE_11__","navigate","err","alert","__webpack_exports__","default","p","162","t","e","r","SafetyState","fname","lname","email","phone","implants","currentImplant","overrideSafetyWarning","height","weight","doctorName","doctorContact","insFront","insBack","mriOrder","carrierNumber","groupNumber","policyNumber","dob","address1","address2","city","zip","optedIn","sessionStorage","parse","getItem","loadState","jsonState","o","163","u","g","E","x","U","i","s","BASE_PATH","replace","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","query","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","authToken","contentTypeHeader","fetchOptions","method","Content-Type","body","headers","url","format","AuthApiFetchParamCreator","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","runPOST","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","locationId","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesGET","availabilityRulesPOST","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","withContrast","search","ScheduleApiFetchParamCreator","length","skip","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerDELETE","appointmentHandlerGET","appointmentHandlerPOST","timeSlotsGET","module","exports","obj","TypeError","167","dP","__webpack_require__","FProto","Function","nameRE","configurable","get","match","168","Chevron","src","width","alt","translucent","Ez123","OrderBreadcrumb","gatsby__WEBPACK_IMPORTED_MODULE_3__","Link","to","style","display","MriTypeBreadcrumb","_ref","name","contrast","TimeslotBreadcrumb","slotId","169","FormBasePage","_React$Component","_models_SafetyState__WEBPACK_IMPORTED_MODULE_3__","setAppointment","appt","setItem","_proto","q","setState","console","log","_this2","saveState","Component","186","anObject","$flags","DESCRIPTORS","$toString","toString","define","fn","RegExp","source","flags","R","concat","that","result","global","ignoreCase","multiline","unicode","sticky","DateProto","Date","getTime","NaN","194","partitionKey","rowKey","resourceId","serviceType","serviceLength","firstName","lastName","reminder","doctorPhone","insuranceCarrier","insuranceGroupNumber","insurancePolicyNumber","insuranceVerified","priorAuthObtained","orderEnteredToRIS","patientWasCalled","confirmed","orderImageUrl","insuranceFrontUrl","insuranceBackUrl","approvedDate","submittedDate","confirmedDate","birthday","timestamp","eTag","195","BigButton","BigButtonJs","react__WEBPACK_IMPORTED_MODULE_0__","gatsby__WEBPACK_IMPORTED_MODULE_1__","href","marginRight","_ref2","229","YesNoQuestion","htmlFor","children","TextQuestion","type","maxLength","_onChange","_x","currentTarget","data-name"],"mappings":"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","file":"component---src-pages-questions-2-tsx-8460f8b6c4289822722d.js","sourcesContent":["import * as React from 'react';\nimport {TextQuestion, YesNoQuestion} from \"../components/Questions\";\nimport {BigButton, BigButtonJs} from \"../components/BigBtn\";\nimport {FormBasePage} from \"../helpers/FormBasePage\";\nimport IndexLayout from \"../layouts\";\nimport {Ez123, MriTypeBreadcrumb, OrderBreadcrumb, TimeslotBreadcrumb} from \"../components/breadcrumb\";\nimport {ScheduleApi} from \"../api/api\";\nimport copyAppointment from \"../helpers/copyAppointment\";\nimport {isEmpty} from \"ucshared\";\nimport {navigate} from \"gatsby\";\n\nclass Questions2 extends FormBasePage {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t}\n\tpublic componentDidMount() {\n\t\tsuper.componentDidMount();\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<IndexLayout>\n\t\t\t\t<section id=\"Q2\" className=\"vspace80 w-container\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Ez123 num={3} />\n\t\t\t\t\t\t<div className=\"breadcrumb-stack\">\n\t\t\t\t\t\t\t<OrderBreadcrumb value={this.state.haveOrder}/>\n\t\t\t\t\t\t\t<MriTypeBreadcrumb value={this.state.scan}/>\n\t\t\t\t\t\t\t<TimeslotBreadcrumb slot={this.state.timeSlot} reserved={true} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"w-col w-col-3\"/>\n\t\t\t\t\t<div className=\"w-col w-col-6\">\n\t\t\t\t\t\t{this.renderInner()}\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</IndexLayout>\n\t\t);\n\t}\n\n\tpublic renderInner() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<h3>Tell us a little more about your medical history.</h3>\n\t\t\t\t<p>This information improves the accuracy of your results, but is optional.</p>\n\n\n\n\t\t\t\t<TextQuestion\n\t\t\t\t\tid=\"whyMri\"\n\t\t\t\t\tval={this.getAns('whyMri')}\n\t\t\t\t\tonChange={(whyMri) => this.ans('whyMri', whyMri)}\n\t\t\t\t\ttext=\"Why are you having an MRI?\"\n\t\t\t\t\trequired={false}\n\t\t\t\t/>\n\n\t\t\t\t<YesNoQuestion\n\t\t\t\t\tid=\"pain\"\n\t\t\t\t\ttext=\"Do you have pain in the area being scanned?\"\n\t\t\t\t\tonChange={(val) => this.ans('pain', val)}\n\t\t\t\t\tval={this.getAns('pain')}\n\t\t\t\t/>\n\n\t\t\t\t<YesNoQuestion\n\t\t\t\t\tid=\"injury\"\n\t\t\t\t\ttext=\"Did you have an injury?\"\n\t\t\t\t\tonChange={(val) => this.ans('injury', val)}\n\t\t\t\t\tval={this.getAns('injury')}\n\t\t\t\t>\n\t\t\t\t\t<TextQuestion\n\t\t\t\t\t\tid=\"injuryDetails\"\n\t\t\t\t\t\tval={this.getAns('injuryDetails')}\n\t\t\t\t\t\tonChange={(val) => this.ans('injuryDetails', val)}\n\t\t\t\t\t\ttext=\"Please add details\"\n\t\t\t\t\t\trequired={false}\n\t\t\t\t\t/>\n\t\t\t\t</YesNoQuestion>\n\n\t\t\t\t<YesNoQuestion\n\t\t\t\t\tid=\"cancer\"\n\t\t\t\t\ttext=\"Do you have a diagnosis of cancer?\"\n\t\t\t\t\tonChange={(val) => this.ans('cancer', val)}\n\t\t\t\t\tval={this.getAns('cancer')}\n\t\t\t\t>\n\t\t\t\t\t<TextQuestion\n\t\t\t\t\t\tid=\"cancerDetails\"\n\t\t\t\t\t\tval={this.getAns('cancerDetails')}\n\t\t\t\t\t\tonChange={(val) => this.ans('cancerDetails', val)}\n\t\t\t\t\t\ttext=\"What type?\"\n\t\t\t\t\t\trequired={true}\n\t\t\t\t\t/>\n\t\t\t\t</YesNoQuestion>\n\n\t\t\t\t<YesNoQuestion\n\t\t\t\t\tid=\"priorImaging_Mri\"\n\t\t\t\t\ttext=\"Have you had an MRI before?\"\n\t\t\t\t\tonChange={(val) => this.ans('priorImaging_Mri', val)}\n\t\t\t\t\tval={this.getAns('priorImaging_Mri')}\n\t\t\t\t>\n\t\t\t\t\t<TextQuestion\n\t\t\t\t\t\tid=\"priorImaging_MriDetails\"\n\t\t\t\t\t\tval={this.getAns('priorImaging_MriDetails')}\n\t\t\t\t\t\tonChange={(val) => this.ans('priorImaging_MriDetails', val)}\n\t\t\t\t\t\ttext=\" When/where?\"\n\t\t\t\t\t\trequired={false}\n\t\t\t\t\t/>\n\t\t\t\t</YesNoQuestion>\n\n\t\t\t\t<YesNoQuestion\n\t\t\t\t\tid=\"priorImaging_BodyPartImg\"\n\t\t\t\t\ttext=\"Have you had this body part imaged before?\"\n\t\t\t\t\tonChange={(val) => this.ans('priorImaging_BodyPartImg', val)}\n\t\t\t\t\tval={this.getAns('priorImaging_BodyPartImg')}\n\t\t\t\t>\n\t\t\t\t\t<TextQuestion\n\t\t\t\t\t\tid=\"priorImaging_BodyPartImgDetails\"\n\t\t\t\t\t\tval={this.getAns('priorImaging_BodyPartImgDetails')}\n\t\t\t\t\t\tonChange={(val) => this.ans('priorImaging_BodyPartImgDetails', val)}\n\t\t\t\t\t\ttext=\"How/when/where\"\n\t\t\t\t\t\trequired={false}\n\t\t\t\t\t/>\n\t\t\t\t</YesNoQuestion>\n\n\t\t\t\t<YesNoQuestion\n\t\t\t\t\tid=\"priorSurgery_Area\"\n\t\t\t\t\ttext=\"Have you had surgery on the area being scanned?\"\n\t\t\t\t\tonChange={(val) => this.ans('priorSurgery_Area', val)}\n\t\t\t\t\tval={this.getAns('priorSurgery_Area')}\n\t\t\t\t>\n\t\t\t\t\t<TextQuestion\n\t\t\t\t\t\tid=\"priorSurgery_Area_when\"\n\t\t\t\t\t\tval={this.getAns('priorSurgery_when')}\n\t\t\t\t\t\tonChange={(val) => this.ans('priorSurgery_when', val)}\n\t\t\t\t\t\ttext=\"When?\"\n\t\t\t\t\t\trequired={true}\n\t\t\t\t\t/>\n\t\t\t\t</YesNoQuestion>\n\n\t\t\t\t<TextQuestion\n\t\t\t\t\tid=\"priorSurgery_Other\"\n\t\t\t\t\tval={this.getAns('priorSurgery_Other')}\n\t\t\t\t\tonChange={(val) => this.ans('priorSurgery_Other', val)}\n\t\t\t\t\ttext=\"What other surgeries have you had?\"\n\t\t\t\t\trequired={false}\n\t\t\t\t/>\n\n\t\t\t\t<div className=\"cta-subitem distributed\">\n\t\t\t\t\t<BigButtonJs\n\t\t\t\t\t\tonClick={() => this.doSubmit()}\n\t\t\t\t\t\timg=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f3661e73d2f76eedd_Meet%20Our%20Team.svg\"\n\t\t\t\t\t\ttext=\"Continue\"\n\t\t\t\t\t\twide\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n\n\tprivate doSubmit() {\n\t\tnew ScheduleApi().appointmentHandlerPUT({\n\t\t\treq: Object.assign({}, copyAppointment(FormBasePage.getAppointment()), {\n\t\t\t\tsurveyDataJson: JSON.stringify(this.state.answers),\n\t\t\t\tsafetyWarnings: isEmpty(this.state.validationResult) ? null : JSON.stringify(this.state.validationResult),\n\t\t\t}),\n\t\t}).then(() => {\n\t\t\tnavigate('/done');\n\t\t}, (err) => alert(err));\n\t}\n}\n\nexport default Questions2;\n","import {SlotAvailabilityTime} from \"../api/api\";\nimport {IScan} from \"./Scan\";\n\nexport class SafetyState {\n\tconstructor() {\n\t\tthis.fname = '';\n\t\tthis.lname = '';\n\t\tthis.answers = {};\n\t\tthis.implants = [];\n\t\tthis.currentImplant = '';\n\t\tthis.scan = null;\n\t\tthis.haveOrder = false;\n\t\tthis.overrideSafetyWarning = false;\n\t\tthis.email = '';\n\t\tthis.phone = '';\n\t\tthis.height = '';\n\t\tthis.weight = '';\n\t\tthis.doctorName = '';\n\t\tthis.doctorContact = '';\n\t\tthis.insFront = '';\n\t\tthis.insBack = '';\n\t\tthis.mriOrder = '';\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tthis.timeSlot = JSON.parse(sessionStorage.getItem('timeSlot') || '{}');\n\t\t} else {\n\t\t\tthis.timeSlot = null;\n\t\t}\n\t\tthis.err = '';\n\t\tthis.dob = '';\n\t\tthis.carrierNumber = '';\n\t\tthis.groupNumber = '';\n\t\tthis.policyNumber = '';\n\t\tthis.address1 = '';\n\t\tthis.address2 = '';\n\t\tthis.city = '';\n\t\tthis.state = '';\n\t\tthis.zip = '';\n\t\tthis.optedIn = true;\n\t\tthis.validationResult = [];\n\t}\n\n\tpublic fname: string;\n\tpublic lname: string;\n\tpublic email: string;\n\tpublic phone: string;\n\tpublic answers: any;\n\tpublic implants: string[];\n\tpublic currentImplant: string;\n\tpublic haveOrder: boolean;\n\tpublic scan: IScan | null;\n\tpublic overrideSafetyWarning: boolean;\n\tpublic height: string;\n\tpublic weight: string;\n\tpublic doctorName: string;\n\tpublic doctorContact: string;\n\tpublic insFront: string;\n\tpublic insBack: string;\n\tpublic mriOrder: string;\n\tpublic carrierNumber: string;\n\tpublic groupNumber: string;\n\tpublic policyNumber: string;\n\tpublic timeSlot: SlotAvailabilityTime | null;\n\tpublic err: string;\n\tpublic dob: string;\n\tpublic address1: string;\n\tpublic address2: string;\n\tpublic city: string;\n\tpublic state: string;\n\tpublic zip: string;\n\tpublic optedIn: boolean;\n\tpublic validationResult: string[];\n\n\tpublic static loadState(): SafetyState {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst jsonState = JSON.parse(sessionStorage.getItem('wizard') || '{}');\n\t\t\tconst o = {\n\t\t\t\t// fname: sessionStorage.getItem('fname') || '',\n\t\t\t\t// lname: sessionStorage.getItem('lname') || '',\n\t\t\t\t// email: sessionStorage.getItem('email') || '',\n\t\t\t\t// phone: sessionStorage.getItem('phone') || '',\n\t\t\t\t// height: sessionStorage.getItem('height') || '',\n\t\t\t\t// weight: sessionStorage.getItem('weight') || '',\n\t\t\t\t// doctorName: sessionStorage.getItem('doctorName') || '',\n\t\t\t\t// insFront: sessionStorage.getItem('insFront') || '',\n\t\t\t\t// insBack: sessionStorage.getItem('insBack') || '',\n\t\t\t\t// mriOrder: sessionStorage.getItem('mriOrder') || '',\n\t\t\t\tscan: JSON.parse(sessionStorage.getItem('scan') || '{}'),\n\t\t\t\thaveOrder: sessionStorage.getItem('haveOrder') === 'true',\n\t\t\t};\n\t\t\treturn Object.assign(new SafetyState(), jsonState, o);\n\t\t}\n\t\treturn new SafetyState();\n\t}\n}\n","/**\n * ideal MRI\n * Signup Center API\n *\n * OpenAPI spec version: v1\n * Contact: ben@herila.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as querystring from \"querystring\";\nimport * as url from \"url\";\n\nimport * as isomorphicFetch from \"isomorphic-fetch\";\nimport * as assign from \"core-js/library/fn/object/assign\";\n\ninterface Dictionary<T> { [index: string]: T; }\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\n\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\nexport class BaseAPI {\n    basePath: string;\n    fetch: FetchAPI;\n\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\n        this.basePath = basePath;\n        this.fetch = fetch;\n    }\n};\n\nexport interface ApiResultListAppointment {\n    \"value\"?: Array<Appointment>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListAvailabilityRule {\n    \"value\"?: Array<AvailabilityRule>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListSlotAvailabilityDate {\n    \"value\"?: Array<SlotAvailabilityDate>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface Appointment {\n    \"resourceId\"?: string;\n    \"serviceType\"?: string;\n    \"serviceLength\"?: number;\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"address1\"?: string;\n    \"address2\"?: string;\n    \"city\"?: string;\n    \"state\"?: string;\n    \"zip\"?: string;\n    \"height\"?: string;\n    \"weight\"?: string;\n    \"reminder\"?: number;\n    \"doctorName\"?: string;\n    \"doctorPhone\"?: string;\n    \"insuranceCarrier\"?: string;\n    \"insuranceGroupNumber\"?: string;\n    \"insurancePolicyNumber\"?: string;\n    \"insuranceVerified\"?: boolean;\n    \"priorAuthObtained\"?: boolean;\n    \"orderEnteredToRIS\"?: boolean;\n    \"patientWasCalled\"?: boolean;\n    \"confirmed\"?: boolean;\n    \"orderImageUrl\"?: string;\n    \"insuranceFrontUrl\"?: string;\n    \"insuranceBackUrl\"?: string;\n    \"surveyDataJson\"?: string;\n    \"safetyWarnings\"?: string;\n    \"approvedDate\"?: Date;\n    \"submittedDate\"?: Date;\n    \"confirmedDate\"?: Date;\n    \"birthday\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface AvailabilityRule {\n    \"priority\"?: number;\n    \"resourceID\"?: string;\n    \"onThisDay\"?: string;\n    \"startTime\"?: string;\n    \"endTime\"?: string;\n    \"comment\"?: string;\n    \"status\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface CustomerLead {\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"dob\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"serviceType\"?: string;\n    \"timeSlot\"?: string;\n    \"withContrast\"?: boolean;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface Location {\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface SlotAvailabilityDate {\n    \"date\"?: Date;\n    \"friendlyBegin\"?: string;\n    \"times\"?: Array<SlotAvailabilityTime>;\n}\n\nexport interface SlotAvailabilityTime {\n    \"time\"?: string;\n    \"resourceId\"?: string;\n    \"isHidden\"?: boolean;\n    \"isAvailable\"?: boolean;\n    \"isContrastAvailable\"?: boolean;\n    \"isContrastRequired\"?: boolean;\n    \"linkedAppointment\"?: Appointment;\n    \"slotId\"?: string;\n}\n\nexport interface Stack {\n    \"in\"?: string;\n    \"at\"?: string;\n}\n\nexport interface SurveyQuestion {\n    \"questionId\"?: string;\n    \"questionShowIf\"?: string;\n    \"questionShowIfAnswer\"?: string;\n    \"questionText\"?: string;\n    \"questionType\"?: string;\n    \"isRequired\"?: boolean;\n    \"isHidden\"?: boolean;\n    \"order\"?: number;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface TableResult {\n    \"result\"?: any;\n    \"httpStatusCode\"?: number;\n    \"etag\"?: string;\n}\n\nexport interface User {\n    \"apiKey\"?: string;\n    \"immutableId\"?: string;\n    \"referenceRowKey\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\n\n\n/**\n * AuthApi - fetch parameter creator\n */\nexport const AuthApiFetchParamCreator = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/auth`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * AuthApi - functional programming interface\n */\nexport const AuthApiFp = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * AuthApi - object-oriented interface\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * AuthApi - factory interface\n */\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Auth\n         * @param req\n         * @param authToken\n         */\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n            return AuthApiFp.auth(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * LeadGenApi - fetch parameter creator\n */\nexport const LeadGenApiFetchParamCreator = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * LeadGenApi - functional programming interface\n */\nexport const LeadGenApiFp = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * LeadGenApi - object-oriented interface\n */\nexport class LeadGenApi extends BaseAPI {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * LeadGenApi - factory interface\n */\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * PostQuestionApi - fetch parameter creator\n */\nexport const PostQuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * PostQuestionApi - functional programming interface\n */\nexport const PostQuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * PostQuestionApi - object-oriented interface\n */\nexport class PostQuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * PostQuestionApi - factory interface\n */\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         * @param req\n         */\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * QuestionApi - fetch parameter creator\n */\nexport const QuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * QuestionApi - functional programming interface\n */\nexport const QuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * QuestionApi - object-oriented interface\n */\nexport class QuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any) {\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * QuestionApi - factory interface\n */\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         */\n        getQuestions(options?: any) {\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ResourceApi - fetch parameter creator\n */\nexport const ResourceApiFetchParamCreator = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ResourceApi - functional programming interface\n */\nexport const ResourceApiFp = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ResourceApi - object-oriented interface\n */\nexport class ResourceApi extends BaseAPI {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ResourceApi - factory interface\n */\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param authToken\n         */\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ScheduleApi - fetch parameter creator\n */\nexport const ScheduleApiFetchParamCreator = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslots`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"length\": params[\"length\"],\n            \"locationId\": params[\"locationId\"],\n            \"skip\": params[\"skip\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ScheduleApi - functional programming interface\n */\nexport const ScheduleApiFp = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ScheduleApi - object-oriented interface\n */\nexport class ScheduleApi extends BaseAPI {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any) {\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ScheduleApi - factory interface\n */\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary TimeSlots\n         * @param authToken\n         * @param withContrast\n         * @param length\n         * @param locationId\n         */\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\n        },\n    };\n};\n\n","function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}\n\nmodule.exports = _objectDestructuringEmpty;","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","import * as React from 'react';\nimport {Link} from 'gatsby';\nimport {SlotAvailabilityTime} from \"../api/api\";\n\nconst Chevron = (props: {translucent?: boolean}) => (\n\t<img\n\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5be12c8e888fb5963088dc64_chevron-right-blue-2.svg\"\n\t\twidth=\"38\" height=\"38\" alt=\"Chevron right\" className={props.translucent ? 'translucent' : ''}/>\n);\n\nexport const Ez123 = (props: {num: number}) => (\n\t<div>\n\t\t<div className=\"breadcrumb-row\">\n\t\t\t<div className={'circled ' + (props.num < 1 ? 'translucent' : '') }>1</div>\n\t\t\t<Chevron translucent={props.num < 2} />\n\t\t\t<div className={'circled ' + (props.num < 2 ? 'translucent' : '') }>2</div>\n\t\t\t<Chevron translucent={props.num < 3} />\n\t\t\t<div className={'circled ' + (props.num < 3 ? 'translucent' : '') }>3</div>\n\t\t</div>\n\t\t<div className=\"breadcrumb-row\">\n\t\t\t{props.num === 1 && <h3><strong>Step 1.</strong> Your details</h3>}\n\t\t\t{props.num === 2 && <h3><strong>Step 2.</strong> Choose your scan</h3>}\n\t\t\t{props.num === 3 && <h3><strong>Step 3.</strong> Health &amp; Safety Information</h3>}\n\t\t</div>\n\t</div>\n);\n\nexport const OrderBreadcrumb = (props: {value: boolean}) => (\n    <Link to=\"/have-order\"\n       className=\"breadcrumb w-button\" style={{display: 'none'}}>\n\t\t{props.value ? 'Have Doctor\\'s Order' : 'No Order'} ✓\n\t</Link>\n);\n\nexport const MriTypeBreadcrumb = ({value}) => {\n\tif (!value) {\n\t\treturn (\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\t\tClick here to select MRI type\n\t\t\t</Link>\n\t\t);\n\t}\n\tif (typeof value === 'string') {\n\t\treturn (\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\t\tScan type: {value} &times;\n\t\t\t</Link>\n\t\t);\n\t}\n\treturn (\n\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\tScan type: {value.name || 'e!name'} {value.contrast || 'e!contrast'} &times;\n\t\t</Link>\n\t)\n};\n\nexport const TimeslotBreadcrumb = (props: {slot: SlotAvailabilityTime | null, reserved?: boolean}) => (\n\t!!props.slot ? (\n\t\t<Link to=\"/pick-time\" className=\"breadcrumb w-button\">\n\t\t\t{(props.slot.slotId || 'no time selected').replace(/(\\d{4})-(\\d{2})-(\\d{2})T([^\\s]{5}).*/g, \"$2/$3/$1 at $4\")} &times;<br /><small>({props.reserved ? 'reserved' : 'not yet reserved'})</small>\n\t\t</Link>\n\t) : <div />\n);\n","import * as React from 'react';\nimport {SafetyState} from \"../models/SafetyState\";\nimport {Appointment} from \"../api/api\";\n\nexport abstract class FormBasePage extends React.Component<{}, SafetyState> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = SafetyState.loadState();\n\t}\n\n\tpublic static setAppointment(appt: Appointment | null) {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tsessionStorage.setItem('appointmentEntity', JSON.stringify(appt || null));\n\t\t}\n\t}\n\n\tpublic static getAppointment(): Appointment {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst json = sessionStorage.getItem('appointmentEntity') || '{}';\n\t\t\treturn JSON.parse(json);\n\t\t}\n\t\treturn {};\n\t}\n\n\tpublic getAns(q) {\n\t\treturn this.state.answers[q];\n\t}\n\n\tpublic componentDidMount() {\n\t\tconst state = SafetyState.loadState();\n\t\tthis.setState(state);\n\t\tconsole.log('Loaded SafetyState', state);\n\t}\n\n\tpublic ans(q, val) {\n\t\tconst answers = Object.assign({}, this.state.answers);\n\t\tanswers[q] = val;\n\t\tconsole.log(q, val, answers);\n\t\tthis.setState({answers}, () => this.saveState());\n\t}\n\n\tpublic saveState() {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tsessionStorage.setItem('wizard', JSON.stringify({\n\t\t\t\tanswers: this.state.answers,\n\t\t\t\timplants: this.state.implants,\n\t\t\t\tcurrentImplant: this.state.currentImplant,\n\t\t\t\tfname: this.state.fname,\n\t\t\t\tlname: this.state.lname,\n\t\t\t\temail: this.state.email,\n\t\t\t\tphone: this.state.phone,\n\t\t\t\theight: this.state.height,\n\t\t\t\tweight: this.state.weight,\n\t\t\t\tdoctorName: this.state.doctorName,\n\t\t\t\tdoctorContact: this.state.doctorContact,\n\t\t\t\tinsFront: this.state.insFront,\n\t\t\t\tinsBack: this.state.insBack,\n\t\t\t\tcarrierNumber: this.state.carrierNumber,\n\t\t\t\tpolicyNumber: this.state.policyNumber,\n\t\t\t\tgroupNumber: this.state.groupNumber,\n\t\t\t\tmriOrder: this.state.mriOrder,\n\t\t\t\tscan: this.state.scan || null,\n\t\t\t\thaveOrder: this.state.haveOrder,\n\t\t\t\tdob: this.state.dob,\n\t\t\t}));\n\t\t}\n\t}\n\n\tabstract render();\n}","'use strict';\nrequire('./es6.regexp.flags');\nvar anObject = require('./_an-object');\nvar $flags = require('./_flags');\nvar DESCRIPTORS = require('./_descriptors');\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var DateProto = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar $toString = DateProto[TO_STRING];\nvar getTime = DateProto.getTime;\nif (new Date(NaN) + '' != INVALID_DATE) {\n  require('./_redefine')(DateProto, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? $toString.call(this) : INVALID_DATE;\n  });\n}\n","import {Appointment} from \"../api/api\";\n\nfunction copyAppointment(o): Appointment {\n\tif (!o.partitionKey) {\n\t\tthrow 'No partitionKey';\n\t}\n\tif (!o.rowKey) {\n\t\tthrow 'No rowKey';\n\t}\n\treturn {\n\t\tresourceId: o.resourceId,\n\t\tserviceType: o.serviceType,\n\t\tserviceLength: o.serviceLength,\n\t\tfirstName: o.firstName,\n\t\tlastName: o.lastName,\n\t\tphone: o.phone,\n\t\temail: o.email,\n\t\taddress1: o.address1,\n\t\tcity: o.city,\n\t\tstate: o.state,\n\t\tzip: o.zip,\n\t\theight: o.height,\n\t\tweight: o.weight,\n\t\treminder: o.reminder,\n\t\tdoctorName: o.doctorName,\n\t\tdoctorPhone: o.doctorPhone,\n\t\tinsuranceCarrier: o.insuranceCarrier,\n\t\tinsuranceGroupNumber: o.insuranceGroupNumber,\n\t\tinsurancePolicyNumber: o.insurancePolicyNumber,\n\t\tinsuranceVerified: o.insuranceVerified,\n\t\tpriorAuthObtained: o.priorAuthObtained,\n\t\torderEnteredToRIS: o.orderEnteredToRIS,\n\t\tpatientWasCalled: o.patientWasCalled,\n\t\tconfirmed: o.confirmed,\n\t\torderImageUrl: o.orderImageUrl,\n\t\tinsuranceFrontUrl: o.insuranceFrontUrl,\n\t\tinsuranceBackUrl: o.insuranceBackUrl,\n\t\tsurveyDataJson: o.surveyDataJson,\n\t\tapprovedDate: o.approvedDate,\n\t\tsubmittedDate: o.submittedDate,\n\t\tconfirmedDate: o.confirmedDate,\n\t\tbirthday: o.birthday,\n\t\tpartitionKey: o.partitionKey,\n\t\trowKey: o.rowKey,\n\t\ttimestamp: o.timestamp,\n\t\tsafetyWarnings: o.safetyWarnings,\n\t\teTag: '*',\n\t};\n}\n\nexport default copyAppointment;\n","import * as React from \"react\";\nimport {Link} from \"gatsby\";\n\nexport const BigButton = ({href, img, wide, text}) => (\n\t<Link to={href}\n\t\t  className={`cta-link ${wide ? 'wider' : ''} w-inline-block`}>\n\t\t<img\n\t\t\tsrc={img}\n\t\t\tclassName=\"image\"\n\t\t\tstyle={{marginRight: '8px'}}\n\t\t/>\n\t\t<div>{text}</div>\n\t</Link>\n);\n\nexport const BigButtonJs = ({onClick, img, wide, text}) => (\n\t<a href=\"javascript:void(0)\"\n\t   onClick={onClick}\n\t   className={`cta-link ${wide ? 'wider' : ''} w-inline-block`}>\n\t\t<img\n\t\t\tsrc={img}\n\t\t\tclassName=\"image\"\n\t\t\tstyle={{marginRight: '8px'}}\n\t\t/>\n\t\t<div>{text}</div>\n\t</a>\n);\n","// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n","import * as React from \"react\";\n\nexport const YesNoQuestion = (props: {text: string, val: boolean | null, onChange: any, id: string, children?: any}) => (\n\t<div>\n\t\t<div className=\"inputrow\">\n\t\t\t<label htmlFor={props.id} className=\"flexlabel\">{props.text}<br /></label>\n\t\t\t<div className=\"flexinput\">\n\t\t\t\t<a href=\"javascript:void(0);\" onClick={() => props.onChange(true)} className={`button green small ${props.val === true && 'selected'} w-button`}>\n\t\t\t\t\tYes\n\t\t\t\t</a>\n\t\t\t\t<a href=\"javascript:void(0);\" onClick={() => props.onChange(false)} className={`button green small ${props.val === false && 'selected'} w-button`}>\n\t\t\t\t\tNo\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t</div>\n\t\t{props.val === true && typeof props.children !== 'undefined' && <div className=\"inputrow\">\n            <span className=\"flexmargin\">&nbsp;</span>\n            <div className=\"flexsubitem\">\n\t\t\t{props.children}\n\t\t\t</div>\n\t\t</div>}\n\t</div>\n);\n\nexport const TextQuestion = ({text, val, onChange, id, required}) => (\n\t<div className=\"inputrow\"><label htmlFor={id} className=\"flexlabel\">{text}<br /></label>\n\t\t<input\n\t\t\ttype=\"text\"\n\t\t\tclassName=\"flexinput w-input\"\n\t\t\tmaxLength={256}\n\t\t\tname={id}\n\t\t\trequired={required}\n\t\t\tonChange={(e) => onChange(e.currentTarget.value)}\n\t\t\tvalue={val || ''}\n\t\t\tdata-name={id}\n\t\t\tid={id}\n\t\t/>\n\t</div>\n);\n\n// export class ListQuestiton = ({text, val, onChange, id})"],"sourceRoot":""}