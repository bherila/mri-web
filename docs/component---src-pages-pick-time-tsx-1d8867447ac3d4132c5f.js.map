{"version":3,"sources":["webpack:///./src/pages/pick-time.tsx","webpack:///./src/models/SafetyState.ts","webpack:///./src/components/breadcrumb.tsx","webpack:///./src/api/api.ts","webpack:///./node_modules/core-js/modules/es6.regexp.to-string.js","webpack:///./node_modules/core-js/modules/es6.date.to-string.js","webpack:///./node_modules/core-js/modules/_flags.js","webpack:///./node_modules/core-js/modules/es6.regexp.flags.js"],"names":["PickTimePage","props","context","_this","_React$Component","call","this","state","qna","_models_SafetyState__WEBPACK_IMPORTED_MODULE_9__","a","loadState","times","err","offset","total","showModal","componentDidMount","_this2","sessionStorage","scan","location","href","_api_api__WEBPACK_IMPORTED_MODULE_5__","f","timeSlotsGET","withContrast","contrast","locationId","then","result","value","setState","length","message","renderSlotAvailabilityDate","dt","needConfirm","_this3","react__WEBPACK_IMPORTED_MODULE_4__","createElement","className","friendlyBegin","map","timeSlot","key","time","isAvailable","onClick","pickTime","renderModal","_this4","react_modal__WEBPACK_IMPORTED_MODULE_10___default","isOpen","overlayClassName","type","Object","gatsby__WEBPACK_IMPORTED_MODULE_8__","navigate","n","render","_this5","_this$state","_layouts__WEBPACK_IMPORTED_MODULE_6__","id","_components_breadcrumb__WEBPACK_IMPORTED_MODULE_7__","num","b","src","width","height","fname","toString","date","i","JSON","stringify","setItem","e","Component","__webpack_exports__","default","162","t","d","r","SafetyState","lname","email","phone","answers","implants","currentImplant","haveOrder","overrideSafetyWarning","weight","doctorName","doctorContact","insFront","insBack","mriOrder","carrierNumber","groupNumber","policyNumber","dob","address1","address2","city","zip","optedIn","parse","getItem","jsonState","o","assign","167","s","u","c","Chevron","react__WEBPACK_IMPORTED_MODULE_2__","alt","translucent","Ez123","OrderBreadcrumb","gatsby__WEBPACK_IMPORTED_MODULE_3__","Link","to","style","display","MriTypeBreadcrumb","_ref","name","TimeslotBreadcrumb","slot","slotId","replace","169","y","w","D","B","BASE_PATH","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","query","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","authToken","contentTypeHeader","fetchOptions","method","Content-Type","req","body","headers","url","format","AuthApiFetchParamCreator","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","prototype","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","runPOST","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesGET","availabilityRulesPOST","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","search","ScheduleApiFetchParamCreator","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerDELETE","appointmentHandlerGET","appointmentHandlerPOST","appointmentHandlerPUT","__webpack_require__","anObject","$flags","DESCRIPTORS","$toString","define","fn","RegExp","source","flags","R","concat","DateProto","Date","getTime","NaN","202","module","exports","that","global","ignoreCase","multiline","unicode","sticky","configurable","get"],"mappings":"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","file":"component---src-pages-pick-time-tsx-1d8867447ac3d4132c5f.js","sourcesContent":["import * as React from 'react'\r\nimport * as Api from '../api/api'\r\nimport IndexLayout from '../layouts'\r\nimport {Ez123, MriTypeBreadcrumb} from \"../components/breadcrumb\";\r\nimport {navigate} from \"gatsby\";\r\nimport {SafetyState} from \"../models/SafetyState\";\r\nimport ReactModal from 'react-modal';\r\n\r\nconst take = 4;\r\n\r\ninterface IState\r\n{\r\n\terr: any,\r\n\toffset: number;\r\n\ttotal: number;\r\n\tqna: SafetyState;\r\n\ttimes: Api.SlotAvailabilityDate[];\r\n\tshowModal: boolean;\r\n}\r\n\r\nclass PickTimePage extends React.Component<{}, IState> {\r\n\tconstructor(props, context) {\r\n\t\tsuper(props, context);\r\n\t\tthis.state = {\r\n\t\t\tqna: SafetyState.loadState(),\r\n\t\t\ttimes: [],\r\n\t\t\terr: null,\r\n\t\t\toffset: 0,\r\n\t\t\ttotal: 0,\r\n\t\t\tshowModal: false,\r\n\t\t};\r\n\t}\r\n\r\n\tpublic componentDidMount() {\r\n\t\tif (typeof sessionStorage !== 'undefined') {\r\n\t\t\tconst scan = this.state.qna.scan;\r\n\t\t\tif (!scan) {\r\n\t\t\t\tlocation.href = '/?err=no-scan';\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tnew Api.ScheduleApi().timeSlotsGET({\r\n\t\t\t\twithContrast: scan.contrast === 'with and without contrast',\r\n\t\t\t\tlocationId: ''\r\n\t\t\t}).then((result) => {\r\n\t\t\t\tif (result.value) {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\ttimes: result.value || [],\r\n\t\t\t\t\t\ttotal: result.value.length || 0,\r\n\t\t\t\t\t\tqna: SafetyState.loadState(),\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\terr: result.message || 'Error',\r\n\t\t\t\t\t\tqna: SafetyState.loadState(),\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}, (err) => this.setState({\r\n\t\t\t\terr,\r\n\t\t\t\tqna: SafetyState.loadState(),\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic renderSlotAvailabilityDate(dt: Api.SlotAvailabilityDate, needConfirm: boolean) {\r\n\t\treturn (\r\n\t\t\t<div className=\"timeslotcolumn\">\r\n\t\t\t\t<h3>{dt.friendlyBegin}</h3>\r\n\t\t\t\t{dt.times ? dt.times.map((timeSlot) => (\r\n\t\t\t\t\t<a key={timeSlot.time}\r\n\t\t\t\t\t   href=\"#\"\r\n\t\t\t\t\t   className={`buttontimeslot ${timeSlot.isAvailable ? '' : 'unavailable '}w-button`}\r\n\t\t\t\t\t   onClick={() => this.pickTime(timeSlot, needConfirm)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{timeSlot.time}\r\n\t\t\t\t\t</a>\r\n\t\t\t\t)) : <div>dt.times is {typeof dt.times}</div>}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tpublic renderModal() {\r\n\t\treturn (\r\n\t\t\t<ReactModal\r\n\t\t\t\tisOpen={this.state.showModal}\r\n\t\t\t\tclassName=\"modal-content animated fadeInUp\"\r\n\t\t\t\toverlayClassName=\"modal-wrapper\"\r\n\t\t\t>\r\n\t\t\t\t<p><b>The time you selected is tomorrow.</b></p>\r\n\t\t\t\t<p>We won't have enough time to verify your insurance. Are you sure you want to select this time?</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<button type=\"button\"\r\n\t\t\t\t\t\t\tclassName=\"button w-button\"\r\n\t\t\t\t\t\t\tonClick={() => navigate('/addl-info')}>\r\n\t\t\t\t\t\tYes, continue\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button type=\"button\"\r\n\t\t\t\t\t\t\tclassName=\"button w-button\"\r\n\t\t\t\t\t\t\tonClick={() => this.setState({showModal: false})}>\r\n\t\t\t\t\t\tNo, change time\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</p>\r\n\t\t\t</ReactModal>\r\n\t\t);\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\tconst {offset, total, err, times} = this.state;\r\n\t\treturn (\r\n\t\t\t<IndexLayout>\r\n\t\t\t<section id=\"Q2\" className=\"vspace80 w-container\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Ez123 num={2} />\r\n\t\t\t\t\t<div className=\"breadcrumb-stack animated zoomIn\">\r\n\t\t\t\t\t\t<MriTypeBreadcrumb value={this.state.qna.scan}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"w-row\">\r\n\t\t\t\t\t<div className=\"centered w-col w-col-3\">\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f3661e73d2f76eedd_Meet%20Our%20Team.svg\"\r\n\t\t\t\t\t\t\twidth={150}\r\n\t\t\t\t\t\t\theight={150}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"w-col w-col-9\">\r\n\t\t\t\t\t\t<h2>Almost done {this.state.qna.fname}!</h2>\r\n\t\t\t\t\t\t<h3>Choose an available time slot to book your {this.state.qna.scan && this.state.qna.scan.time} appointment.</h3>\r\n\t\t\t\t\t\t<p>If you're interested in a same day appointment, please call us for same day availability at <a href=\"tel:+18334332567\">1 833-IDEAL-MR</a>.</p>\r\n\t\t\t\t\t\t{err && <p>Oops! {err.toString()}</p>}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"w-row\">\r\n\t\t\t\t\t<div className=\"w-col w-col-2\">\r\n\t\t\t\t\t\t<div className=\"timeslotcolumn\">\r\n\t\t\t\t\t\t\t{offset > 0 && (\r\n\t\t\t\t\t\t\t\t<a href=\"#\"\r\n\t\t\t\t\t\t\t\t   onClick={() => this.setState({offset: offset - 1})}\r\n\t\t\t\t\t\t\t\t   className=\"buttontimeslot w-button\">\r\n\t\t\t\t\t\t\t\t\t&laquo; Earlier Dates\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{times && times.map((date, i) => (\r\n\t\t\t\t\t\t(i >= offset && (i - offset) < take) && (\r\n\t\t\t\t\t\t\t<div key={JSON.stringify(date || i)} className=\"w-col w-col-2\">\r\n\t\t\t\t\t\t\t\t{this.renderSlotAvailabilityDate(date, i < 1)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t{offset + take < total && (\r\n\t\t\t\t\t\t<div className=\"w-col w-col-2\">\r\n\t\t\t\t\t\t\t<div className=\"timeslotcolumn\">\r\n\t\t\t\t\t\t\t\t<a href=\"#\"\r\n\t\t\t\t\t\t\t\t   onClick={() => this.setState({offset: offset + 1})}\r\n\t\t\t\t\t\t\t\t   className=\"buttontimeslot w-button\">\r\n\t\t\t\t\t\t\t\t\tLater Dates &gt;&gt;\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\t\t\t{this.renderModal()}\r\n\t\t\t</IndexLayout>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate pickTime(timeSlot: Api.SlotAvailabilityTime, needConfirm: boolean) {\r\n\t\tif (timeSlot.isAvailable) {\r\n\t\t\tsessionStorage.setItem('timeSlot', JSON.stringify(timeSlot));\r\n\t\t\tif (needConfirm) {\r\n\t\t\t\tthis.setState({showModal: true});\r\n\t\t\t} else {\r\n\t\t\t\tnavigate('/addl-info');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default PickTimePage;\r\n","import {SlotAvailabilityTime} from \"../api/api\";\r\nimport {IScan} from \"./Scan\";\r\n\r\nexport class SafetyState {\r\n\tconstructor() {\r\n\t\tthis.fname =  '';\r\n\t\tthis.lname =  '';\r\n\t\tthis.answers =  {};\r\n\t\tthis.implants =  [];\r\n\t\tthis.currentImplant =  '';\r\n\t\tthis.scan =  null;\r\n\t\tthis.haveOrder =  false;\r\n\t\tthis.overrideSafetyWarning =  false;\r\n\t\tthis.email = '';\r\n\t\tthis.phone = '';\r\n\t\tthis.height = '';\r\n\t\tthis.weight = '';\r\n\t\tthis.doctorName = '';\r\n\t\tthis.doctorContact = '';\r\n\t\tthis.insFront = '';\r\n\t\tthis.insBack = '';\r\n\t\tthis.mriOrder = '';\r\n\t\tif (typeof sessionStorage !== 'undefined') {\r\n\t\t\tthis.timeSlot = JSON.parse(sessionStorage.getItem('timeSlot') || '{}');\r\n\t\t} else {\r\n\t\t\tthis.timeSlot = null;\r\n\t\t}\r\n\t\tthis.err = '';\r\n\t\tthis.dob = '';\r\n\t\tthis.carrierNumber = '';\r\n\t\tthis.groupNumber = '';\r\n\t\tthis.policyNumber = '';\r\n\t\tthis.address1 = '';\r\n\t\tthis.address2 = '';\r\n\t\tthis.city = '';\r\n\t\tthis.state = '';\r\n\t\tthis.zip = '';\r\n\t\tthis.optedIn = true;\r\n\t}\r\n\tpublic fname: string;\r\n\tpublic lname: string;\r\n\tpublic email: string;\r\n\tpublic phone: string;\r\n\tpublic answers: any;\r\n\tpublic implants: string[];\r\n\tpublic currentImplant: string;\r\n\tpublic haveOrder: boolean;\r\n\tpublic scan: IScan | null;\r\n\tpublic overrideSafetyWarning: boolean;\r\n\tpublic height: string;\r\n\tpublic weight: string;\r\n\tpublic doctorName: string;\r\n\tpublic doctorContact: string;\r\n\tpublic insFront: string;\r\n\tpublic insBack: string;\r\n\tpublic mriOrder: string;\r\n\tpublic carrierNumber: string;\r\n\tpublic groupNumber: string;\r\n\tpublic policyNumber: string;\r\n\tpublic timeSlot: SlotAvailabilityTime | null;\r\n\tpublic err: string;\r\n\tpublic dob: string;\r\n\tpublic address1: string;\r\n\tpublic address2: string;\r\n\tpublic city: string;\r\n\tpublic state: string;\r\n\tpublic zip: string;\r\n\tpublic optedIn: boolean;\r\n\r\n\tpublic static loadState(): SafetyState {\r\n\t\tif (typeof sessionStorage !== 'undefined') {\r\n\t\t\tconst jsonState = JSON.parse(sessionStorage.getItem('wizard') || '{}');\r\n\t\t\tconst o = {\r\n\t\t\t\t// fname: sessionStorage.getItem('fname') || '',\r\n\t\t\t\t// lname: sessionStorage.getItem('lname') || '',\r\n\t\t\t\t// email: sessionStorage.getItem('email') || '',\r\n\t\t\t\t// phone: sessionStorage.getItem('phone') || '',\r\n\t\t\t\t// height: sessionStorage.getItem('height') || '',\r\n\t\t\t\t// weight: sessionStorage.getItem('weight') || '',\r\n\t\t\t\t// doctorName: sessionStorage.getItem('doctorName') || '',\r\n\t\t\t\t// insFront: sessionStorage.getItem('insFront') || '',\r\n\t\t\t\t// insBack: sessionStorage.getItem('insBack') || '',\r\n\t\t\t\t// mriOrder: sessionStorage.getItem('mriOrder') || '',\r\n\t\t\t\tscan: JSON.parse(sessionStorage.getItem('scan') || '{}'),\r\n\t\t\t\thaveOrder: sessionStorage.getItem('haveOrder') === 'true',\r\n\t\t\t};\r\n\t\t\treturn Object.assign(new SafetyState(), jsonState, o);\r\n\t\t}\r\n\t\treturn new SafetyState();\r\n\t}\r\n}\r\n","import * as React from 'react';\r\nimport {Link} from 'gatsby';\r\nimport {SlotAvailabilityTime} from \"../api/api\";\r\n\r\nconst Chevron = (props: {translucent?: boolean}) => (\r\n\t<img\r\n\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5be12c8e888fb5963088dc64_chevron-right-blue-2.svg\"\r\n\t\twidth=\"38\" height=\"38\" alt=\"Chevron right\" className={props.translucent ? 'translucent' : ''}/>\r\n);\r\n\r\nexport const Ez123 = (props: {num: number}) => (\r\n\t<div>\r\n\t\t<div className=\"breadcrumb-row\">\r\n\t\t\t<div className={'circled ' + (props.num < 1 ? 'translucent' : '') }>1</div>\r\n\t\t\t<Chevron translucent={props.num < 2} />\r\n\t\t\t<div className={'circled ' + (props.num < 2 ? 'translucent' : '') }>2</div>\r\n\t\t\t<Chevron translucent={props.num < 3} />\r\n\t\t\t<div className={'circled ' + (props.num < 3 ? 'translucent' : '') }>3</div>\r\n\t\t</div>\r\n\t\t<div className=\"breadcrumb-row\">\r\n\t\t\t{props.num === 1 && <h3><strong>Step 1.</strong> Your details</h3>}\r\n\t\t\t{props.num === 2 && <h3><strong>Step 2.</strong> Choose your scan</h3>}\r\n\t\t\t{props.num === 3 && <h3><strong>Step 3.</strong> Health &amp; Safety Information</h3>}\r\n\t\t</div>\r\n\t</div>\r\n);\r\n\r\nexport const OrderBreadcrumb = (props: {value: boolean}) => (\r\n    <Link to=\"/have-order\"\r\n       className=\"breadcrumb w-button\" style={{display: 'none'}}>\r\n\t\t{props.value ? 'Have Doctor\\'s Order' : 'No Order'} ✓\r\n\t</Link>\r\n);\r\n\r\nexport const MriTypeBreadcrumb = ({value}) => {\r\n\tif (!value) {\r\n\t\treturn (\r\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\r\n\t\t\t\tClick here to select MRI type\r\n\t\t\t</Link>\r\n\t\t);\r\n\t}\r\n\tif (typeof value === 'string') {\r\n\t\treturn (\r\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\r\n\t\t\t\tScan type: {value} &times;\r\n\t\t\t</Link>\r\n\t\t);\r\n\t}\r\n\treturn (\r\n\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\r\n\t\t\tScan type: {value.name || 'e!name'} {value.contrast || 'e!contrast'} &times;\r\n\t\t</Link>\r\n\t)\r\n};\r\n\r\nexport const TimeslotBreadcrumb = (props: {slot: SlotAvailabilityTime | null, reserved?: boolean}) => (\r\n\t!!props.slot ? (\r\n\t\t<Link to=\"/pick-time\" className=\"breadcrumb w-button\">\r\n\t\t\t{(props.slot.slotId || 'no time selected').replace(/(\\d{4})-(\\d{2})-(\\d{2})T([^\\s]{5}).*/g, \"$2/$3/$1 at $4\")} &times;<br /><small>(not yet reserved)</small>\r\n\t\t</Link>\r\n\t) : <div />\r\n);\r\n","/**\r\n * ideal MRI\r\n * Signup Center API\r\n *\r\n * OpenAPI spec version: v1\r\n * Contact: ben@herila.net\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport * as querystring from \"querystring\";\r\nimport * as url from \"url\";\r\n\r\nimport * as isomorphicFetch from \"isomorphic-fetch\";\r\nimport * as assign from \"core-js/library/fn/object/assign\";\r\n\r\ninterface Dictionary<T> { [index: string]: T; }\r\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\r\n\r\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\r\n\r\nexport interface FetchArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\nexport class BaseAPI {\r\n    basePath: string;\r\n    fetch: FetchAPI;\r\n\r\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\r\n        this.basePath = basePath;\r\n        this.fetch = fetch;\r\n    }\r\n};\r\n\r\nexport interface ApiResultListAppointment {\r\n    \"value\"?: Array<Appointment>;\r\n    \"success\"?: boolean;\r\n    \"message\"?: string;\r\n    \"stackTrace\"?: Array<Stack>;\r\n}\r\n\r\nexport interface ApiResultListAvailabilityRule {\r\n    \"value\"?: Array<AvailabilityRule>;\r\n    \"success\"?: boolean;\r\n    \"message\"?: string;\r\n    \"stackTrace\"?: Array<Stack>;\r\n}\r\n\r\nexport interface ApiResultListSlotAvailabilityDate {\r\n    \"value\"?: Array<SlotAvailabilityDate>;\r\n    \"success\"?: boolean;\r\n    \"message\"?: string;\r\n    \"stackTrace\"?: Array<Stack>;\r\n}\r\n\r\nexport interface Appointment {\r\n    \"resourceId\"?: string;\r\n    \"serviceType\"?: string;\r\n    \"serviceLength\"?: number;\r\n    \"firstName\"?: string;\r\n    \"lastName\"?: string;\r\n    \"phone\"?: string;\r\n    \"email\"?: string;\r\n    \"address1\"?: string;\r\n    \"city\"?: string;\r\n    \"state\"?: string;\r\n    \"zip\"?: string;\r\n    \"height\"?: string;\r\n    \"weight\"?: string;\r\n    \"reminder\"?: number;\r\n    \"doctorName\"?: string;\r\n    \"doctorPhone\"?: string;\r\n    \"insuranceCarrier\"?: string;\r\n    \"insuranceGroupNumber\"?: string;\r\n    \"insurancePolicyNumber\"?: string;\r\n    \"insuranceVerified\"?: boolean;\r\n    \"priorAuthObtained\"?: boolean;\r\n    \"orderEnteredToRIS\"?: boolean;\r\n    \"patientWasCalled\"?: boolean;\r\n    \"confirmed\"?: boolean;\r\n    \"orderImageUrl\"?: string;\r\n    \"insuranceFrontUrl\"?: string;\r\n    \"insuranceBackUrl\"?: string;\r\n    \"surveyDataJson\"?: string;\r\n    \"approvedDate\"?: Date;\r\n    \"submittedDate\"?: Date;\r\n    \"confirmedDate\"?: Date;\r\n    \"birthday\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface AvailabilityRule {\r\n    \"priority\"?: number;\r\n    \"resourceID\"?: string;\r\n    \"onThisDay\"?: string;\r\n    \"startTime\"?: string;\r\n    \"endTime\"?: string;\r\n    \"comment\"?: string;\r\n    \"status\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface CustomerLead {\r\n    \"firstName\"?: string;\r\n    \"lastName\"?: string;\r\n    \"dob\"?: string;\r\n    \"phone\"?: string;\r\n    \"email\"?: string;\r\n    \"serviceType\"?: string;\r\n    \"timeSlot\"?: string;\r\n    \"withContrast\"?: boolean;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface Location {\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface SlotAvailabilityDate {\r\n    \"date\"?: Date;\r\n    \"friendlyBegin\"?: string;\r\n    \"times\"?: Array<SlotAvailabilityTime>;\r\n}\r\n\r\nexport interface SlotAvailabilityTime {\r\n    \"time\"?: string;\r\n    \"resourceId\"?: string;\r\n    \"isHidden\"?: boolean;\r\n    \"isAvailable\"?: boolean;\r\n    \"isContrastAvailable\"?: boolean;\r\n    \"isContrastRequired\"?: boolean;\r\n    \"linkedAppointment\"?: Appointment;\r\n    \"slotId\"?: string;\r\n}\r\n\r\nexport interface Stack {\r\n    \"in\"?: string;\r\n    \"at\"?: string;\r\n}\r\n\r\nexport interface SurveyQuestion {\r\n    \"questionId\"?: string;\r\n    \"questionShowIf\"?: string;\r\n    \"questionShowIfAnswer\"?: string;\r\n    \"questionText\"?: string;\r\n    \"questionType\"?: string;\r\n    \"isRequired\"?: boolean;\r\n    \"isHidden\"?: boolean;\r\n    \"order\"?: number;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface TableResult {\r\n    \"result\"?: any;\r\n    \"httpStatusCode\"?: number;\r\n    \"etag\"?: string;\r\n}\r\n\r\nexport interface User {\r\n    \"apiKey\"?: string;\r\n    \"immutableId\"?: string;\r\n    \"referenceRowKey\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\n\r\n\r\n/**\r\n * AuthApi - fetch parameter creator\r\n */\r\nexport const AuthApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/auth`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * AuthApi - functional programming interface\r\n */\r\nexport const AuthApiFp = {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\r\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * AuthApi - object-oriented interface\r\n */\r\nexport class AuthApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\r\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * AuthApi - factory interface\r\n */\r\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Auth\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\r\n            return AuthApiFp.auth(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * LeadGenApi - fetch parameter creator\r\n */\r\nexport const LeadGenApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/leadGen`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/leadGen`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LeadGenApi - functional programming interface\r\n */\r\nexport const LeadGenApiFp = {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\r\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\r\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LeadGenApi - object-oriented interface\r\n */\r\nexport class LeadGenApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * LeadGenApi - factory interface\r\n */\r\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Run\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Run\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * PostQuestionApi - fetch parameter creator\r\n */\r\nexport const PostQuestionApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/question`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * PostQuestionApi - functional programming interface\r\n */\r\nexport const PostQuestionApiFp = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\r\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * PostQuestionApi - object-oriented interface\r\n */\r\nexport class PostQuestionApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\r\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * PostQuestionApi - factory interface\r\n */\r\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary GetQuestions\r\n         * @param req\r\n         */\r\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\r\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * QuestionApi - fetch parameter creator\r\n */\r\nexport const QuestionApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any): FetchArgs {\r\n        const baseUrl = `/api/question`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * QuestionApi - functional programming interface\r\n */\r\nexport const QuestionApiFp = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\r\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * QuestionApi - object-oriented interface\r\n */\r\nexport class QuestionApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any) {\r\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * QuestionApi - factory interface\r\n */\r\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary GetQuestions\r\n         */\r\n        getQuestions(options?: any) {\r\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * ResourceApi - fetch parameter creator\r\n */\r\nexport const ResourceApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param authToken\r\n     */\r\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/locations`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"locationId\": params[\"locationId\"],\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/locations`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"locationId\": params[\"locationId\"],\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ResourceApi - functional programming interface\r\n */\r\nexport const ResourceApiFp = {\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param authToken\r\n     */\r\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ResourceApi - object-oriented interface\r\n */\r\nexport class ResourceApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param authToken\r\n     */\r\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * ResourceApi - factory interface\r\n */\r\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param authToken\r\n         */\r\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Locations\r\n         * @param locationId\r\n         * @param authToken\r\n         */\r\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Locations\r\n         * @param locationId\r\n         * @param authToken\r\n         */\r\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * ScheduleApi - fetch parameter creator\r\n */\r\nexport const ScheduleApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param length\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslots`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"length\": params[\"length\"],\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ScheduleApi - functional programming interface\r\n */\r\nexport const ScheduleApiFp = {\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param length\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ScheduleApi - object-oriented interface\r\n */\r\nexport class ScheduleApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param length\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * ScheduleApi - factory interface\r\n */\r\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param req\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param req\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param req\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary TimeSlots\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param length\r\n         * @param locationId\r\n         */\r\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n","'use strict';\nrequire('./es6.regexp.flags');\nvar anObject = require('./_an-object');\nvar $flags = require('./_flags');\nvar DESCRIPTORS = require('./_descriptors');\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n","var DateProto = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar $toString = DateProto[TO_STRING];\nvar getTime = DateProto.getTime;\nif (new Date(NaN) + '' != INVALID_DATE) {\n  require('./_redefine')(DateProto, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? $toString.call(this) : INVALID_DATE;\n  });\n}\n","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n"],"sourceRoot":""}