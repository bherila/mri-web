{"version":3,"sources":["webpack:///./src/pages/admin/index.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/Header.tsx","webpack:///./src/components/LayoutRoot.tsx","webpack:///./src/components/LayoutMain.tsx","webpack:///./src/components/Footer.tsx","webpack:///./src/components/FooterNav.tsx","webpack:///./src/layouts/index.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/Page.tsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Container.tsx","webpack:///./src/styles/variables.ts","webpack:///./src/api/api.ts","webpack:///./src/forms/index.tsx"],"names":["AdminIndex","props","context","_this","_React$Component","call","this","state","name","username","password","sessionId","err","render","_this2","react__WEBPACK_IMPORTED_MODULE_1__","createElement","_layouts__WEBPACK_IMPORTED_MODULE_6__","a","_components_Page__WEBPACK_IMPORTED_MODULE_4__","_components_Container__WEBPACK_IMPORTED_MODULE_5__","className","length","action","onSubmit","e","doLogin","_forms__WEBPACK_IMPORTED_MODULE_3__","boundTextboxValue","setState","type","gatsby__WEBPACK_IMPORTED_MODULE_2__","Link","to","n","_this3","preventDefault","_api_api__WEBPACK_IMPORTED_MODULE_7__","auth","authToken","req","partitionKey","apiKey","then","result","sessionStorage","setItem","Object","navigate","removeItem","t","Component","__webpack_exports__","default","d","159","__webpack_require__","r","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","withPrefix","push","replace","navigateTo","_wait_for_route_change__WEBPACK_IMPORTED_MODULE_3__","c","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4___default","_parse_path__WEBPACK_IMPORTED_MODULE_5__","createContext","Consumer","staticQueryData","data","query","children","Error","propTypes","object","string","isRequired","func","components_Header","_ref","objectDestructuringEmpty_default","react","id","href","src","alt","data-collapse","data-animation","data-duration","role","StyledLayoutRoot","index_esm","target","components_LayoutRoot","components_LayoutMain","components_Footer","height","Helmet_default","integrity","crossOrigin","FooterNav","gatsby_browser_entry","title","site","siteMetadata","meta","content","description","_991718019","m","module","exports","react_emotion__WEBPACK_IMPORTED_MODULE_1__","StyledPage","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","_loader__WEBPACK_IMPORTED_MODULE_3__","ProdPageRenderer","location","pageResources","getResourcesForPathname","pathname","shape","l","177","179","181","184","StyledContainer","BASE_PATH","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","parse","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","contentTypeHeader","fetchOptions","method","Content-Type","body","JSON","stringify","headers","url","format","AuthApiFetchParamCreator","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","prototype","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI5","getQuestions","ScheduleApiFp","withContrast","locationId","ScheduleApiFetchParamCreator","search","ScheduleApi","_BaseAPI6","_proto6","adminRulesDELETE","adminRulesGET","adminRulesPOST","adminRulesPUT","timeSlotsGET","userScheduleDELETE","userScheduleGET","userSchedulePOST","userSchedulePUT","moment","formStyle","Row","react__WEBPACK_IMPORTED_MODULE_5__","Col","EditFormBase","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4___default","boundLabel","defaultValue","ucshared__WEBPACK_IMPORTED_MODULE_7__","isEmpty","toString","formGroup","sm","sm3","ctrlLabel","sm9","boundTextbox","bindFn","placeHolder","readOnly","isDisabled","wrn","renderWarnings","disabled","maxLength","onChange","value","placeholder","style","backgroundColor","bindValFn","inputType","currentTarget","minWidth","boundChoices","choices","cc","map","choice","i","key","label","submitRow","actionText","submitButton","boundDate","isStart","start","end","react_datepicker__WEBPACK_IMPORTED_MODULE_6__","selected","selectsEnd","startDate","endDate","dateFormatCalendar","showMonthDropdown","showYearDropdown","val","vlc","toLowerCase","indexOf","boundTextarea","rows","boundTextareaValue","boundCheckbox","defaultChecked","checked","boundCheckboxValue","boundBooleanSwitch","insertBlock","detailBlock"],"mappings":"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","file":"component---src-pages-admin-index-tsx-502a519fb30787c4b302.js","sourcesContent":["import * as React from 'react'\r\nimport { Link, navigate } from 'gatsby'\r\nimport {EditFormBase} from '../../forms';\r\n\r\nimport Page from '../../components/Page'\r\nimport Container from '../../components/Container'\r\nimport IndexLayout from '../../layouts'\r\nimport {AuthApi} from \"../../api/api\";\r\n\r\nclass AdminIndex extends React.Component<{}, {name: string, username: string, password: string, sessionId: string, err: string}> {\r\n\tconstructor(props, context) {\r\n\t\tsuper(props, context);\r\n\t\tthis.state = {name: '', username: '', password: '', sessionId: '', err: ''};\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<IndexLayout>\r\n\t\t\t\t<Page>\r\n\t\t\t\t\t<Container className=\"centered\">\r\n\t\t\t\t\t\t<h1>Restricted Access</h1>\r\n\t\t\t\t\t\t{(this.state.err || '').length > 0 && <div className=\"breadcrumb-stack\">\r\n\t\t\t\t\t\t\t{this.state.err}\r\n\t\t\t\t\t\t</div>}\r\n\t\t\t\t\t\t<form action=\"#\" onSubmit={(e) => this.doLogin(e)}>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t{EditFormBase.boundTextboxValue(\r\n\t\t\t\t\t\t\t\t\t'Username/email',\r\n\t\t\t\t\t\t\t\t\tthis.state.username,\r\n\t\t\t\t\t\t\t\t\tusername => this.setState({username}),\r\n\t\t\t\t\t\t\t\t\t'',\r\n\t\t\t\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{EditFormBase.boundTextboxValue(\r\n\t\t\t\t\t\t\t\t\t'Password',\r\n\t\t\t\t\t\t\t\t\tthis.state.password,\r\n\t\t\t\t\t\t\t\t\tpassword => this.setState({password}),\r\n\t\t\t\t\t\t\t\t\t'',\r\n\t\t\t\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\t\t\t\t'password'\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<p className=\"vspace40\">\r\n\t\t\t\t\t\t\t\t<button type=\"submit\" className=\"button w-button\">\r\n\t\t\t\t\t\t\t\t\tSign in\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t<Link to=\"/admin/manage-questions\">Manage Questions</Link>\r\n\t\t\t\t\t\t\t\t<Link to=\"/admin/manage-time-slots\">Manage Time Slots</Link>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t</Page>\r\n\t\t\t</IndexLayout>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate doLogin(e: React.FormEvent<HTMLFormElement>) {\r\n\t\te.preventDefault();\r\n\t\tnew AuthApi().auth({\r\n\t\t\tauthToken: '',\r\n\t\t\treq: {\r\n\t\t\t\tpartitionKey: this.state.username,\r\n\t\t\t\tapiKey: this.state.password,\r\n\t\t\t},\r\n\t\t}).then((result) => {\r\n\t\t\tthis.setState({sessionId: result.apiKey || ''});\r\n\t\t\tsessionStorage.setItem('sessionId', result.apiKey || '');\r\n\t\t\tnavigate('/admin/site');\r\n\t\t}, (err) => {\r\n\t\t\tthis.setState({err: 'Authentication failed'});\r\n\t\t\tsessionStorage.removeItem('sessionId');\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport default AdminIndex\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport { waitForRouteChange } from \"./wait-for-route-change\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  waitForRouteChange,\n}\n","import * as React from 'react'\r\nimport styled from 'react-emotion'\r\nimport { transparentize } from 'polished'\r\nimport { Link } from 'gatsby'\r\n\r\nimport { heights, dimensions, colors } from '../styles/variables'\r\nimport Container from './Container'\r\nimport * as Webflow from '../styles/webflow';\r\nimport { css } from \"emotion\";\r\n\r\nconst StyledHeader = styled.header('navContainer');\r\n\r\nconst Header: React.SFC<{}> = ({}) => (\r\n\t<header>\r\n\t\t<div className=\"nav-grid\">\r\n\t\t\t<div id=\"w-node-82dfbff5e208-14f3913a\" className=\"header-cta-top\">\r\n\t\t\t\t<div className=\"header-inline-block\">\r\n\t\t\t\t\t<div className=\"cta-heading inline-block blue\">Call :</div>\r\n\t\t\t\t\t<div className=\"cta-heading inline-block\"><a href=\"tel:+18334332567\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t className=\"white\">833-IDEAL-MR</a></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<a href=\"/schedule\" className=\"button-3\">Schedule Online</a></div>\r\n\t\t\t<a href=\"/\" id=\"w-node-82dfbff5e20f-14f3913a\" className=\"brand w-nav-brand w--current\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5ba3081aff7d475f9a6fa6d1_Logo%20Dark.svg\"\r\n\t\t\t\talt=\"\" className=\"image-3\"/></a>\r\n\t\t\t<div data-collapse=\"medium\" data-animation=\"default\" data-duration=\"400\" id=\"w-node-82dfbff5e211-14f3913a\"\r\n\t\t\t\t className=\"navbar w-nav\">\r\n\t\t\t\t<nav role=\"navigation\" className=\"navigation-menu w-nav-menu\"><a href=\"/why-ideal-mri\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t className=\"navigation-link-2 white w-nav-link\">Why\r\n\t\t\t\t\tideal MRI</a><a href=\"/for-clinicians\" className=\"navigation-link-2 white w-nav-link\">Meet Our\r\n\t\t\t\t\tTeam</a><a href=\"/what-to-expect\" className=\"navigation-link-2 white w-nav-link\">What to\r\n\t\t\t\t\tExpect</a><a href=\"/pricing-and-insurance\"\r\n\t\t\t\t\t\t\t\t className=\"navigation-link-2 white w-nav-link\">Pricing &amp; Insurance</a><a\r\n\t\t\t\t\thref=\"/for-clinicians\" className=\"navigation-link-2 white w-nav-link\">For Clinicians</a><a\r\n\t\t\t\t\thref=\"/come-see-us\" className=\"navigation-link-2 white w-nav-link\">Find Us</a></nav>\r\n\t\t\t\t<div className=\"hamburger-button-2 white w-nav-button\">\r\n\t\t\t\t\t<div className=\"w-icon-nav-menu\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div className=\"nav-spacer\">&nbsp;</div>\r\n\t</header>\r\n);\r\n\r\nexport default Header\r\n","import * as React from 'react'\r\nimport styled from 'react-emotion'\r\n\r\nconst StyledLayoutRoot = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh;\r\n`\r\n\r\ninterface LayoutRootProps {\r\n  className?: string\r\n}\r\n\r\nconst LayoutRoot: React.SFC<LayoutRootProps> = ({ children, className }) => (\r\n  <StyledLayoutRoot className={className}>{children}</StyledLayoutRoot>\r\n)\r\n\r\nexport default LayoutRoot\r\n","import * as React from 'react'\r\n// import styled from 'react-emotion'\r\n// const StyledLayoutMain = styled.main`\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   flex: 1;\r\n//\r\n\r\ninterface LayoutMainProps {\r\n  className?: string\r\n}\r\n\r\n// <StyledLayoutMain className={className}>{children}</StyledLayoutMain>\r\nconst LayoutMain: React.SFC<LayoutMainProps> = ({ children, className }) => (\r\n  <main className={className || \"white-section\"}>\r\n      <div className=\"vspace80 w-container\">\r\n          {children}\r\n      </div>\r\n  </main>\r\n);\r\n\r\nexport default LayoutMain\r\n","import * as React from 'react'\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Footer: React.SFC<{}> = ({}) => (\r\n\t<footer className=\"cta-section centered-accented\">\r\n\t\t<div className=\"cta-footer\">\r\n\t\t\t<div className=\"footer-inline-block\">\r\n\t\t\t\t<h2 className=\"cta-heading inline-block blue\"><a href=\"tel:+18334332567\">Call</a> : </h2>\r\n\t\t\t\t<h2 className=\"cta-heading inline-block\"><a href=\"tel:+18334332567\" className=\"white\">833-IDEAL-MR</a>\r\n\t\t\t\t</h2>\r\n\t\t\t</div>\r\n\t\t\t<a href=\"/schedule\" className=\"button large\">Schedule Online</a></div>\r\n\t\t<div className=\"cta-footer\"><img\r\n\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5ba3081aff7d475f9a6fa6d1_Logo%20Dark.svg\"\r\n\t\t\theight=\"60\" alt=\"\" className=\"cta-branding\"/><a href=\"/policies-and-hipaa-notice\">Policies and\r\n\t\t\tInformation</a></div>\r\n\t\t<Helmet>\r\n\t\t\t<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" type=\"text/javascript\"\r\n\t\t\t\t\tintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossOrigin=\"anonymous\" />\r\n\t\t\t<script src=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/js/ideal-mri.71c22ec14.js\"\r\n\t\t\t\t\ttype=\"text/javascript\" />\r\n\t\t</Helmet>\r\n\t</footer>\r\n);\r\n\r\nexport default Footer\r\n","import * as React from 'react'\r\n\r\nconst Footer: React.SFC<{}> = ({}) => (\r\n\t<section className=\"cta-section\">\r\n\t\t<div className=\"w-container\">\r\n\t\t\t<div className=\"w-layout-grid grid-2\"><a href=\"/why-ideal-mri\" id=\"w-node-774288a9e25a-774089fe\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead31fb9e09c21b36b101_Why.svg\" alt=\"\"\r\n\t\t\t\tclassName=\"cta-button-image\"/>\r\n\t\t\t\t<div id=\"w-node-774288a9e25c-774089fe\">Why ideal MRI</div>\r\n\t\t\t</a><a href=\"/what-to-expect\" id=\"w-node-774288a9e25e-774089fe\"\r\n\t\t\t\t   className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f69d670128b342c0a_Expect.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>What to Expect</div>\r\n\t\t\t</a><a href=\"/meet-our-team\" id=\"w-node-774288a9e262-774089fe\" className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f3661e73d2f76eedd_Meet%20Our%20Team.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>Meet Our Team</div>\r\n\t\t\t</a><a href=\"/for-clinicians\" id=\"w-node-774288a9e266-774089fe\"\r\n\t\t\t\t   className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead313661e7266876eedf_Providers.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>For Clinicians</div>\r\n\t\t\t</a><a href=\"/pricing-and-insurance\" id=\"w-node-774288a9e26a-774089fe\"\r\n\t\t\t\t   className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead313661e7547b76eee0_Pricing.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>Pricing &amp; Insurance</div>\r\n\t\t\t</a><a href=\"/come-see-us\" id=\"w-node-774288a9e26e-774089fe\" className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f08470e4beefa3f54_Find%20Us.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>Find Us</div>\r\n\t\t\t</a></div>\r\n\t\t</div>\r\n\t</section>\r\n);\r\n\r\nexport default Footer\r\n","import * as React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport {StaticQuery, graphql} from 'gatsby'\r\n\r\n// import 'modern-normalize'\r\n// import '../styles/normalize'\r\nimport '../styles/webflow.css'\r\nimport '../styles/webflow.grid.css'\r\nimport '../styles/animate.css'\r\n\r\nimport Header from '../components/Header'\r\nimport LayoutRoot from '../components/LayoutRoot'\r\nimport LayoutMain from '../components/LayoutMain'\r\nimport Footer from \"../components/Footer\";\r\nimport FooterNav from \"../components/FooterNav\";\r\n\r\ntype StaticQueryProps = {\r\n\tsite: {\r\n\t\tsiteMetadata: {\r\n\t\t\ttitle: string\r\n\t\t\tdescription: string\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst IndexLayout: React.SFC = ({children}) => (\r\n\t<StaticQuery\r\n\t\tquery={graphql`\r\n      query IndexLayoutQuery {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n          }\r\n        }\r\n      }\r\n    `}\r\n\t\trender={(data: StaticQueryProps) => (\r\n\t\t\t<LayoutRoot>\r\n\t\t\t\t<Helmet\r\n\t\t\t\t\ttitle={data.site.siteMetadata.title}\r\n\t\t\t\t\tmeta={[\r\n\t\t\t\t\t\t{name: 'description', content: data.site.siteMetadata.description},\r\n\t\t\t\t\t\t{name: 'keywords', content: 'gatsbyjs, gatsby, javascript, sample, something'}\r\n\t\t\t\t\t]}\r\n\t\t\t\t/>\r\n\t\t\t\t<Header/>\r\n\t\t\t\t<LayoutMain>{children}</LayoutMain>\r\n\t\t\t\t<FooterNav/>\r\n\t\t\t\t<Footer/>\r\n\t\t\t</LayoutRoot>\r\n\t\t)}\r\n\t/>\r\n)\r\n\r\nexport default IndexLayout\r\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import * as React from 'react'\r\nimport styled from 'react-emotion'\r\n\r\nimport { dimensions } from '../styles/variables'\r\n\r\nconst StyledPage = styled.div`\r\n  display: block;\r\n  flex: 1;\r\n  position: relative;\r\n`\r\n\r\ninterface PageProps {\r\n  className?: string\r\n}\r\n\r\nconst Page: React.SFC<PageProps> = ({ children, className }) => <StyledPage className={className}>{children}</StyledPage>\r\n\r\nexport default Page\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathname(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import * as React from 'react'\r\nimport styled from 'react-emotion'\r\n\r\nimport { widths } from '../styles/variables'\r\nimport { getEmSize } from '../styles/mixins'\r\n\r\nconst StyledContainer = styled.div`\r\n  position: relative;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: auto;\r\n  max-width: ${getEmSize(widths.lg)}em;\r\n`\r\n\r\ninterface ContainerProps {\r\n  className?: string\r\n}\r\n\r\nconst Container: React.SFC<ContainerProps> = ({ children, className }) => (\r\n  <StyledContainer className={className}>{children}</StyledContainer>\r\n)\r\n\r\nexport default Container\r\n","/* tslint:disable:max-line-length */\r\n\r\nexport const colors = {\r\n  brand: '#663399',\r\n  lilac: '#9d7cbf',\r\n  accent: '#ffb238',\r\n  success: '#37b635',\r\n  warning: '#ec1818',\r\n  ui: {\r\n    bright: '#e0d6eb',\r\n    light: '#f5f3f7',\r\n    whisper: '#fbfafc'\r\n  },\r\n  code: '#fcf6f0',\r\n  gray: {\r\n    dark: 'hsla(270, 17.119554496%, 0%, 0.92)',\r\n    copy: 'hsla(270, 15.797828016000002%, 0%, 0.88)',\r\n    calm: 'rgba(0, 0, 0, 0.54)'\r\n  },\r\n  white: '#fff',\r\n  black: '#000'\r\n};\r\n\r\nexport const fonts = {\r\n  sansSerif:\r\n    '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", Arial, sans-serif',\r\n  serif: 'Georgia, \"Times New Roman\", Times, serif',\r\n  monospace: 'Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace, monospace'\r\n};\r\n\r\nexport const breakpoints = {\r\n  xs: 0,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200\r\n};\r\n\r\nexport const widths = {\r\n  md: 720,\r\n  lg: 960,\r\n  xl: 1140\r\n};\r\n\r\nexport const dimensions = {\r\n  fontSize: {\r\n    regular: 16,\r\n    large: 18\r\n  },\r\n  headingSizes: {\r\n    h1: 2.441,\r\n    h2: 1.953,\r\n    h3: 1.563,\r\n    h4: 1.25\r\n  },\r\n  lineHeight: {\r\n    regular: 1.45,\r\n    heading: 1.2\r\n  },\r\n  containerPadding: 1.5\r\n};\r\n\r\nexport const heights = {\r\n  header: 60\r\n};\r\n","/**\r\n * ideal MRI\r\n * Signup Center API\r\n *\r\n * OpenAPI spec version: v1\r\n * Contact: ben@herila.net\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport * as querystring from \"querystring\";\r\nimport * as url from \"url\";\r\n\r\nimport * as isomorphicFetch from \"isomorphic-fetch\";\r\nimport * as assign from \"core-js/library/fn/object/assign\";\r\n\r\ninterface Dictionary<T> { [index: string]: T; }\r\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\r\n\r\nconst BASE_PATH = \"http://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\r\n\r\nexport interface FetchArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\nexport class BaseAPI {\r\n    basePath: string;\r\n    fetch: FetchAPI;\r\n\r\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\r\n        this.basePath = basePath;\r\n        this.fetch = fetch;\r\n    }\r\n};\r\n\r\nexport interface Appointment {\r\n    \"appointmentId\"?: string;\r\n    \"appointmentSlotId\"?: string;\r\n    \"serviceType\"?: string;\r\n    \"firstName\"?: string;\r\n    \"lastName\"?: string;\r\n    \"dob\"?: string;\r\n    \"phone\"?: string;\r\n    \"email\"?: string;\r\n    \"address1\"?: string;\r\n    \"city\"?: string;\r\n    \"state\"?: string;\r\n    \"zip\"?: string;\r\n    \"height\"?: string;\r\n    \"weight\"?: string;\r\n    \"reminder\"?: number;\r\n    \"doctorName\"?: string;\r\n    \"doctorPhone\"?: string;\r\n    \"insuranceCarrier\"?: string;\r\n    \"insuranceGroupNumber\"?: string;\r\n    \"insurancePolicyNumber\"?: string;\r\n    \"insuranceVerified\"?: boolean;\r\n    \"priorAuthObtained\"?: boolean;\r\n    \"orderEnteredToRIS\"?: boolean;\r\n    \"patientWasCalled\"?: boolean;\r\n    \"confirmed\"?: boolean;\r\n    \"orderImageUrl\"?: string;\r\n    \"insuranceFrontUrl\"?: string;\r\n    \"insuranceBackUrl\"?: string;\r\n    \"surveyDataJson\"?: string;\r\n    \"approvedDate\"?: Date;\r\n    \"submittedDate\"?: Date;\r\n    \"confirmedDate\"?: Date;\r\n    \"birthday\"?: Date;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface CustomerLead {\r\n    \"firstName\"?: string;\r\n    \"lastName\"?: string;\r\n    \"dob\"?: string;\r\n    \"phone\"?: string;\r\n    \"email\"?: string;\r\n    \"serviceType\"?: string;\r\n    \"timeSlot\"?: string;\r\n    \"withContrast\"?: boolean;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface DayRule {\r\n    \"dayOfWeek\"?: DayRuleDayOfWeekEnum;\r\n    \"openTime\"?: number;\r\n    \"closeTime\"?: number;\r\n    \"slotLength\"?: number;\r\n}\r\n\r\nexport type DayRuleDayOfWeekEnum = \"Sunday\" | \"Monday\" | \"Tuesday\" | \"Wednesday\" | \"Thursday\" | \"Friday\" | \"Saturday\";\r\nexport interface Location {\r\n    \"locationName\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface SlotAvailabilityDate {\r\n    \"date\"?: Date;\r\n    \"friendlyBegin\"?: string;\r\n    \"times\"?: Array<SlotAvailabilityTime>;\r\n}\r\n\r\nexport interface SlotAvailabilityTime {\r\n    \"time\"?: string;\r\n    \"isAvailable\"?: boolean;\r\n    \"linkedAppointment\"?: Appointment;\r\n    \"slotId\"?: string;\r\n}\r\n\r\nexport interface SurveyQuestion {\r\n    \"questionId\"?: string;\r\n    \"questionShowIf\"?: string;\r\n    \"questionShowIfAnswer\"?: string;\r\n    \"questionText\"?: string;\r\n    \"questionType\"?: string;\r\n    \"isRequired\"?: boolean;\r\n    \"isHidden\"?: boolean;\r\n    \"order\"?: number;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface TableResult {\r\n    \"result\"?: any;\r\n    \"httpStatusCode\"?: number;\r\n    \"etag\"?: string;\r\n}\r\n\r\nexport interface User {\r\n    \"apiKey\"?: string;\r\n    \"immutableId\"?: string;\r\n    \"referenceRowKey\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\n\r\n\r\n/**\r\n * AuthApi - fetch parameter creator\r\n */\r\nexport const AuthApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/auth`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * AuthApi - functional programming interface\r\n */\r\nexport const AuthApiFp = {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\r\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * AuthApi - object-oriented interface\r\n */\r\nexport class AuthApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\r\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * AuthApi - factory interface\r\n */\r\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Auth\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\r\n            return AuthApiFp.auth(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * LeadGenApi - fetch parameter creator\r\n */\r\nexport const LeadGenApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: {  \"req\"?: Appointment; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/leadGen`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/leadGen`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LeadGenApi - functional programming interface\r\n */\r\nexport const LeadGenApiFp = {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: { \"req\"?: Appointment; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\r\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: { \"req\"?: Appointment; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\r\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LeadGenApi - object-oriented interface\r\n */\r\nexport class LeadGenApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: {  \"req\"?: Appointment; \"authToken\"?: string; }, options?: any) {\r\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; }, options?: any) {\r\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * LeadGenApi - factory interface\r\n */\r\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Run\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        runGET(params: {  \"req\"?: Appointment; \"authToken\"?: string; }, options?: any) {\r\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Run\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        runPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; }, options?: any) {\r\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * LocationApi - fetch parameter creator\r\n */\r\nexport const LocationApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     */\r\n    locationsGET(params: {  \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/locations`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     */\r\n    locationsPOST(params: {  \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/locations`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LocationApi - functional programming interface\r\n */\r\nexport const LocationApiFp = {\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     */\r\n    locationsGET(params: { \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\r\n        const fetchArgs = LocationApiFetchParamCreator.locationsGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     */\r\n    locationsPOST(params: { \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\r\n        const fetchArgs = LocationApiFetchParamCreator.locationsPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LocationApi - object-oriented interface\r\n */\r\nexport class LocationApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     */\r\n    locationsGET(params: {  \"locationId\"?: string; }, options?: any) {\r\n        return LocationApiFp.locationsGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     */\r\n    locationsPOST(params: {  \"locationId\"?: string; }, options?: any) {\r\n        return LocationApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * LocationApi - factory interface\r\n */\r\nexport const LocationApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Locations\r\n         * @param locationId\r\n         */\r\n        locationsGET(params: {  \"locationId\"?: string; }, options?: any) {\r\n            return LocationApiFp.locationsGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Locations\r\n         * @param locationId\r\n         */\r\n        locationsPOST(params: {  \"locationId\"?: string; }, options?: any) {\r\n            return LocationApiFp.locationsPOST(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * PostQuestionApi - fetch parameter creator\r\n */\r\nexport const PostQuestionApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/question`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * PostQuestionApi - functional programming interface\r\n */\r\nexport const PostQuestionApiFp = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\r\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * PostQuestionApi - object-oriented interface\r\n */\r\nexport class PostQuestionApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\r\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * PostQuestionApi - factory interface\r\n */\r\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary GetQuestions\r\n         * @param req\r\n         */\r\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\r\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * QuestionApi - fetch parameter creator\r\n */\r\nexport const QuestionApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any): FetchArgs {\r\n        const baseUrl = `/api/question`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * QuestionApi - functional programming interface\r\n */\r\nexport const QuestionApiFp = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\r\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * QuestionApi - object-oriented interface\r\n */\r\nexport class QuestionApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any) {\r\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * QuestionApi - factory interface\r\n */\r\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary GetQuestions\r\n         */\r\n        getQuestions(options?: any) {\r\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * ScheduleApi - fetch parameter creator\r\n */\r\nexport const ScheduleApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesDELETE(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesPOST(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesPUT(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslots`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userScheduleDELETE(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userScheduleGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userSchedulePOST(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userSchedulePUT(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ScheduleApi - functional programming interface\r\n */\r\nexport const ScheduleApiFp = {\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesDELETE(params: { \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DayRule>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.adminRulesDELETE(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesGET(params: { \"withContrast\"?: boolean; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DayRule>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.adminRulesGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesPOST(params: { \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DayRule>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.adminRulesPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesPUT(params: { \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DayRule>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.adminRulesPUT(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: { \"withContrast\"?: boolean; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SlotAvailabilityDate>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userScheduleDELETE(params: { \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Appointment>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.userScheduleDELETE(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userScheduleGET(params: { \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Appointment>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.userScheduleGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userSchedulePOST(params: { \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Appointment>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.userSchedulePOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userSchedulePUT(params: { \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Appointment>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.userSchedulePUT(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ScheduleApi - object-oriented interface\r\n */\r\nexport class ScheduleApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesDELETE(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.adminRulesDELETE(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.adminRulesGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesPOST(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.adminRulesPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesPUT(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.adminRulesPUT(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userScheduleDELETE(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.userScheduleDELETE(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userScheduleGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.userScheduleGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userSchedulePOST(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.userSchedulePOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userSchedulePUT(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.userSchedulePUT(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * ScheduleApi - factory interface\r\n */\r\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary AdminRules\r\n         * @param req\r\n         * @param withContrast\r\n         * @param locationId\r\n         */\r\n        adminRulesDELETE(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.adminRulesDELETE(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AdminRules\r\n         * @param withContrast\r\n         * @param locationId\r\n         */\r\n        adminRulesGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.adminRulesGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AdminRules\r\n         * @param req\r\n         * @param withContrast\r\n         * @param locationId\r\n         */\r\n        adminRulesPOST(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.adminRulesPOST(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AdminRules\r\n         * @param req\r\n         * @param withContrast\r\n         * @param locationId\r\n         */\r\n        adminRulesPUT(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.adminRulesPUT(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary TimeSlots\r\n         * @param withContrast\r\n         * @param locationId\r\n         */\r\n        timeSlotsGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary UserSchedule\r\n         * @param req\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        userScheduleDELETE(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.userScheduleDELETE(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary UserSchedule\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        userScheduleGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.userScheduleGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary UserSchedule\r\n         * @param req\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        userSchedulePOST(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.userSchedulePOST(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary UserSchedule\r\n         * @param req\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        userSchedulePUT(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.userSchedulePUT(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n","import * as React from 'react';\nimport DatePicker from 'react-datepicker';\nimport {isEmpty} from 'ucshared';\n\nconst moment = require('moment');\nconst formStyle = require('./formStyle.css');\n\nexport function formatAdminDate(date: any) {\n\treturn moment(date).format('MM/DD/YYYY');\n}\n\nconst Row = (props: any) => <div>{props.children}</div>;\nconst Col = (props: any) => <div>{props.children}</div>;\n\nexport class EditFormBase<TProps, TState> extends React.Component<TProps, TState> {\n\tpublic static formGroup = 'form-group';\n\tpublic static ctrlLabel = 'control-label';\n\tpublic static sm3 = '3';\n\tpublic static sm9 = '9';\n\tpublic static insertBlock = formStyle.insertBlock;\n\tpublic static detailBlock = formStyle.detailBlock;\n\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t}\n\n\tpublic static boundLabel(title: string, defaultValue: string | number | Date) {\n\t\tif (isEmpty(title)) {\n\t\t\treturn <span>{(defaultValue || 'null').toString()}</span>;\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{(defaultValue || 'null').toString()}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextbox(title: string, defaultValue: string | number | Date, bindFn: React.FormEventHandler<HTMLInputElement>, placeHolder?: string, readOnly?: boolean, isDisabled?: boolean) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextboxValue(title: string|null, defaultValue: string | number | Date, bindValFn: (value: string) => any, placeHolder?: string, readOnly?: boolean, isDisabled?: boolean, inputType?: string) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype={inputType || 'text'}\n\t\t\t\t\t\tonChange={(e) => bindValFn(e.currentTarget.value)}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {minWidth: '40px'} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.boundTextboxValue(null, defaultValue, bindValFn, placeHolder, readOnly, isDisabled, inputType)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundChoices(title: string|null, choices: Array<{label?: string, value: string}|string>, defaultValue: string | number | Date, bindValFn: (value: string) => any, placeHolder?: string, isDisabled?: boolean) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\tconst cc = choices.map((choice) => (typeof choice === 'string') ? {value: choice} : choice);\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<select\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tonChange={(e) => bindValFn(e.currentTarget.value)}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\tstyle={!wrn ? {minWidth: '40px'} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"\">(none)</option>\n\t\t\t\t\t\t{cc.map((choice, i) => <option key={choice.value + i} value={choice.value}>{choice.label || choice.value}</option>)}\n\t\t\t\t\t</select>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.boundChoices(null, choices, defaultValue, bindValFn, placeHolder, isDisabled)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\n\tpublic static submitRow(actionText?: string) {\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}/>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.submitButton(actionText)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static submitButton(actionText?: string) {\n\t\treturn (\n\t\t\t<button type=\"submit\">{actionText || 'Submit'}</button>\n\t\t);\n\t}\n\n\tpublic static boundDate(title: string, bindFn: React.FormEventHandler<HTMLInputElement>, isStart: boolean, start?: Date, end?: Date, isDisabled?: boolean) {\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t<DatePicker\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tclassName={'form-control'}\n\t\t\t\t\t\tselected={isStart ? moment(start) : moment(end)}\n\t\t\t\t\t\tselectsEnd\n\t\t\t\t\t\tstartDate={start && moment(start)}\n\t\t\t\t\t\tendDate={end && moment(end)}\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tdateFormatCalendar={'MMM YYYY'}\n\t\t\t\t\t\tshowMonthDropdown\n\t\t\t\t\t\tshowYearDropdown\n\t\t\t\t\t/>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tprotected static renderWarnings(val: string|number|Date) {\n\t\tif (typeof val !== 'string') {\n\t\t\treturn this.renderWarnings(val.toString());\n\t\t}\n\t\tif (val) {\n\t\t\tconst vlc = val.toLowerCase();\n\t\t\tif (vlc.indexOf('included') > -1) {\n\t\t\t\treturn <div className=\"alert alert-error\"><b>Warning:</b> Consider removing term <em>included</em></div>;\n\t\t\t}\n\t\t\tif (vlc.indexOf('refund') > -1) {\n\t\t\t\treturn <div className=\"alert alert-error\"><b>Warning:</b> We don't offer refunds.</div>;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static boundTextarea(title: string, defaultValue: string | number, bindFn: React.FormEventHandler<HTMLTextAreaElement>) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<textarea className=\"form-control\" onChange={bindFn} value={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\t  style={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t\t  rows={5}/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextareaValue(title: string, defaultValue: string | number, bindFn: (value) => any) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<textarea className=\"form-control\"\n\t\t\t\t\t\t  onChange={(e) => bindFn(e.currentTarget.value)}\n\t\t\t\t\t\t  value={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\t  style={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t\t  rows={5}/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundCheckbox(title: string, defaultChecked: boolean, bindFn: React.FormEventHandler<HTMLInputElement>, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={bindFn}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n\n\tpublic static boundCheckboxValue(title: string, defaultChecked: boolean, bindFn: (isChecked: boolean) => any, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={(e) => bindFn(e.currentTarget.checked)}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n\n\tpublic static boundBooleanSwitch(title: string, defaultChecked: boolean, bindFn: (isChecked: boolean) => any, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={(e) => bindFn(e.currentTarget.checked)}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n}\n"],"sourceRoot":""}