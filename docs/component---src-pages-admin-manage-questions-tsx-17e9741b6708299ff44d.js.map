{"version":3,"sources":["webpack:///./src/pages/admin/manage-questions.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/api/api.ts","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/LayoutRoot.tsx","webpack:///./src/components/LayoutMain.tsx","webpack:///./src/components/Page.tsx","webpack:///./src/forms/index.tsx","webpack:///./src/layouts/admin.tsx","webpack:///./src/components/Container.tsx","webpack:///./src/styles/variables.ts"],"names":["QuestionForm","props","context","_this","_React$Component","call","this","state","questionText","questionShowIfAnswer","questionShowIf","questionId","questionType","isRequired","changed","onChange","render","_this2","otherQuestions","map","q","value","label","filter","length","react__WEBPACK_IMPORTED_MODULE_4__","createElement","_forms__WEBPACK_IMPORTED_MODULE_5__","a","boundChoices","setState","boundTextboxValue","Object","ucshared__WEBPACK_IMPORTED_MODULE_7__","isEmpty","boundCheckboxValue","Component","ManageQuestions","_this3","_React$Component2","data","selectedQuestion","newQuestion","componentDidMount","_this4","console","log","location","search","_api_api__WEBPACK_IMPORTED_MODULE_6__","d","getQuestions","then","componentWillReceiveProps","nextProps","_this5","_layouts_admin__WEBPACK_IMPORTED_MODULE_10__","_components_Page__WEBPACK_IMPORTED_MODULE_8__","_components_Container__WEBPACK_IMPORTED_MODULE_9__","row","i","key","__webpack_exports__","default","160","e","t","n","__webpack_require__","r","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","withPrefix","navigate","push","replace","navigateTo","_wait_for_route_change__WEBPACK_IMPORTED_MODULE_3__","c","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4___default","_parse_path__WEBPACK_IMPORTED_MODULE_5__","createContext","Consumer","staticQueryData","query","children","Error","propTypes","object","string","func","m","module","exports","BASE_PATH","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","parse","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","authToken","contentTypeHeader","fetchOptions","method","Content-Type","req","body","JSON","stringify","headers","url","format","AuthApiFetchParamCreator","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","prototype","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","runPOST","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","ResourceApiFp","ResourceApiFetchParamCreator","locationId","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesGET","availabilityRulesPOST","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","withContrast","ScheduleApiFetchParamCreator","skip","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerDELETE","appointmentHandlerGET","appointmentHandlerPOST","appointmentHandlerPUT","timeSlotsGET","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","_loader__WEBPACK_IMPORTED_MODULE_3__","ProdPageRenderer","_ref","pageResources","getResourcesForPathname","pathname","shape","171","173","175","177","179","react_emotion__WEBPACK_IMPORTED_MODULE_1__","StyledLayoutRoot","target","className","StyledPage","moment","formStyle","Row","react__WEBPACK_IMPORTED_MODULE_5__","Col","EditFormBase","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4___default","boundLabel","title","defaultValue","toString","formGroup","sm","sm3","ctrlLabel","sm9","boundTextbox","bindFn","placeHolder","readOnly","isDisabled","wrn","renderWarnings","disabled","maxLength","type","placeholder","style","backgroundColor","bindValFn","inputType","currentTarget","minWidth","choices","cc","choice","submitRow","actionText","submitButton","boundDate","isStart","start","end","react_datepicker__WEBPACK_IMPORTED_MODULE_6__","selected","selectsEnd","startDate","endDate","dateFormatCalendar","showMonthDropdown","showYearDropdown","val","vlc","toLowerCase","indexOf","boundTextarea","rows","boundTextareaValue","boundCheckbox","defaultChecked","checked","boundBooleanSwitch","insertBlock","detailBlock","react__WEBPACK_IMPORTED_MODULE_1__","gatsby__WEBPACK_IMPORTED_MODULE_3__","_components_LayoutRoot__WEBPACK_IMPORTED_MODULE_8__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","site","siteMetadata","meta","name","content","description","_components_LayoutMain__WEBPACK_IMPORTED_MODULE_9__","_public_static_d_2945440950_json__WEBPACK_IMPORTED_MODULE_0__","StyledContainer","index_esm","react"],"mappings":"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","file":"component---src-pages-admin-manage-questions-tsx-17e9741b6708299ff44d.js","sourcesContent":["import * as React from 'react'\nimport {EditFormBase} from '../../forms';\nimport * as Api from '../../api/api';\nimport {isEmpty} from \"ucshared\";\n\nimport Page from '../../components/Page'\nimport Container from '../../components/Container'\nimport AdminLayout from \"../../layouts/admin\";\n\ninterface IQuestionFormProps {\n\totherQuestions: Api.SurveyQuestion[];\n\tonChange: (value: Api.SurveyQuestion) => any;\n}\n\nclass QuestionForm extends React.Component<IQuestionFormProps, Api.SurveyQuestion>{\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\tquestionText: '',\n\t\t\tquestionShowIfAnswer: '',\n\t\t\tquestionShowIf: '',\n\t\t\tquestionId: '',\n\t\t\tquestionType: '',\n\t\t\tisRequired: false,\n\t\t};\n\t}\n\n\tpublic changed() {\n\t\tif (typeof this.props.onChange === 'function') {\n\t\t\tthis.props.onChange(this.state);\n\t\t}\n\t}\n\n\tpublic render() {\n\t\tconst otherQuestions = (this.props.otherQuestions || []).map((q) => (\n\t\t\t{ value: q.questionId || '', label: q.questionText || q.questionId || ''}\n\t\t)).filter((q) => q.value.length > 0 && q.label.length > 0);\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{EditFormBase.boundChoices(\n\t\t\t\t\t'Item Type',\n\t\t\t\t\t['Heading', 'Text', 'Yes/No', 'Choice'],\n\t\t\t\t\tthis.state.questionType || '',\n\t\t\t\t\t(questionType) => this.setState({questionType}, () => this.changed()))\n\t\t\t\t}\n\t\t\t\t{EditFormBase.boundTextboxValue(\n\t\t\t\t\t'Display Text',\n\t\t\t\t\tthis.state.questionText || '',\n\t\t\t\t\t(questionText) => this.setState({questionText}, () => this.changed()))\n\t\t\t\t}\n\t\t\t\t{this.state.questionType !== 'Heading' && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{EditFormBase.boundChoices(\n\t\t\t\t\t\t\t'Show If This Question...',\n\t\t\t\t\t\t\totherQuestions,\n\t\t\t\t\t\t\tthis.state.questionShowIf || '',\n\t\t\t\t\t\t\t(questionShowIf) => this.setState({questionShowIf}, () => this.changed()))\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{EditFormBase.boundTextboxValue(\n\t\t\t\t\t\t\t'has this value',\n\t\t\t\t\t\t\tthis.state.questionShowIfAnswer || '',\n\t\t\t\t\t\t\t(questionShowIfAnswer) => this.setState({questionShowIfAnswer}, () => this.changed()),\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tisEmpty(this.state.questionShowIf)\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{EditFormBase.boundCheckboxValue(\n\t\t\t\t\t\t\t'Required?',\n\t\t\t\t\t\t\tthis.state.isRequired || false,\n\t\t\t\t\t\t\t(isRequired) => this.setState({isRequired}))\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass ManageQuestions extends React.Component<any, {\n\tdata: Api.SurveyQuestion[],\n\tnewQuestion: Api.SurveyQuestion,\n\tselectedQuestion: Api.SurveyQuestion|null,\n}> {\n\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\tdata: [],\n\t\t\tselectedQuestion: null,\n\t\t\tnewQuestion: {\n\t\t\t\tquestionText: '',\n\t\t\t\tquestionShowIf: '',\n\t\t\t\tquestionShowIfAnswer: '',\n\t\t\t\tisRequired: false,\n\t\t\t},\n\t\t};\n\t}\n\n\tpublic componentDidMount() {\n\t\tconsole.log('welcome', this.props.location.search);\n\t\tnew Api.QuestionApi().getQuestions().then((data) => {\n\t\t\tconsole.log('got', data);\n\t\t\tthis.setState({data});\n\t\t});\n\t}\n\n\tpublic componentWillReceiveProps(nextProps) {\n\t\tconsole.log(nextProps);\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<AdminLayout>\n\t\t\t\t<Page>\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t<h1>Manage Questions</h1>\n\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>Item ID</th>\n\t\t\t\t\t\t\t\t<th>Display Text</th>\n\t\t\t\t\t\t\t\t<th>Type</th>\n\t\t\t\t\t\t\t\t<th>Actions</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{this.state.data.map((row, i) => (\n\t\t\t\t\t\t\t\t<tr key={(row.questionId || '') + i}>\n\t\t\t\t\t\t\t\t\t<td>{row.questionId}</td>\n\t\t\t\t\t\t\t\t\t<td>{row.questionText}</td>\n\t\t\t\t\t\t\t\t\t<td>{row.questionType}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t{/*<Link to={`${this.props.location.pathname}?id=${row.questionId}`}>Edit</Link>*/}\n\t\t\t\t\t\t\t\t\t\t<button>Delete</button>\n\t\t\t\t\t\t\t\t\t\t<button>↑</button>\n\t\t\t\t\t\t\t\t\t\t<button>↓</button>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\n\t\t\t\t\t\t<h3>New Question</h3>\n\t\t\t\t\t\t<QuestionForm\n\t\t\t\t\t\t\tonChange={(newQuestion) => this.setState({newQuestion})}\n\t\t\t\t\t\t\totherQuestions={this.state.data}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Container>\n\t\t\t\t</Page>\n\t\t\t</AdminLayout>\n\t\t);\n\t}\n}\n\nexport default ManageQuestions\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport { waitForRouteChange } from \"./wait-for-route-change\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  waitForRouteChange,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","/**\n * ideal MRI\n * Signup Center API\n *\n * OpenAPI spec version: v1\n * Contact: ben@herila.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as querystring from \"querystring\";\nimport * as url from \"url\";\n\nimport * as isomorphicFetch from \"isomorphic-fetch\";\nimport * as assign from \"core-js/library/fn/object/assign\";\n\ninterface Dictionary<T> { [index: string]: T; }\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\n\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\nexport class BaseAPI {\n    basePath: string;\n    fetch: FetchAPI;\n\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\n        this.basePath = basePath;\n        this.fetch = fetch;\n    }\n};\n\nexport interface ApiResultListAppointment {\n    \"value\"?: Array<Appointment>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListAvailabilityRule {\n    \"value\"?: Array<AvailabilityRule>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListSlotAvailabilityDate {\n    \"value\"?: Array<SlotAvailabilityDate>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface Appointment {\n    \"resourceId\"?: string;\n    \"serviceType\"?: string;\n    \"serviceLength\"?: number;\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"address1\"?: string;\n    \"address2\"?: string;\n    \"city\"?: string;\n    \"state\"?: string;\n    \"zip\"?: string;\n    \"height\"?: string;\n    \"weight\"?: string;\n    \"reminder\"?: number;\n    \"doctorName\"?: string;\n    \"doctorPhone\"?: string;\n    \"insuranceCarrier\"?: string;\n    \"insuranceGroupNumber\"?: string;\n    \"insurancePolicyNumber\"?: string;\n    \"insuranceVerified\"?: boolean;\n    \"priorAuthObtained\"?: boolean;\n    \"orderEnteredToRIS\"?: boolean;\n    \"patientWasCalled\"?: boolean;\n    \"confirmed\"?: boolean;\n    \"orderImageUrl\"?: string;\n    \"insuranceFrontUrl\"?: string;\n    \"insuranceBackUrl\"?: string;\n    \"surveyDataJson\"?: string;\n    \"safetyWarnings\"?: string;\n    \"approvedDate\"?: Date;\n    \"submittedDate\"?: Date;\n    \"confirmedDate\"?: Date;\n    \"birthday\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface AvailabilityRule {\n    \"priority\"?: number;\n    \"resourceID\"?: string;\n    \"onThisDay\"?: string;\n    \"startTime\"?: string;\n    \"endTime\"?: string;\n    \"comment\"?: string;\n    \"status\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface CustomerLead {\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"dob\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"serviceType\"?: string;\n    \"timeSlot\"?: string;\n    \"withContrast\"?: boolean;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface Location {\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface SlotAvailabilityDate {\n    \"date\"?: Date;\n    \"friendlyBegin\"?: string;\n    \"times\"?: Array<SlotAvailabilityTime>;\n}\n\nexport interface SlotAvailabilityTime {\n    \"time\"?: string;\n    \"resourceId\"?: string;\n    \"isHidden\"?: boolean;\n    \"isAvailable\"?: boolean;\n    \"isContrastAvailable\"?: boolean;\n    \"isContrastRequired\"?: boolean;\n    \"linkedAppointment\"?: Appointment;\n    \"slotId\"?: string;\n}\n\nexport interface Stack {\n    \"in\"?: string;\n    \"at\"?: string;\n}\n\nexport interface SurveyQuestion {\n    \"questionId\"?: string;\n    \"questionShowIf\"?: string;\n    \"questionShowIfAnswer\"?: string;\n    \"questionText\"?: string;\n    \"questionType\"?: string;\n    \"isRequired\"?: boolean;\n    \"isHidden\"?: boolean;\n    \"order\"?: number;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface TableResult {\n    \"result\"?: any;\n    \"httpStatusCode\"?: number;\n    \"etag\"?: string;\n}\n\nexport interface User {\n    \"apiKey\"?: string;\n    \"immutableId\"?: string;\n    \"referenceRowKey\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\n\n\n/**\n * AuthApi - fetch parameter creator\n */\nexport const AuthApiFetchParamCreator = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/auth`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * AuthApi - functional programming interface\n */\nexport const AuthApiFp = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * AuthApi - object-oriented interface\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * AuthApi - factory interface\n */\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Auth\n         * @param req\n         * @param authToken\n         */\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n            return AuthApiFp.auth(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * LeadGenApi - fetch parameter creator\n */\nexport const LeadGenApiFetchParamCreator = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * LeadGenApi - functional programming interface\n */\nexport const LeadGenApiFp = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * LeadGenApi - object-oriented interface\n */\nexport class LeadGenApi extends BaseAPI {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * LeadGenApi - factory interface\n */\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * PostQuestionApi - fetch parameter creator\n */\nexport const PostQuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * PostQuestionApi - functional programming interface\n */\nexport const PostQuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * PostQuestionApi - object-oriented interface\n */\nexport class PostQuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * PostQuestionApi - factory interface\n */\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         * @param req\n         */\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * QuestionApi - fetch parameter creator\n */\nexport const QuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * QuestionApi - functional programming interface\n */\nexport const QuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * QuestionApi - object-oriented interface\n */\nexport class QuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any) {\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * QuestionApi - factory interface\n */\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         */\n        getQuestions(options?: any) {\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ResourceApi - fetch parameter creator\n */\nexport const ResourceApiFetchParamCreator = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ResourceApi - functional programming interface\n */\nexport const ResourceApiFp = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ResourceApi - object-oriented interface\n */\nexport class ResourceApi extends BaseAPI {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ResourceApi - factory interface\n */\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param authToken\n         */\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ScheduleApi - fetch parameter creator\n */\nexport const ScheduleApiFetchParamCreator = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslots`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"length\": params[\"length\"],\n            \"locationId\": params[\"locationId\"],\n            \"skip\": params[\"skip\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ScheduleApi - functional programming interface\n */\nexport const ScheduleApiFp = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ScheduleApi - object-oriented interface\n */\nexport class ScheduleApi extends BaseAPI {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any) {\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ScheduleApi - factory interface\n */\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary TimeSlots\n         * @param authToken\n         * @param withContrast\n         * @param length\n         * @param locationId\n         */\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\n        },\n    };\n};\n\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathname(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import * as React from 'react'\nimport styled from 'react-emotion'\n\nconst StyledLayoutRoot = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`\n\ninterface LayoutRootProps {\n  className?: string\n}\n\nconst LayoutRoot: React.SFC<LayoutRootProps> = ({ children, className }) => (\n  <StyledLayoutRoot className={className}>{children}</StyledLayoutRoot>\n)\n\nexport default LayoutRoot\n","import * as React from 'react'\n// import styled from 'react-emotion'\n// const StyledLayoutMain = styled.main`\n//   display: flex;\n//   flex-direction: column;\n//   flex: 1;\n//\n\ninterface LayoutMainProps {\n  className?: string\n}\n\n// <StyledLayoutMain className={className}>{children}</StyledLayoutMain>\nconst LayoutMain: React.SFC<LayoutMainProps> = ({ children, className }) => (\n  <main className={className || \"white-section\"}>\n      <div className=\"vspace80 w-container\">\n          {children}\n      </div>\n  </main>\n);\n\nexport default LayoutMain\n","import * as React from 'react'\nimport styled from 'react-emotion'\n\nimport { dimensions } from '../styles/variables'\n\nconst StyledPage = styled.div`\n  display: block;\n  flex: 1;\n  position: relative;\n`\n\ninterface PageProps {\n  className?: string\n}\n\nconst Page: React.SFC<PageProps> = ({ children, className }) => <StyledPage className={className}>{children}</StyledPage>\n\nexport default Page\n","import * as React from 'react';\nimport DatePicker from 'react-datepicker';\nimport {isEmpty} from 'ucshared';\n\nconst moment = require('moment');\nconst formStyle = require('./formStyle.css');\n\nexport function formatAdminDate(date: any) {\n\treturn moment(date).format('MM/DD/YYYY');\n}\n\nconst Row = (props: any) => <div>{props.children}</div>;\nconst Col = (props: any) => <div>{props.children}</div>;\n\nexport class EditFormBase<TProps, TState> extends React.Component<TProps, TState> {\n\tpublic static formGroup = 'form-group';\n\tpublic static ctrlLabel = 'control-label';\n\tpublic static sm3 = '3';\n\tpublic static sm9 = '9';\n\tpublic static insertBlock = formStyle.insertBlock;\n\tpublic static detailBlock = formStyle.detailBlock;\n\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t}\n\n\tpublic static boundLabel(title: string, defaultValue: string | number | Date) {\n\t\tif (isEmpty(title)) {\n\t\t\treturn <span>{(defaultValue || 'null').toString()}</span>;\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{(defaultValue || 'null').toString()}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextbox(title: string, defaultValue: string | number | Date, bindFn: React.FormEventHandler<HTMLInputElement>, placeHolder?: string, readOnly?: boolean, isDisabled?: boolean) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextboxValue(title: string|null, defaultValue: string | number | Date, bindValFn: (value: string) => any, placeHolder?: string, readOnly?: boolean, isDisabled?: boolean, inputType?: string, className?: string) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName={\"form-control \" + className || ''}\n\t\t\t\t\t\ttype={inputType || 'text'}\n\t\t\t\t\t\tonChange={(e) => bindValFn(e.currentTarget.value)}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {minWidth: '40px'} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.boundTextboxValue(null, defaultValue, bindValFn, placeHolder, readOnly, isDisabled, inputType)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundChoices(title: string|null, choices: Array<{label?: string, value: string}|string>, defaultValue: string | number | Date, bindValFn: (value: string) => any, placeHolder?: string, isDisabled?: boolean) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\tconst cc = choices.map((choice) => (typeof choice === 'string') ? {value: choice} : choice);\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<select\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tonChange={(e) => bindValFn(e.currentTarget.value)}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\tstyle={!wrn ? {minWidth: '40px'} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"\">(none)</option>\n\t\t\t\t\t\t{cc.map((choice, i) => <option key={choice.value + i} value={choice.value}>{choice.label || choice.value}</option>)}\n\t\t\t\t\t</select>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.boundChoices(null, choices, defaultValue, bindValFn, placeHolder, isDisabled)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\n\tpublic static submitRow(actionText?: string) {\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}/>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.submitButton(actionText)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static submitButton(actionText?: string) {\n\t\treturn (\n\t\t\t<button type=\"submit\">{actionText || 'Submit'}</button>\n\t\t);\n\t}\n\n\tpublic static boundDate(title: string, bindFn: React.FormEventHandler<HTMLInputElement>, isStart: boolean, start?: Date, end?: Date, isDisabled?: boolean) {\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t<DatePicker\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tclassName={'form-control'}\n\t\t\t\t\t\tselected={isStart ? moment(start) : moment(end)}\n\t\t\t\t\t\tselectsEnd\n\t\t\t\t\t\tstartDate={start && moment(start)}\n\t\t\t\t\t\tendDate={end && moment(end)}\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tdateFormatCalendar={'MMM YYYY'}\n\t\t\t\t\t\tshowMonthDropdown\n\t\t\t\t\t\tshowYearDropdown\n\t\t\t\t\t/>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tprotected static renderWarnings(val: string|number|Date) {\n\t\tif (typeof val !== 'string') {\n\t\t\treturn this.renderWarnings(val.toString());\n\t\t}\n\t\tif (val) {\n\t\t\tconst vlc = val.toLowerCase();\n\t\t\tif (vlc.indexOf('included') > -1) {\n\t\t\t\treturn <div className=\"alert alert-error\"><b>Warning:</b> Consider removing term <em>included</em></div>;\n\t\t\t}\n\t\t\tif (vlc.indexOf('refund') > -1) {\n\t\t\t\treturn <div className=\"alert alert-error\"><b>Warning:</b> We don't offer refunds.</div>;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static boundTextarea(title: string, defaultValue: string | number, bindFn: React.FormEventHandler<HTMLTextAreaElement>) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<textarea className=\"form-control\" onChange={bindFn} value={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\t  style={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t\t  rows={5}/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextareaValue(title: string, defaultValue: string | number, bindFn: (value) => any) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<textarea className=\"form-control\"\n\t\t\t\t\t\t  onChange={(e) => bindFn(e.currentTarget.value)}\n\t\t\t\t\t\t  value={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\t  style={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t\t  rows={5}/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundCheckbox(title: string, defaultChecked: boolean, bindFn: React.FormEventHandler<HTMLInputElement>, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={bindFn}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n\n\tpublic static boundCheckboxValue(title: string, defaultChecked: boolean, bindFn: (isChecked: boolean) => any, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={(e) => bindFn(e.currentTarget.checked)}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n\n\tpublic static boundBooleanSwitch(title: string, defaultChecked: boolean, bindFn: (isChecked: boolean) => any, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={(e) => bindFn(e.currentTarget.checked)}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n}\n","import * as React from 'react'\nimport Helmet from 'react-helmet'\nimport {StaticQuery, graphql} from 'gatsby'\n\n// import 'modern-normalize'\n// import '../styles/normalize'\nimport '../styles/webflow.css'\nimport '../styles/webflow.grid.css'\nimport '../styles/animate.css'\nimport '../styles/tables.css'\n\nimport LayoutRoot from '../components/LayoutRoot'\nimport LayoutMain from '../components/LayoutMain'\n\ntype StaticQueryProps = {\n\tsite: {\n\t\tsiteMetadata: {\n\t\t\ttitle: string\n\t\t\tdescription: string\n\t\t}\n\t}\n}\n\nconst AdminLayout: React.SFC = ({children}) => (\n\t<StaticQuery\n\t\tquery={graphql`\n      query AdminLayoutQuery {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `}\n\t\trender={(data: StaticQueryProps) => (\n\t\t\t<LayoutRoot>\n\t\t\t\t<Helmet\n\t\t\t\t\ttitle={data.site.siteMetadata.title}\n\t\t\t\t\tmeta={[\n\t\t\t\t\t\t{name: 'description', content: data.site.siteMetadata.description},\n\t\t\t\t\t\t{name: 'keywords', content: 'gatsbyjs, gatsby, javascript, sample, something'}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<LayoutMain>{children}</LayoutMain>\n\t\t\t</LayoutRoot>\n\t\t)}\n\t/>\n)\n\nexport default AdminLayout\n","import * as React from 'react'\nimport styled from 'react-emotion'\n\nimport { widths } from '../styles/variables'\nimport { getEmSize } from '../styles/mixins'\n\nconst StyledContainer = styled.div`\n  position: relative;\n  margin-left: auto;\n  margin-right: auto;\n  width: auto;\n  max-width: ${getEmSize(widths.lg)}em;\n`\n\ninterface ContainerProps {\n  className?: string\n}\n\nconst Container: React.SFC<ContainerProps> = ({ children, className }) => (\n  <StyledContainer className={className}>{children}</StyledContainer>\n)\n\nexport default Container\n","/* tslint:disable:max-line-length */\n\nexport const colors = {\n  brand: '#663399',\n  lilac: '#9d7cbf',\n  accent: '#ffb238',\n  success: '#37b635',\n  warning: '#ec1818',\n  ui: {\n    bright: '#e0d6eb',\n    light: '#f5f3f7',\n    whisper: '#fbfafc'\n  },\n  code: '#fcf6f0',\n  gray: {\n    dark: 'hsla(270, 17.119554496%, 0%, 0.92)',\n    copy: 'hsla(270, 15.797828016000002%, 0%, 0.88)',\n    calm: 'rgba(0, 0, 0, 0.54)'\n  },\n  white: '#fff',\n  black: '#000'\n};\n\nexport const fonts = {\n  sansSerif:\n    '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", Arial, sans-serif',\n  serif: 'Georgia, \"Times New Roman\", Times, serif',\n  monospace: 'Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace, monospace'\n};\n\nexport const breakpoints = {\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200\n};\n\nexport const widths = {\n  md: 720,\n  lg: 960,\n  xl: 1140\n};\n\nexport const dimensions = {\n  fontSize: {\n    regular: 16,\n    large: 18\n  },\n  headingSizes: {\n    h1: 2.441,\n    h2: 1.953,\n    h3: 1.563,\n    h4: 1.25\n  },\n  lineHeight: {\n    regular: 1.45,\n    heading: 1.2\n  },\n  containerPadding: 1.5\n};\n\nexport const heights = {\n  header: 60\n};\n"],"sourceRoot":""}