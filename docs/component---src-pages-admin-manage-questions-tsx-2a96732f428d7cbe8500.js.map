{"version":3,"sources":["webpack:///./src/pages/admin/manage-questions.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/Header.tsx","webpack:///./src/components/LayoutRoot.tsx","webpack:///./src/components/LayoutMain.tsx","webpack:///./src/components/Footer.tsx","webpack:///./src/components/FooterNav.tsx","webpack:///./src/layouts/index.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/Page.tsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Container.tsx","webpack:///./src/styles/variables.ts","webpack:///./src/api/api.ts","webpack:///./src/forms/index.tsx"],"names":["QuestionForm","props","context","_this","_React$Component","call","this","state","questionText","questionShowIfAnswer","questionShowIf","questionId","questionType","isRequired","changed","onChange","render","_this2","otherQuestions","map","q","value","label","filter","length","react__WEBPACK_IMPORTED_MODULE_4__","createElement","_forms__WEBPACK_IMPORTED_MODULE_5__","a","boundChoices","setState","boundTextboxValue","Object","ucshared__WEBPACK_IMPORTED_MODULE_7__","isEmpty","boundCheckboxValue","Component","ManageQuestions","_this3","_React$Component2","data","selectedQuestion","newQuestion","componentDidMount","_this4","console","log","location","search","_api_api__WEBPACK_IMPORTED_MODULE_6__","b","getQuestions","then","componentWillReceiveProps","nextProps","_this5","_layouts__WEBPACK_IMPORTED_MODULE_10__","_components_Page__WEBPACK_IMPORTED_MODULE_8__","_components_Container__WEBPACK_IMPORTED_MODULE_9__","row","i","key","__webpack_exports__","default","h","159","e","t","n","__webpack_require__","r","d","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","withPrefix","navigate","push","replace","navigateTo","_wait_for_route_change__WEBPACK_IMPORTED_MODULE_3__","c","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4___default","_parse_path__WEBPACK_IMPORTED_MODULE_5__","createContext","Consumer","staticQueryData","query","children","Error","propTypes","object","string","func","components_Header","_ref","objectDestructuringEmpty_default","react","className","id","href","src","alt","data-collapse","data-animation","data-duration","role","StyledLayoutRoot","index_esm","target","components_LayoutRoot","components_LayoutMain","components_Footer","height","Helmet_default","type","integrity","crossOrigin","FooterNav","gatsby_browser_entry","title","site","siteMetadata","meta","name","content","description","_991718019","m","module","exports","react_emotion__WEBPACK_IMPORTED_MODULE_1__","StyledPage","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","_loader__WEBPACK_IMPORTED_MODULE_3__","ProdPageRenderer","pageResources","getResourcesForPathname","pathname","shape","177","179","181","184","StyledContainer","BASE_PATH","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","parse","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","authToken","contentTypeHeader","fetchOptions","method","Content-Type","req","body","JSON","stringify","headers","url","format","AuthApiFetchParamCreator","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","prototype","auth","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI5","ScheduleApiFp","withContrast","locationId","ScheduleApiFetchParamCreator","ScheduleApi","_BaseAPI6","_proto6","adminRulesDELETE","adminRulesGET","adminRulesPOST","adminRulesPUT","timeSlotsGET","userScheduleDELETE","userScheduleGET","userSchedulePOST","userSchedulePUT","moment","formStyle","Row","react__WEBPACK_IMPORTED_MODULE_5__","Col","EditFormBase","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4___default","boundLabel","defaultValue","toString","formGroup","sm","sm3","ctrlLabel","sm9","boundTextbox","bindFn","placeHolder","readOnly","isDisabled","wrn","renderWarnings","disabled","maxLength","placeholder","style","backgroundColor","bindValFn","inputType","currentTarget","minWidth","choices","cc","choice","submitRow","actionText","submitButton","boundDate","isStart","start","end","react_datepicker__WEBPACK_IMPORTED_MODULE_6__","selected","selectsEnd","startDate","endDate","dateFormatCalendar","showMonthDropdown","showYearDropdown","val","vlc","toLowerCase","indexOf","boundTextarea","rows","boundTextareaValue","boundCheckbox","defaultChecked","checked","boundBooleanSwitch","insertBlock","detailBlock"],"mappings":"wMAeMA,cACL,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAC3BA,EAAAC,EAAAC,KAAAC,KAAML,EAAOC,IAAbI,MACKC,OACJC,aAAc,GACdC,qBAAsB,GACtBC,eAAgB,GAChBC,WAAY,GACZC,aAAc,GACdC,eAR0BV,sCAYrBW,mBAC6B,mBAAxBR,KAAKL,MAAMc,UACrBT,KAAKL,MAAMc,SAAST,KAAKC,UAIpBS,kBAAS,IAAAC,EAAAX,KACTY,GAAkBZ,KAAKL,MAAMiB,oBAAsBC,IAAI,SAACC,GAAD,OAC1DC,MAAOD,EAAET,YAAc,GAAIW,MAAOF,EAAEZ,cAAgBY,EAAET,YAAc,MACpEY,OAAO,SAACH,GAAD,OAAOA,EAAEC,MAAMG,OAAS,GAAKJ,EAAEE,MAAME,OAAS,IAExD,OACCC,EAAAC,cAAA,WACEC,EAAAC,EAAaC,aACb,aACC,UAAW,OAAQ,SAAU,UAC9BvB,KAAKC,MAAMK,cAAgB,GAC3B,SAACA,GAAD,OAAkBK,EAAKa,UAAUlB,gBAAe,kBAAMK,EAAKH,cAE3Da,EAAAC,EAAaG,kBACb,eACAzB,KAAKC,MAAMC,cAAgB,GAC3B,SAACA,GAAD,OAAkBS,EAAKa,UAAUtB,gBAAe,kBAAMS,EAAKH,cAE/B,YAA5BR,KAAKC,MAAMK,cACXa,EAAAC,cAAA,WACEC,EAAAC,EAAaC,aACb,2BACAX,EACAZ,KAAKC,MAAMG,gBAAkB,GAC7B,SAACA,GAAD,OAAoBO,EAAKa,UAAUpB,kBAAiB,kBAAMO,EAAKH,cAE/Da,EAAAC,EAAaG,kBACb,iBACAzB,KAAKC,MAAME,sBAAwB,GACnC,SAACA,GAAD,OAA0BQ,EAAKa,UAAUrB,wBAAuB,kBAAMQ,EAAKH,aAC3E,MAEAkB,OAAAC,EAAAC,QAAAF,CAAQ1B,KAAKC,MAAMG,iBAEnBiB,EAAAC,EAAaO,mBACb,YACA7B,KAAKC,MAAMM,eACX,SAACA,GAAD,OAAgBI,EAAKa,UAAUjB,sBAxDhCb,CAAqByB,EAAAW,WAiErBC,cAML,SAAAA,EAAYpC,EAAOC,GAAS,IAAAoC,EAAA,OAC3BA,EAAAC,EAAAlC,KAAAC,KAAML,EAAOC,IAAbI,MACKC,OACJiC,QACAC,iBAAkB,KAClBC,aACClC,aAAc,GACdE,eAAgB,GAChBD,qBAAsB,GACtBI,gBATyByB,sCAcrBK,6BAAoB,IAAAC,EAAAtC,KAC1BuC,QAAQC,IAAI,UAAWxC,KAAKL,MAAM8C,SAASC,aACvCC,EAAAC,GAAkBC,eAAeC,KAAK,SAACZ,GAC1CK,QAAQC,IAAI,MAAON,GACnBI,EAAKd,UAAUU,cAIVa,mCAA0BC,GAChCT,QAAQC,IAAIQ,MAGNtC,kBAAS,IAAAuC,EAAAjD,KACf,OACCmB,EAAAC,cAAC8B,EAAA5B,EAAD,KACCH,EAAAC,cAAC+B,EAAA7B,EAAD,KACCH,EAAAC,cAACgC,EAAA9B,EAAD,KACCH,EAAAC,cAAA,8BACAD,EAAAC,cAAA,aACCD,EAAAC,cAAA,aACAD,EAAAC,cAAA,UACCD,EAAAC,cAAA,qBACAD,EAAAC,cAAA,0BACAD,EAAAC,cAAA,kBACAD,EAAAC,cAAA,uBAGDD,EAAAC,cAAA,aACCpB,KAAKC,MAAMiC,KAAKrB,IAAI,SAACwC,EAAKC,GAAN,OACpBnC,EAAAC,cAAA,MAAImC,KAAMF,EAAIhD,YAAc,IAAMiD,GACjCnC,EAAAC,cAAA,UAAKiC,EAAIhD,YACTc,EAAAC,cAAA,UAAKiC,EAAInD,cACTiB,EAAAC,cAAA,UAAKiC,EAAI/C,cACTa,EAAAC,cAAA,UAECD,EAAAC,cAAA,wBACAD,EAAAC,cAAA,mBACAD,EAAAC,cAAA,yBAOJD,EAAAC,cAAA,0BACAD,EAAAC,cAAC1B,GACAe,SAAU,SAAC2B,GAAD,OAAiBa,EAAKzB,UAAUY,iBAC1CxB,eAAgBZ,KAAKC,MAAMiC,aAnE5BH,CAAwBZ,EAAAW,WA4Ef0B,EAAAC,QAAAC,GAAAC,IAAA,SAAAC,EAAAC,EAAAC,GAAA,aC5JfC,EAAAC,EAAAR,GAAAO,EAAAE,EAAAT,EAAA,4BAAAU,IAAAH,EAAAE,EAAAT,EAAA,uCAAAW,IAAAJ,EAAAE,EAAAT,EAAA,gCAAAY,IAAA,IAAAC,EAAAN,EAAA,GAAAO,EAAAP,EAAAD,EAAAO,GAAAE,EAAAR,EAAA,GAAAS,EAAAT,EAAAD,EAAAS,GAAAE,EAAAV,EAAA,KAAAW,EAAAX,EAAAD,EAAAW,GAAAV,EAAAE,EAAAT,EAAA,yBAAAkB,EAAApD,IAAAyC,EAAAE,EAAAT,EAAA,+BAAAiB,EAAAE,aAAAZ,EAAAE,EAAAT,EAAA,6BAAAiB,EAAAG,WAAAb,EAAAE,EAAAT,EAAA,yBAAAiB,EAAAI,OAAAd,EAAAE,EAAAT,EAAA,4BAAAiB,EAAAK,UAAAf,EAAAE,EAAAT,EAAA,+BAAAiB,EAAAM,aAAA,IAAAC,EAAAjB,EAAA,IAAAA,EAAAE,EAAAT,EAAA,uCAAAwB,EAAAC,IAAA,IAAAC,EAAAnB,EAAA,KAAAoB,EAAApB,EAAAD,EAAAoB,GAAAnB,EAAAE,EAAAT,EAAA,iCAAA2B,EAAA7D,IAAA,IAAA8D,EAAArB,EAAA,IAAAA,EAAAE,EAAAT,EAAA,8BAAA4B,EAAA9D,IAaA,IAAM6C,EAAqBG,EAAAhD,EAAM+D,kBAE3BjB,EAAc,SAAAzE,GAAK,OACvB2E,EAAAhD,EAAAF,cAAC+C,EAAmBmB,SAApB,KACG,SAAAC,GACC,OACE5F,EAAMuC,MACLqD,EAAgB5F,EAAM6F,QAAUD,EAAgB5F,EAAM6F,OAAOtD,MAEtDvC,EAAMe,QAAUf,EAAM8F,UAC5B9F,EAAMuC,KAAOvC,EAAMuC,KAAKA,KAAOqD,EAAgB5F,EAAM6F,OAAOtD,MAGvDoC,EAAAhD,EAAAF,cAAA,uCAaf,SAAS8C,IACP,MAAM,IAAIwB,MACR,gVATJtB,EAAYuB,WACVzD,KAAMsC,EAAAlD,EAAUsE,OAChBJ,MAAOhB,EAAAlD,EAAUuE,OAAOtF,WACxBG,OAAQ8D,EAAAlD,EAAUwE,KAClBL,SAAUjB,EAAAlD,EAAUwE,yICQPC,EAhCe,SAAAC,GAAA,OAAAC,IAAAD,GAC7BE,EAAA9E,cAAA,cACC8E,EAAA9E,cAAA,OAAK+E,UAAU,YACdD,EAAA9E,cAAA,OAAKgF,GAAG,+BAA+BD,UAAU,kBAChDD,EAAA9E,cAAA,OAAK+E,UAAU,uBACdD,EAAA9E,cAAA,OAAK+E,UAAU,iCAAf,UACAD,EAAA9E,cAAA,OAAK+E,UAAU,4BAA2BD,EAAA9E,cAAA,KAAGiF,KAAK,mBACtCF,UAAU,SADoB,kBAG3CD,EAAA9E,cAAA,KAAGiF,KAAK,YAAYF,UAAU,YAA9B,oBACDD,EAAA9E,cAAA,KAAGiF,KAAK,IAAID,GAAG,+BAA+BD,UAAU,gCAA+BD,EAAA9E,cAAA,OACtFkF,IAAI,oGACJC,IAAI,GAAGJ,UAAU,aAClBD,EAAA9E,cAAA,OAAKoF,gBAAc,SAASC,iBAAe,UAAUC,gBAAc,MAAMN,GAAG,+BAC1ED,UAAU,gBACXD,EAAA9E,cAAA,OAAKuF,KAAK,aAAaR,UAAU,8BAA6BD,EAAA9E,cAAA,KAAGiF,KAAK,iBACrDF,UAAU,sCADmC,iBAEhDD,EAAA9E,cAAA,KAAGiF,KAAK,kBAAkBF,UAAU,sCAApC,iBACLD,EAAA9E,cAAA,KAAGiF,KAAK,kBAAkBF,UAAU,sCAApC,kBACED,EAAA9E,cAAA,KAAGiF,KAAK,yBACdF,UAAU,sCADJ,uBACoED,EAAA9E,cAAA,KAC9EiF,KAAK,kBAAkBF,UAAU,sCAD6C,kBACUD,EAAA9E,cAAA,KACxFiF,KAAK,eAAeF,UAAU,sCAD0D,YAEzFD,EAAA9E,cAAA,OAAK+E,UAAU,yCACdD,EAAA9E,cAAA,OAAK+E,UAAU,uBAIlBD,EAAA9E,cAAA,OAAK+E,UAAU,cAAf,OCrCIS,EAAmBlF,OAAAmF,EAAAvF,EAAAI,CAAH,OAAAoF,OAAA,YAAGpF,CAAH,wDAcPqF,EAJgC,SAAAf,GAAA,IAAGP,EAAHO,EAAGP,SAAUU,EAAbH,EAAaG,UAAb,OAC7CD,EAAA9E,cAACwF,GAAiBT,UAAWA,GAAYV,ICO5BuB,EARgC,SAAAhB,GAAA,IAAGP,EAAHO,EAAGP,SAAUU,EAAbH,EAAaG,UAAb,OAC7CD,EAAA9E,cAAA,QAAM+E,UAAWA,GAAa,iBAC1BD,EAAA9E,cAAA,OAAK+E,UAAU,wBACVV,KCSIwB,EAtBe,SAAAjB,GAAA,OAAAC,IAAAD,GAC7BE,EAAA9E,cAAA,UAAQ+E,UAAU,iCACjBD,EAAA9E,cAAA,OAAK+E,UAAU,cACdD,EAAA9E,cAAA,OAAK+E,UAAU,uBACdD,EAAA9E,cAAA,MAAI+E,UAAU,iCAAgCD,EAAA9E,cAAA,KAAGiF,KAAK,oBAAR,QAA9C,OACAH,EAAA9E,cAAA,MAAI+E,UAAU,4BAA2BD,EAAA9E,cAAA,KAAGiF,KAAK,mBAAmBF,UAAU,SAArC,kBAG1CD,EAAA9E,cAAA,KAAGiF,KAAK,YAAYF,UAAU,gBAA9B,oBACDD,EAAA9E,cAAA,OAAK+E,UAAU,cAAaD,EAAA9E,cAAA,OAC3BkF,IAAI,oGACJY,OAAO,KAAKX,IAAI,GAAGJ,UAAU,iBAAgBD,EAAA9E,cAAA,KAAGiF,KAAK,8BAAR,6BAE9CH,EAAA9E,cAAC+F,EAAA7F,EAAD,KACC4E,EAAA9E,cAAA,UAAQkF,IAAI,8CAA8Cc,KAAK,kBAC7DC,UAAU,sDAAsDC,YAAY,cAC9EpB,EAAA9E,cAAA,UAAQkF,IAAI,qFACVc,KAAK,uBCkBKG,EApCe,SAAAvB,GAAA,OAAAC,IAAAD,GAC7BE,EAAA9E,cAAA,WAAS+E,UAAU,eAClBD,EAAA9E,cAAA,OAAK+E,UAAU,eACdD,EAAA9E,cAAA,OAAK+E,UAAU,wBAAuBD,EAAA9E,cAAA,KAAGiF,KAAK,iBAAiBD,GAAG,+BACvDD,UAAU,gCAA+BD,EAAA9E,cAAA,OACnDkF,IAAI,4FAA4FC,IAAI,GACpGJ,UAAU,qBACVD,EAAA9E,cAAA,OAAKgF,GAAG,gCAAR,kBACGF,EAAA9E,cAAA,KAAGiF,KAAK,kBAAkBD,GAAG,+BAC7BD,UAAU,gCAA+BD,EAAA9E,cAAA,OAC5CkF,IAAI,+FACJC,IAAI,GAAGJ,UAAU,qBACjBD,EAAA9E,cAAA,8BACG8E,EAAA9E,cAAA,KAAGiF,KAAK,iBAAiBD,GAAG,+BAA+BD,UAAU,gCAA+BD,EAAA9E,cAAA,OACvGkF,IAAI,0GACJC,IAAI,GAAGJ,UAAU,qBACjBD,EAAA9E,cAAA,6BACG8E,EAAA9E,cAAA,KAAGiF,KAAK,kBAAkBD,GAAG,+BAC7BD,UAAU,gCAA+BD,EAAA9E,cAAA,OAC5CkF,IAAI,kGACJC,IAAI,GAAGJ,UAAU,qBACjBD,EAAA9E,cAAA,8BACG8E,EAAA9E,cAAA,KAAGiF,KAAK,yBAAyBD,GAAG,+BACpCD,UAAU,gCAA+BD,EAAA9E,cAAA,OAC5CkF,IAAI,gGACJC,IAAI,GAAGJ,UAAU,qBACjBD,EAAA9E,cAAA,mCACG8E,EAAA9E,cAAA,KAAGiF,KAAK,eAAeD,GAAG,+BAA+BD,UAAU,gCAA+BD,EAAA9E,cAAA,OACrGkF,IAAI,kGACJC,IAAI,GAAGJ,UAAU,qBACjBD,EAAA9E,cAAA,2BCuBWoC,EAAAlC,EA9BgB,SAAA0E,GAAA,IAAEP,EAAFO,EAAEP,SAAF,OAC9BS,EAAA9E,cAACoG,EAAApD,aACAoB,MAAK,YAUL9E,OAAQ,SAACwB,GAAD,OACPgE,EAAA9E,cAAC2F,EAAD,KACCb,EAAA9E,cAAC+F,EAAA7F,GACAmG,MAAOvF,EAAKwF,KAAKC,aAAaF,MAC9BG,OACEC,KAAM,cAAeC,QAAS5F,EAAKwF,KAAKC,aAAaI,cACrDF,KAAM,WAAYC,QAAS,sDAG9B5B,EAAA9E,cAAC2E,EAAD,MACAG,EAAA9E,cAAC4F,EAAD,KAAavB,GACbS,EAAA9E,cAACmG,EAAD,MACArB,EAAA9E,cAAC6F,EAAD,QAvBH/E,KAAA8F,0BC1BD,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWlE,EAAQ,OALRkE,EAAExE,SAAYwE,oCCA/C,IAAA5D,EAAAN,EAAA,GAAAqE,EAAArE,EAAA,KAKMsE,EAAa3G,OAAA0G,EAAA9G,EAAAI,CAAH,OAAAoF,OAAA,YAAGpF,CAAH,2CAYD8B,EAAAlC,EAFoB,SAAA0E,GAAA,IAAGP,EAAHO,EAAGP,SAAUU,EAAbH,EAAaG,UAAb,OAA6B9B,EAAAjD,cAACiH,GAAWlC,UAAWA,GAAYV,wICfnG1B,EAAAC,EAAAR,GAAA,IAAAa,EAAAN,EAAA,GAAAO,EAAAP,EAAAD,EAAAO,GAAAE,EAAAR,EAAA,GAAAS,EAAAT,EAAAD,EAAAS,GAAA+D,EAAAvE,EAAA,IAAAwE,EAAAxE,EAAA,GAMMyE,EAAmB,SAAAxC,GAAkB,IAAfvD,EAAeuD,EAAfvD,SACpBgG,EAAgBF,EAAA9E,QAAOiF,wBAAwBjG,EAASkG,UAC9D,OAAOrE,EAAAhD,EAAMF,cAAckH,EAAAhH,GACzBmB,WACAgG,mBAIJD,EAAiB7C,WACflD,SAAU+B,EAAAlD,EAAUsH,OAClBD,SAAUnE,EAAAlD,EAAUuE,OAAOtF,aAC1BA,YAGUiD,EAAAC,QAAAwB,GAAA4D,IAAA,SAAAjF,EAAAC,EAAAC,KAAAgF,IAAA,SAAAlF,EAAAC,EAAAC,KAAAiF,IAAA,SAAAnF,EAAAC,EAAAC,KAAAkF,IAAA,SAAApF,EAAAC,EAAAC,GAAA,iBAAAxC,EAAAwC,EAAA,GAAAE,EAAAF,EAAA,KCdTmF,EAAkBvH,OAAAmF,EAAAvF,EAAAI,CAAH,OAAAoF,OAAA,YAAGpF,CAAH,6ECkCf,GDlCe,OAgBN8B,EAAAlC,EAJ8B,SAAA0E,GAAA,IAAGP,EAAHO,EAAGP,SAAUU,EAAbH,EAAaG,UAAb,OAC3CD,EAAA9E,cAAC6H,GAAgB9C,UAAWA,GAAYV,oMEEpCyD,EAAY,oCAAoCpE,QAAQ,OAAQ,IAOzDqE,EAIT,SAAYC,EAAmCC,YAAnCD,MAAkBE,YAAiBD,MAAmBH,GAAWlJ,KAH7EqJ,gBAG6ErJ,KAF7EoJ,aAGIpJ,KAAKqJ,SAAWA,EAChBrJ,KAAKoJ,MAAQA,GA6JRG,EAAY,SAOhBC,EAAkDC,GACnD,IAAMC,EAzC0B,SAO/BF,EAAkDC,GACnD,IACIE,EAASC,EAAAC,MADA,gBAEbF,EAAOnE,MAAQsE,KAAWH,EAAOnE,OAC7BuE,UAAaP,EAAMO,YAEvB,IAEIC,EAFAC,EAA4BH,MAAaI,OAAQ,QAAUT,GAU/D,OAPAO,GAAsBG,eAAgB,oBAClCX,EAAMY,MACNH,EAAaI,KAAOC,KAAKC,UAAUf,EAAMY,UAEzCJ,IACAC,EAAaO,QAAUV,KAAWE,EAAmBC,EAAaO,WAGlEC,IAAKb,EAAAc,OAAWf,GAChBF,QAASQ,GAgBKU,CAA8BnB,EAAQC,GACxD,OAAO,SAACL,EAAmCC,GACvC,gBADID,MAAkBE,YAAiBD,MAAmBH,GACnDE,EAAMC,EAAWK,EAAUe,IAAKf,EAAUD,SAAS3G,KAAK,SAAC8H,GAC5D,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC5C,OAAOD,EAASE,OAEhB,MAAMF,MAUbG,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAC,MAAAjL,KAAAkL,YAAAlL,KAAA,OAAAmL,IAAAJ,EAAAC,GAAAD,EAAAK,UAOIC,KAPJ,SAOS7B,EAAkDC,GACnD,OAAOF,EAAeC,EAAQC,EAAvBF,CAAgCvJ,KAAKoJ,MAAOpJ,KAAKqJ,WARhE0B,EAAA,CAA6B5B,GA8ahBmC,EAAgB,SAKZ7B,GACT,IAAMC,EA9B8B,SAK3BD,GACT,IACIE,EAASC,EAAAC,MADA,oBAETI,EAA4BH,MAAaI,OAAQ,OAAST,GAE1DO,KAIJ,OAHIA,IACAC,EAAaO,QAAUV,KAAWE,EAAmBC,EAAaO,WAGlEC,IAAKb,EAAAc,OAAWf,GAChBF,QAASQ,GAcKsB,CAA0C9B,GAC5D,OAAO,SAACL,EAAmCC,GACvC,gBADID,MAAkBE,YAAiBD,MAAmBH,GACnDE,EAAMC,EAAWK,EAAUe,IAAKf,EAAUD,SAAS3G,KAAK,SAAC8H,GAC5D,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC5C,OAAOD,EAASE,OAEhB,MAAMF,MAUbY,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAR,MAAAjL,KAAAkL,YAAAlL,KAAA,OAAAmL,IAAAK,EAAAC,GAAAD,EAAAJ,UAKIvI,aALJ,SAKiB4G,GACT,OAAO6B,EAA2B7B,EAA3B6B,CAAoCtL,KAAKoJ,MAAOpJ,KAAKqJ,WANpEmC,EAAA,CAAiCrC,GAiSpBuC,EAAgB,SAQRlC,EAAgFC,GAC7F,IAAMC,EA7Q8B,SAQvBF,EAAgFC,GAC7F,IACIE,EAASC,EAAAC,MADA,0BAEbF,EAAOnE,MAAQsE,KAAWH,EAAOnE,OAC7BmG,aAAgBnC,EAAMmC,aACtBC,WAAcpC,EAAMoC,aAExB,IAEI5B,EAFAC,EAA4BH,MAAaI,OAAQ,UAAYT,GAUjE,OAPAO,GAAsBG,eAAgB,oBAClCX,EAAMY,MACNH,EAAaI,KAAOC,KAAKC,UAAUf,EAAMY,UAEzCJ,IACAC,EAAaO,QAAUV,KAAWE,EAAmBC,EAAaO,WAGlEC,IAAKb,EAAAc,OAAWf,GAChBF,QAASQ,GAkPK4B,CAA8CrC,EAAQC,GACxE,OAAO,SAACL,EAAmCC,GACvC,gBADID,MAAkBE,YAAiBD,MAAmBH,GACnDE,EAAMC,EAAWK,EAAUe,IAAKf,EAAUD,SAAS3G,KAAK,SAAC8H,GAC5D,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC5C,OAAOD,EAASE,OAEhB,MAAMF,MAfbc,EAAgB,SA0BXlC,EAA+DC,GACzE,IAAMC,EA/R8B,SAoC1BF,EAA+DC,GACzE,IACIE,EAASC,EAAAC,MADA,0BAEbF,EAAOnE,MAAQsE,KAAWH,EAAOnE,OAC7BmG,aAAgBnC,EAAMmC,aACtBC,WAAcpC,EAAMoC,aAExB,IAAI3B,EAA4BH,MAAaI,OAAQ,OAAST,GAE1DO,KAIJ,OAHIA,IACAC,EAAaO,QAAUV,KAAWE,EAAmBC,EAAaO,WAGlEC,IAAKb,EAAAc,OAAWf,GAChBF,QAASQ,GA4OK4B,CAA2CrC,EAAQC,GACrE,OAAO,SAACL,EAAmCC,GACvC,gBADID,MAAkBE,YAAiBD,MAAmBH,GACnDE,EAAMC,EAAWK,EAAUe,IAAKf,EAAUD,SAAS3G,KAAK,SAAC8H,GAC5D,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC5C,OAAOD,EAASE,OAEhB,MAAMF,MAjCbc,EAAgB,SA6CVlC,EAAgFC,GAC3F,IAAMC,EAlT8B,SA6DzBF,EAAgFC,GAC3F,IACIE,EAASC,EAAAC,MADA,0BAEbF,EAAOnE,MAAQsE,KAAWH,EAAOnE,OAC7BmG,aAAgBnC,EAAMmC,aACtBC,WAAcpC,EAAMoC,aAExB,IAEI5B,EAFAC,EAA4BH,MAAaI,OAAQ,QAAUT,GAU/D,OAPAO,GAAsBG,eAAgB,oBAClCX,EAAMY,MACNH,EAAaI,KAAOC,KAAKC,UAAUf,EAAMY,UAEzCJ,IACAC,EAAaO,QAAUV,KAAWE,EAAmBC,EAAaO,WAGlEC,IAAKb,EAAAc,OAAWf,GAChBF,QAASQ,GAkOK4B,CAA4CrC,EAAQC,GACtE,OAAO,SAACL,EAAmCC,GACvC,gBADID,MAAkBE,YAAiBD,MAAmBH,GACnDE,EAAMC,EAAWK,EAAUe,IAAKf,EAAUD,SAAS3G,KAAK,SAAC8H,GAC5D,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC5C,OAAOD,EAASE,OAEhB,MAAMF,MApDbc,EAAgB,SAgEXlC,EAAgFC,GAC1F,IAAMC,EArU8B,SA0F1BF,EAAgFC,GAC1F,IACIE,EAASC,EAAAC,MADA,0BAEbF,EAAOnE,MAAQsE,KAAWH,EAAOnE,OAC7BmG,aAAgBnC,EAAMmC,aACtBC,WAAcpC,EAAMoC,aAExB,IAEI5B,EAFAC,EAA4BH,MAAaI,OAAQ,OAAST,GAU9D,OAPAO,GAAsBG,eAAgB,oBAClCX,EAAMY,MACNH,EAAaI,KAAOC,KAAKC,UAAUf,EAAMY,UAEzCJ,IACAC,EAAaO,QAAUV,KAAWE,EAAmBC,EAAaO,WAGlEC,IAAKb,EAAAc,OAAWf,GAChBF,QAASQ,GAwNK4B,CAA2CrC,EAAQC,GACrE,OAAO,SAACL,EAAmCC,GACvC,gBADID,MAAkBE,YAAiBD,MAAmBH,GACnDE,EAAMC,EAAWK,EAAUe,IAAKf,EAAUD,SAAS3G,KAAK,SAAC8H,GAC5D,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC5C,OAAOD,EAASE,OAEhB,MAAMF,MAvEbc,EAAgB,SAkFZlC,EAA+DC,GACxE,IAAMC,EAvV8B,SAsH3BF,EAA+DC,GACxE,IACIE,EAASC,EAAAC,MADA,qBAEbF,EAAOnE,MAAQsE,KAAWH,EAAOnE,OAC7BmG,aAAgBnC,EAAMmC,aACtBC,WAAcpC,EAAMoC,aAExB,IAAI3B,EAA4BH,MAAaI,OAAQ,OAAST,GAE1DO,KAIJ,OAHIA,IACAC,EAAaO,QAAUV,KAAWE,EAAmBC,EAAaO,WAGlEC,IAAKb,EAAAc,OAAWf,GAChBF,QAASQ,GAkNK4B,CAA0CrC,EAAQC,GACpE,OAAO,SAACL,EAAmCC,GACvC,gBADID,MAAkBE,YAAiBD,MAAmBH,GACnDE,EAAMC,EAAWK,EAAUe,IAAKf,EAAUD,SAAS3G,KAAK,SAAC8H,GAC5D,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC5C,OAAOD,EAASE,OAEhB,MAAMF,MAzFbc,EAAgB,SAsGNlC,EAAuGC,GACtH,IAAMC,EA3W8B,SAgJrBF,EAAuGC,GACtH,IACIE,EAASC,EAAAC,MADA,uBAEbF,EAAOnE,MAAQsE,KAAWH,EAAOnE,OAC7BmG,aAAgBnC,EAAMmC,aACtBC,WAAcpC,EAAMoC,WACpBlJ,OAAU8G,EAAM9G,SAEpB,IAEIsH,EAFAC,EAA4BH,MAAaI,OAAQ,UAAYT,GAUjE,OAPAO,GAAsBG,eAAgB,oBAClCX,EAAMY,MACNH,EAAaI,KAAOC,KAAKC,UAAUf,EAAMY,UAEzCJ,IACAC,EAAaO,QAAUV,KAAWE,EAAmBC,EAAaO,WAGlEC,IAAKb,EAAAc,OAAWf,GAChBF,QAASQ,GAuMK4B,CAAgDrC,EAAQC,GAC1E,OAAO,SAACL,EAAmCC,GACvC,gBADID,MAAkBE,YAAiBD,MAAmBH,GACnDE,EAAMC,EAAWK,EAAUe,IAAKf,EAAUD,SAAS3G,KAAK,SAAC8H,GAC5D,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC5C,OAAOD,EAASE,OAEhB,MAAMF,MA7Gbc,EAAgB,SAyHTlC,EAAkFC,GAC9F,IAAMC,EA9X8B,SA8KxBF,EAAkFC,GAC9F,IACIE,EAASC,EAAAC,MADA,uBAEbF,EAAOnE,MAAQsE,KAAWH,EAAOnE,OAC7BmG,aAAgBnC,EAAMmC,aACtBC,WAAcpC,EAAMoC,WACpBlJ,OAAU8G,EAAM9G,SAEpB,IAAIuH,EAA4BH,MAAaI,OAAQ,OAAST,GAE1DO,KAIJ,OAHIA,IACAC,EAAaO,QAAUV,KAAWE,EAAmBC,EAAaO,WAGlEC,IAAKb,EAAAc,OAAWf,GAChBF,QAASQ,GAgMK4B,CAA6CrC,EAAQC,GACvE,OAAO,SAACL,EAAmCC,GACvC,gBADID,MAAkBE,YAAiBD,MAAmBH,GACnDE,EAAMC,EAAWK,EAAUe,IAAKf,EAAUD,SAAS3G,KAAK,SAAC8H,GAC5D,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC5C,OAAOD,EAASE,OAEhB,MAAMF,MAhIbc,EAAgB,SA6IRlC,EAAuGC,GACpH,IAAMC,EAlZ8B,SAyMvBF,EAAuGC,GACpH,IACIE,EAASC,EAAAC,MADA,uBAEbF,EAAOnE,MAAQsE,KAAWH,EAAOnE,OAC7BmG,aAAgBnC,EAAMmC,aACtBC,WAAcpC,EAAMoC,WACpBlJ,OAAU8G,EAAM9G,SAEpB,IAEIsH,EAFAC,EAA4BH,MAAaI,OAAQ,QAAUT,GAU/D,OAPAO,GAAsBG,eAAgB,oBAClCX,EAAMY,MACNH,EAAaI,KAAOC,KAAKC,UAAUf,EAAMY,UAEzCJ,IACAC,EAAaO,QAAUV,KAAWE,EAAmBC,EAAaO,WAGlEC,IAAKb,EAAAc,OAAWf,GAChBF,QAASQ,GAqLK4B,CAA8CrC,EAAQC,GACxE,OAAO,SAACL,EAAmCC,GACvC,gBADID,MAAkBE,YAAiBD,MAAmBH,GACnDE,EAAMC,EAAWK,EAAUe,IAAKf,EAAUD,SAAS3G,KAAK,SAAC8H,GAC5D,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC5C,OAAOD,EAASE,OAEhB,MAAMF,MApJbc,EAAgB,SAiKTlC,EAAuGC,GACnH,IAAMC,EAta8B,SAwOxBF,EAAuGC,GACnH,IACIE,EAASC,EAAAC,MADA,uBAEbF,EAAOnE,MAAQsE,KAAWH,EAAOnE,OAC7BmG,aAAgBnC,EAAMmC,aACtBC,WAAcpC,EAAMoC,WACpBlJ,OAAU8G,EAAM9G,SAEpB,IAEIsH,EAFAC,EAA4BH,MAAaI,OAAQ,OAAST,GAU9D,OAPAO,GAAsBG,eAAgB,oBAClCX,EAAMY,MACNH,EAAaI,KAAOC,KAAKC,UAAUf,EAAMY,UAEzCJ,IACAC,EAAaO,QAAUV,KAAWE,EAAmBC,EAAaO,WAGlEC,IAAKb,EAAAc,OAAWf,GAChBF,QAASQ,GA0KK4B,CAA6CrC,EAAQC,GACvE,OAAO,SAACL,EAAmCC,GACvC,gBADID,MAAkBE,YAAiBD,MAAmBH,GACnDE,EAAMC,EAAWK,EAAUe,IAAKf,EAAUD,SAAS3G,KAAK,SAAC8H,GAC5D,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC5C,OAAOD,EAASE,OAEhB,MAAMF,MAUbkB,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAd,MAAAjL,KAAAkL,YAAAlL,KAAAmL,IAAAW,EAAAC,GAAA,IAAAC,EAAAF,EAAAV,UAAA,OAAAY,EAQIC,iBARJ,SAQqBzC,EAAgFC,GAC7F,OAAOiC,EAA+BlC,EAAQC,EAAvCiC,CAAgD1L,KAAKoJ,MAAOpJ,KAAKqJ,WAThF2C,EAiBIE,cAjBJ,SAiBkB1C,EAA+DC,GACzE,OAAOiC,EAA4BlC,EAAQC,EAApCiC,CAA6C1L,KAAKoJ,MAAOpJ,KAAKqJ,WAlB7E2C,EA2BIG,eA3BJ,SA2BmB3C,EAAgFC,GAC3F,OAAOiC,EAA6BlC,EAAQC,EAArCiC,CAA8C1L,KAAKoJ,MAAOpJ,KAAKqJ,WA5B9E2C,EAqCII,cArCJ,SAqCkB5C,EAAgFC,GAC1F,OAAOiC,EAA4BlC,EAAQC,EAApCiC,CAA6C1L,KAAKoJ,MAAOpJ,KAAKqJ,WAtC7E2C,EA8CIK,aA9CJ,SA8CiB7C,EAA+DC,GACxE,OAAOiC,EAA2BlC,EAAQC,EAAnCiC,CAA4C1L,KAAKoJ,MAAOpJ,KAAKqJ,WA/C5E2C,EAyDIM,mBAzDJ,SAyDuB9C,EAAuGC,GACtH,OAAOiC,EAAiClC,EAAQC,EAAzCiC,CAAkD1L,KAAKoJ,MAAOpJ,KAAKqJ,WA1DlF2C,EAmEIO,gBAnEJ,SAmEoB/C,EAAkFC,GAC9F,OAAOiC,EAA8BlC,EAAQC,EAAtCiC,CAA+C1L,KAAKoJ,MAAOpJ,KAAKqJ,WApE/E2C,EA8EIQ,iBA9EJ,SA8EqBhD,EAAuGC,GACpH,OAAOiC,EAA+BlC,EAAQC,EAAvCiC,CAAgD1L,KAAKoJ,MAAOpJ,KAAKqJ,WA/EhF2C,EAyFIS,gBAzFJ,SAyFoBjD,EAAuGC,GACnH,OAAOiC,EAA8BlC,EAAQC,EAAtCiC,CAA+C1L,KAAKoJ,MAAOpJ,KAAKqJ,WA1F/EyC,EAAA,CAAiC3C,6IC1mC3BuD,EAAS3I,EAAQ,KACjB4I,EAAY5I,EAAQ,KAMpB6I,EAAM,SAACjN,GAAD,OAAgBkN,EAAAzL,cAAA,WAAMzB,EAAM8F,WAClCqH,EAAM,SAACnN,GAAD,OAAgBkN,EAAAzL,cAAA,WAAMzB,EAAM8F,WAE3BsH,EAAb,SAAAjN,GAQC,SAAAiN,EAAYpN,EAAOC,GAAS,OAC3BE,EAAAC,KAAAC,KAAML,EAAOC,IADcI,KAR7B,OAAAgN,IAAAD,EAAAjN,GAAAiN,EAYeE,WAZf,SAY0BxF,EAAeyF,GACvC,OAAIxL,OAAAC,EAAAC,QAAAF,CAAQ+F,GACJoF,EAAAzL,cAAA,aAAQ8L,GAAgB,QAAQC,YAGvCN,EAAAzL,cAACwL,GAAIzG,UAAW4G,EAAaK,WAC5BP,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaO,KAAKT,EAAAzL,cAAA,SAAO+E,UAAW4G,EAAaQ,WAAY9F,IACtEoF,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaS,MACnBN,GAAgB,QAAQC,cApB/BJ,EA0BeU,aA1Bf,SA0B4BhG,EAAeyF,EAAsCQ,EAAkDC,EAAsBC,EAAoBC,GAC3K,IAAMC,EAAMf,EAAagB,eAAeb,GACxC,OAAIxL,OAAAC,EAAAC,QAAAF,CAAQ+F,GAEVoF,EAAAzL,cAAA,YACCyL,EAAAzL,cAAA,SACC4M,SAAUH,EACVI,UAAW,IACX9H,UAAU,eACViB,KAAK,OACL3G,SAAUiN,EACV3M,MAAOmM,EAAeA,EAAaC,WAAa,GAChDe,YAAaP,GAAe,GAC5BC,SAAUA,EACVO,MAAQL,GAAYM,gBAAiB,eAErCN,GAKHjB,EAAAzL,cAACwL,GAAIzG,UAAW4G,EAAaK,WAC5BP,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaO,KAAKT,EAAAzL,cAAA,SAAO+E,UAAW4G,EAAaQ,WAAY9F,IACtEoF,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaS,KACrBX,EAAAzL,cAAA,SACC4M,SAAUH,EACVI,UAAW,IACX9H,UAAU,eACViB,KAAK,OACL3G,SAAUiN,EACV3M,MAAOmM,EAAeA,EAAaC,WAAa,GAChDe,YAAaP,GAAe,GAC5BC,SAAUA,EACVO,MAAQL,GAAYM,gBAAiB,eAErCN,KA7DNf,EAmEetL,kBAnEf,SAmEiCgG,EAAoByF,EAAsCmB,EAAmCV,EAAsBC,EAAoBC,EAAsBS,GAC5L,IAAMR,EAAMf,EAAagB,eAAeb,GACxC,OAAIxL,OAAAC,EAAAC,QAAAF,CAAQ+F,GAEVoF,EAAAzL,cAAA,YACCyL,EAAAzL,cAAA,SACC4M,SAAUH,EACVI,UAAW,IACX9H,UAAU,eACViB,KAAMkH,GAAa,OACnB7N,SAAU,SAACmD,GAAD,OAAOyK,EAAUzK,EAAE2K,cAAcxN,QAC3CA,MAAOmM,EAAeA,EAAaC,WAAa,GAChDe,YAAaP,GAAe,GAC5BC,SAAUA,EACVO,MAAQL,GAA4BM,gBAAiB,WAAtCI,SAAU,UAEzBV,GAKHjB,EAAAzL,cAACwL,GAAIzG,UAAW4G,EAAaK,WAC5BP,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaO,KAAKT,EAAAzL,cAAA,SAAO+E,UAAW4G,EAAaQ,WAAY9F,IACtEoF,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaS,KACpBT,EAAatL,kBAAkB,KAAMyL,EAAcmB,EAAWV,EAAaC,EAAUC,EAAYS,MA3FvGvB,EAiGexL,aAjGf,SAiG4BkG,EAAoBgH,EAAwDvB,EAAsCmB,EAAmCV,EAAsBE,GACrM,IAAMC,EAAMf,EAAagB,eAAeb,GACxC,GAAIxL,OAAAC,EAAAC,QAAAF,CAAQ+F,GAAQ,CACnB,IAAMiH,EAAKD,EAAQ5N,IAAI,SAAC8N,GAAD,MAA+B,iBAAXA,GAAwB5N,MAAO4N,GAAUA,IACpF,OACC9B,EAAAzL,cAAA,YACCyL,EAAAzL,cAAA,UACC4M,SAAUH,EACV1H,UAAU,eACV1F,SAAU,SAACmD,GAAD,OAAOyK,EAAUzK,EAAE2K,cAAcxN,QAC3CA,MAAOmM,EAAeA,EAAaC,WAAa,GAChDe,YAAaP,GAAe,GAC5BQ,MAAQL,GAA4BM,gBAAiB,WAAtCI,SAAU,SAEzB3B,EAAAzL,cAAA,UAAQL,MAAM,IAAd,UACC2N,EAAG7N,IAAI,SAAC8N,EAAQrL,GAAT,OAAeuJ,EAAAzL,cAAA,UAAQmC,IAAKoL,EAAO5N,MAAQuC,EAAGvC,MAAO4N,EAAO5N,OAAQ4N,EAAO3N,OAAS2N,EAAO5N,UAEnG+M,GAIJ,OACCjB,EAAAzL,cAACwL,GAAIzG,UAAW4G,EAAaK,WAC5BP,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaO,KAAKT,EAAAzL,cAAA,SAAO+E,UAAW4G,EAAaQ,WAAY9F,IACtEoF,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaS,KACpBT,EAAaxL,aAAa,KAAMkN,EAASvB,EAAcmB,EAAWV,EAAaE,MA1HrFd,EAiIe6B,UAjIf,SAiIyBC,GACvB,OACChC,EAAAzL,cAACwL,GAAIzG,UAAW4G,EAAaK,WAC5BP,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaO,MACtBT,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaS,KACpBT,EAAa+B,aAAaD,MAtIhC9B,EA4Ie+B,aA5If,SA4I4BD,GAC1B,OACChC,EAAAzL,cAAA,UAAQgG,KAAK,UAAUyH,GAAc,WA9IxC9B,EAkJegC,UAlJf,SAkJyBtH,EAAeiG,EAAkDsB,EAAkBC,EAAcC,EAAYrB,GACpI,OACChB,EAAAzL,cAACwL,GAAIzG,UAAW4G,EAAaK,WAC5BP,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaO,KAAKT,EAAAzL,cAAA,SAAO+E,UAAW4G,EAAaQ,WAAY9F,IACtEoF,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaS,KACrBX,EAAAzL,cAAC+N,EAAA7N,GACA0M,SAAUH,EACV1H,UAAW,eACXiJ,SAAoB1C,EAAVsC,EAAiBC,EAAgBC,GAC3CG,cACAC,UAAWL,GAASvC,EAAOuC,GAC3BM,QAASL,GAAOxC,EAAOwC,GACvBzO,SAAUiN,EACV8B,mBAAoB,WACpBC,qBACAC,yBAjKN3C,EAwKkBgB,eAxKlB,SAwKiC4B,GAC/B,GAAmB,iBAARA,EACV,OAAO3P,KAAK+N,eAAe4B,EAAIxC,YAEhC,GAAIwC,EAAK,CACR,IAAMC,EAAMD,EAAIE,cAChB,GAAID,EAAIE,QAAQ,aAAe,EAC9B,OAAOjD,EAAAzL,cAAA,OAAK+E,UAAU,qBAAoB0G,EAAAzL,cAAA,qBAAnC,2BAA0EyL,EAAAzL,cAAA,uBAElF,GAAIwO,EAAIE,QAAQ,WAAa,EAC5B,OAAOjD,EAAAzL,cAAA,OAAK+E,UAAU,qBAAoB0G,EAAAzL,cAAA,qBAAnC,4BAGT,OAAO,MArLT2L,EAwLegD,cAxLf,SAwL6BtI,EAAeyF,EAA+BQ,GACzE,IAAMI,EAAMf,EAAagB,eAAeb,GACxC,OACCL,EAAAzL,cAACwL,GAAIzG,UAAW4G,EAAaK,WAC5BP,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaO,KAAKT,EAAAzL,cAAA,SAAO+E,UAAW4G,EAAaQ,WAAY9F,IACtEoF,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaS,KACtBX,EAAAzL,cAAA,YAAU+E,UAAU,eAAe1F,SAAUiN,EAAQ3M,MAAOmM,EAAeA,EAAaC,WAAa,GACjGgB,MAAQL,GAAYM,gBAAiB,aACrC4B,KAAM,IACRlC,KAjMNf,EAuMekD,mBAvMf,SAuMkCxI,EAAeyF,EAA+BQ,GAC9E,IAAMI,EAAMf,EAAagB,eAAeb,GACxC,OACCL,EAAAzL,cAACwL,GAAIzG,UAAW4G,EAAaK,WAC5BP,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaO,KAAKT,EAAAzL,cAAA,SAAO+E,UAAW4G,EAAaQ,WAAY9F,IACtEoF,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaS,KACtBX,EAAAzL,cAAA,YAAU+E,UAAU,eAChB1F,SAAU,SAACmD,GAAD,OAAO8J,EAAO9J,EAAE2K,cAAcxN,QACxCA,MAAOmM,EAAeA,EAAaC,WAAa,GAChDgB,MAAQL,GAAYM,gBAAiB,aACrC4B,KAAM,IACRlC,KAlNNf,EAwNemD,cAxNf,SAwN6BzI,EAAe0I,EAAyBzC,EAAkDE,GACrH,OAAOf,EAAAzL,cAACwL,GAAIzG,UAAW4G,EAAaK,WACnCP,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaO,KACrBT,EAAAzL,cAAA,OAAK+E,UAAW4G,EAAaQ,aAE9BV,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaS,KACrBX,EAAAzL,cAAA,OAAK+E,UAAU,cACd0G,EAAAzL,cAAA,SAAO+E,UAAU,oBAChB0G,EAAAzL,cAAA,SAAO+E,UAAU,mBAAmBiB,KAAK,WAAW3G,SAAUiN,EAC1D0C,QAASD,EACTnC,SAAUJ,IAAY,IAAKnG,OAlOrCsF,EAyOelL,mBAzOf,SAyOkC4F,EAAe0I,EAAyBzC,EAAqCE,GAC7G,OAAOf,EAAAzL,cAACwL,GAAIzG,UAAW4G,EAAaK,WACnCP,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaO,KACrBT,EAAAzL,cAAA,OAAK+E,UAAW4G,EAAaQ,aAE9BV,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaS,KACrBX,EAAAzL,cAAA,OAAK+E,UAAU,cACd0G,EAAAzL,cAAA,SAAO+E,UAAU,oBAChB0G,EAAAzL,cAAA,SAAO+E,UAAU,mBAAmBiB,KAAK,WAAW3G,SAAU,SAACmD,GAAD,OAAO8J,EAAO9J,EAAE2K,cAAc6B,UACxFA,QAASD,EACTnC,SAAUJ,IAAY,IAAKnG,OAnPrCsF,EA0PesD,mBA1Pf,SA0PkC5I,EAAe0I,EAAyBzC,EAAqCE,GAC7G,OAAOf,EAAAzL,cAACwL,GAAIzG,UAAW4G,EAAaK,WACnCP,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaO,KACrBT,EAAAzL,cAAA,OAAK+E,UAAW4G,EAAaQ,aAE9BV,EAAAzL,cAAC0L,GAAIO,GAAIN,EAAaS,KACrBX,EAAAzL,cAAA,OAAK+E,UAAU,cACd0G,EAAAzL,cAAA,SAAO+E,UAAU,oBAChB0G,EAAAzL,cAAA,SAAO+E,UAAU,mBAAmBiB,KAAK,WAAW3G,SAAU,SAACmD,GAAD,OAAO8J,EAAO9J,EAAE2K,cAAc6B,UACxFA,QAASD,EACTnC,SAAUJ,IAAY,IAAKnG,OApQrCsF,EAAA,CAAkDF,EAAA/K,WAArCiL,EACEK,UAAY,aADdL,EAEEQ,UAAY,gBAFdR,EAGEO,IAAM,IAHRP,EAIES,IAAM,IAJRT,EAKEuD,YAAc3D,EAAU2D,YAL1BvD,EAMEwD,YAAc5D,EAAU4D","file":"component---src-pages-admin-manage-questions-tsx-2a96732f428d7cbe8500.js","sourcesContent":["import * as React from 'react'\r\nimport { Link } from 'gatsby'\r\nimport {EditFormBase} from '../../forms';\r\nimport * as Api from '../../api/api';\r\nimport {isEmpty} from \"ucshared\";\r\n\r\nimport Page from '../../components/Page'\r\nimport Container from '../../components/Container'\r\nimport IndexLayout from '../../layouts'\r\n\r\ninterface IQuestionFormProps {\r\n\totherQuestions: Api.SurveyQuestion[];\r\n\tonChange: (value: Api.SurveyQuestion) => any;\r\n}\r\n\r\nclass QuestionForm extends React.Component<IQuestionFormProps, Api.SurveyQuestion>{\r\n\tconstructor(props, context) {\r\n\t\tsuper(props, context);\r\n\t\tthis.state = {\r\n\t\t\tquestionText: '',\r\n\t\t\tquestionShowIfAnswer: '',\r\n\t\t\tquestionShowIf: '',\r\n\t\t\tquestionId: '',\r\n\t\t\tquestionType: '',\r\n\t\t\tisRequired: false,\r\n\t\t};\r\n\t}\r\n\r\n\tpublic changed() {\r\n\t\tif (typeof this.props.onChange === 'function') {\r\n\t\t\tthis.props.onChange(this.state);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\tconst otherQuestions = (this.props.otherQuestions || []).map((q) => (\r\n\t\t\t{ value: q.questionId || '', label: q.questionText || q.questionId || ''}\r\n\t\t)).filter((q) => q.value.length > 0 && q.label.length > 0);\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{EditFormBase.boundChoices(\r\n\t\t\t\t\t'Item Type',\r\n\t\t\t\t\t['Heading', 'Text', 'Yes/No', 'Choice'],\r\n\t\t\t\t\tthis.state.questionType || '',\r\n\t\t\t\t\t(questionType) => this.setState({questionType}, () => this.changed()))\r\n\t\t\t\t}\r\n\t\t\t\t{EditFormBase.boundTextboxValue(\r\n\t\t\t\t\t'Display Text',\r\n\t\t\t\t\tthis.state.questionText || '',\r\n\t\t\t\t\t(questionText) => this.setState({questionText}, () => this.changed()))\r\n\t\t\t\t}\r\n\t\t\t\t{this.state.questionType !== 'Heading' && (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t{EditFormBase.boundChoices(\r\n\t\t\t\t\t\t\t'Show If This Question...',\r\n\t\t\t\t\t\t\totherQuestions,\r\n\t\t\t\t\t\t\tthis.state.questionShowIf || '',\r\n\t\t\t\t\t\t\t(questionShowIf) => this.setState({questionShowIf}, () => this.changed()))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{EditFormBase.boundTextboxValue(\r\n\t\t\t\t\t\t\t'has this value',\r\n\t\t\t\t\t\t\tthis.state.questionShowIfAnswer || '',\r\n\t\t\t\t\t\t\t(questionShowIfAnswer) => this.setState({questionShowIfAnswer}, () => this.changed()),\r\n\t\t\t\t\t\t\t'',\r\n\t\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\t\tisEmpty(this.state.questionShowIf)\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{EditFormBase.boundCheckboxValue(\r\n\t\t\t\t\t\t\t'Required?',\r\n\t\t\t\t\t\t\tthis.state.isRequired || false,\r\n\t\t\t\t\t\t\t(isRequired) => this.setState({isRequired}))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass ManageQuestions extends React.Component<any, {\r\n\tdata: Api.SurveyQuestion[],\r\n\tnewQuestion: Api.SurveyQuestion,\r\n\tselectedQuestion: Api.SurveyQuestion|null,\r\n}> {\r\n\r\n\tconstructor(props, context) {\r\n\t\tsuper(props, context);\r\n\t\tthis.state = {\r\n\t\t\tdata: [],\r\n\t\t\tselectedQuestion: null,\r\n\t\t\tnewQuestion: {\r\n\t\t\t\tquestionText: '',\r\n\t\t\t\tquestionShowIf: '',\r\n\t\t\t\tquestionShowIfAnswer: '',\r\n\t\t\t\tisRequired: false,\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\r\n\tpublic componentDidMount() {\r\n\t\tconsole.log('welcome', this.props.location.search);\r\n\t\tnew Api.QuestionApi().getQuestions().then((data) => {\r\n\t\t\tconsole.log('got', data);\r\n\t\t\tthis.setState({data});\r\n\t\t});\r\n\t}\r\n\r\n\tpublic componentWillReceiveProps(nextProps) {\r\n\t\tconsole.log(nextProps);\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<IndexLayout>\r\n\t\t\t\t<Page>\r\n\t\t\t\t\t<Container>\r\n\t\t\t\t\t\t<h1>Manage Questions</h1>\r\n\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Item ID</th>\r\n\t\t\t\t\t\t\t\t<th>Display Text</th>\r\n\t\t\t\t\t\t\t\t<th>Type</th>\r\n\t\t\t\t\t\t\t\t<th>Actions</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t{this.state.data.map((row, i) => (\r\n\t\t\t\t\t\t\t\t<tr key={(row.questionId || '') + i}>\r\n\t\t\t\t\t\t\t\t\t<td>{row.questionId}</td>\r\n\t\t\t\t\t\t\t\t\t<td>{row.questionText}</td>\r\n\t\t\t\t\t\t\t\t\t<td>{row.questionType}</td>\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t{/*<Link to={`${this.props.location.pathname}?id=${row.questionId}`}>Edit</Link>*/}\r\n\t\t\t\t\t\t\t\t\t\t<button>Delete</button>\r\n\t\t\t\t\t\t\t\t\t\t<button>↑</button>\r\n\t\t\t\t\t\t\t\t\t\t<button>↓</button>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t</table>\r\n\r\n\t\t\t\t\t\t<h3>New Question</h3>\r\n\t\t\t\t\t\t<QuestionForm\r\n\t\t\t\t\t\t\tonChange={(newQuestion) => this.setState({newQuestion})}\r\n\t\t\t\t\t\t\totherQuestions={this.state.data}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t</Page>\r\n\t\t\t</IndexLayout>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ManageQuestions\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport { waitForRouteChange } from \"./wait-for-route-change\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  waitForRouteChange,\n}\n","import * as React from 'react'\r\nimport styled from 'react-emotion'\r\nimport { transparentize } from 'polished'\r\nimport { Link } from 'gatsby'\r\n\r\nimport { heights, dimensions, colors } from '../styles/variables'\r\nimport Container from './Container'\r\nimport * as Webflow from '../styles/webflow';\r\nimport { css } from \"emotion\";\r\n\r\nconst StyledHeader = styled.header('navContainer');\r\n\r\nconst Header: React.SFC<{}> = ({}) => (\r\n\t<header>\r\n\t\t<div className=\"nav-grid\">\r\n\t\t\t<div id=\"w-node-82dfbff5e208-14f3913a\" className=\"header-cta-top\">\r\n\t\t\t\t<div className=\"header-inline-block\">\r\n\t\t\t\t\t<div className=\"cta-heading inline-block blue\">Call :</div>\r\n\t\t\t\t\t<div className=\"cta-heading inline-block\"><a href=\"tel:+18334332567\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t className=\"white\">833-IDEAL-MR</a></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<a href=\"/schedule\" className=\"button-3\">Schedule Online</a></div>\r\n\t\t\t<a href=\"/\" id=\"w-node-82dfbff5e20f-14f3913a\" className=\"brand w-nav-brand w--current\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5ba3081aff7d475f9a6fa6d1_Logo%20Dark.svg\"\r\n\t\t\t\talt=\"\" className=\"image-3\"/></a>\r\n\t\t\t<div data-collapse=\"medium\" data-animation=\"default\" data-duration=\"400\" id=\"w-node-82dfbff5e211-14f3913a\"\r\n\t\t\t\t className=\"navbar w-nav\">\r\n\t\t\t\t<nav role=\"navigation\" className=\"navigation-menu w-nav-menu\"><a href=\"/why-ideal-mri\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t className=\"navigation-link-2 white w-nav-link\">Why\r\n\t\t\t\t\tideal MRI</a><a href=\"/for-clinicians\" className=\"navigation-link-2 white w-nav-link\">Meet Our\r\n\t\t\t\t\tTeam</a><a href=\"/what-to-expect\" className=\"navigation-link-2 white w-nav-link\">What to\r\n\t\t\t\t\tExpect</a><a href=\"/pricing-and-insurance\"\r\n\t\t\t\t\t\t\t\t className=\"navigation-link-2 white w-nav-link\">Pricing &amp; Insurance</a><a\r\n\t\t\t\t\thref=\"/for-clinicians\" className=\"navigation-link-2 white w-nav-link\">For Clinicians</a><a\r\n\t\t\t\t\thref=\"/come-see-us\" className=\"navigation-link-2 white w-nav-link\">Find Us</a></nav>\r\n\t\t\t\t<div className=\"hamburger-button-2 white w-nav-button\">\r\n\t\t\t\t\t<div className=\"w-icon-nav-menu\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div className=\"nav-spacer\">&nbsp;</div>\r\n\t</header>\r\n);\r\n\r\nexport default Header\r\n","import * as React from 'react'\r\nimport styled from 'react-emotion'\r\n\r\nconst StyledLayoutRoot = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh;\r\n`\r\n\r\ninterface LayoutRootProps {\r\n  className?: string\r\n}\r\n\r\nconst LayoutRoot: React.SFC<LayoutRootProps> = ({ children, className }) => (\r\n  <StyledLayoutRoot className={className}>{children}</StyledLayoutRoot>\r\n)\r\n\r\nexport default LayoutRoot\r\n","import * as React from 'react'\r\n// import styled from 'react-emotion'\r\n// const StyledLayoutMain = styled.main`\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   flex: 1;\r\n//\r\n\r\ninterface LayoutMainProps {\r\n  className?: string\r\n}\r\n\r\n// <StyledLayoutMain className={className}>{children}</StyledLayoutMain>\r\nconst LayoutMain: React.SFC<LayoutMainProps> = ({ children, className }) => (\r\n  <main className={className || \"white-section\"}>\r\n      <div className=\"vspace80 w-container\">\r\n          {children}\r\n      </div>\r\n  </main>\r\n);\r\n\r\nexport default LayoutMain\r\n","import * as React from 'react'\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Footer: React.SFC<{}> = ({}) => (\r\n\t<footer className=\"cta-section centered-accented\">\r\n\t\t<div className=\"cta-footer\">\r\n\t\t\t<div className=\"footer-inline-block\">\r\n\t\t\t\t<h2 className=\"cta-heading inline-block blue\"><a href=\"tel:+18334332567\">Call</a> : </h2>\r\n\t\t\t\t<h2 className=\"cta-heading inline-block\"><a href=\"tel:+18334332567\" className=\"white\">833-IDEAL-MR</a>\r\n\t\t\t\t</h2>\r\n\t\t\t</div>\r\n\t\t\t<a href=\"/schedule\" className=\"button large\">Schedule Online</a></div>\r\n\t\t<div className=\"cta-footer\"><img\r\n\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5ba3081aff7d475f9a6fa6d1_Logo%20Dark.svg\"\r\n\t\t\theight=\"60\" alt=\"\" className=\"cta-branding\"/><a href=\"/policies-and-hipaa-notice\">Policies and\r\n\t\t\tInformation</a></div>\r\n\t\t<Helmet>\r\n\t\t\t<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" type=\"text/javascript\"\r\n\t\t\t\t\tintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossOrigin=\"anonymous\" />\r\n\t\t\t<script src=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/js/ideal-mri.71c22ec14.js\"\r\n\t\t\t\t\ttype=\"text/javascript\" />\r\n\t\t</Helmet>\r\n\t</footer>\r\n);\r\n\r\nexport default Footer\r\n","import * as React from 'react'\r\n\r\nconst Footer: React.SFC<{}> = ({}) => (\r\n\t<section className=\"cta-section\">\r\n\t\t<div className=\"w-container\">\r\n\t\t\t<div className=\"w-layout-grid grid-2\"><a href=\"/why-ideal-mri\" id=\"w-node-774288a9e25a-774089fe\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead31fb9e09c21b36b101_Why.svg\" alt=\"\"\r\n\t\t\t\tclassName=\"cta-button-image\"/>\r\n\t\t\t\t<div id=\"w-node-774288a9e25c-774089fe\">Why ideal MRI</div>\r\n\t\t\t</a><a href=\"/what-to-expect\" id=\"w-node-774288a9e25e-774089fe\"\r\n\t\t\t\t   className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f69d670128b342c0a_Expect.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>What to Expect</div>\r\n\t\t\t</a><a href=\"/meet-our-team\" id=\"w-node-774288a9e262-774089fe\" className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f3661e73d2f76eedd_Meet%20Our%20Team.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>Meet Our Team</div>\r\n\t\t\t</a><a href=\"/for-clinicians\" id=\"w-node-774288a9e266-774089fe\"\r\n\t\t\t\t   className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead313661e7266876eedf_Providers.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>For Clinicians</div>\r\n\t\t\t</a><a href=\"/pricing-and-insurance\" id=\"w-node-774288a9e26a-774089fe\"\r\n\t\t\t\t   className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead313661e7547b76eee0_Pricing.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>Pricing &amp; Insurance</div>\r\n\t\t\t</a><a href=\"/come-see-us\" id=\"w-node-774288a9e26e-774089fe\" className=\"cta-grid-item w-inline-block\"><img\r\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f08470e4beefa3f54_Find%20Us.svg\"\r\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\r\n\t\t\t\t<div>Find Us</div>\r\n\t\t\t</a></div>\r\n\t\t</div>\r\n\t</section>\r\n);\r\n\r\nexport default Footer\r\n","import * as React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport {StaticQuery, graphql} from 'gatsby'\r\n\r\n// import 'modern-normalize'\r\n// import '../styles/normalize'\r\nimport '../styles/webflow.css'\r\nimport '../styles/webflow.grid.css'\r\nimport '../styles/animate.css'\r\n\r\nimport Header from '../components/Header'\r\nimport LayoutRoot from '../components/LayoutRoot'\r\nimport LayoutMain from '../components/LayoutMain'\r\nimport Footer from \"../components/Footer\";\r\nimport FooterNav from \"../components/FooterNav\";\r\n\r\ntype StaticQueryProps = {\r\n\tsite: {\r\n\t\tsiteMetadata: {\r\n\t\t\ttitle: string\r\n\t\t\tdescription: string\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst IndexLayout: React.SFC = ({children}) => (\r\n\t<StaticQuery\r\n\t\tquery={graphql`\r\n      query IndexLayoutQuery {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n          }\r\n        }\r\n      }\r\n    `}\r\n\t\trender={(data: StaticQueryProps) => (\r\n\t\t\t<LayoutRoot>\r\n\t\t\t\t<Helmet\r\n\t\t\t\t\ttitle={data.site.siteMetadata.title}\r\n\t\t\t\t\tmeta={[\r\n\t\t\t\t\t\t{name: 'description', content: data.site.siteMetadata.description},\r\n\t\t\t\t\t\t{name: 'keywords', content: 'gatsbyjs, gatsby, javascript, sample, something'}\r\n\t\t\t\t\t]}\r\n\t\t\t\t/>\r\n\t\t\t\t<Header/>\r\n\t\t\t\t<LayoutMain>{children}</LayoutMain>\r\n\t\t\t\t<FooterNav/>\r\n\t\t\t\t<Footer/>\r\n\t\t\t</LayoutRoot>\r\n\t\t)}\r\n\t/>\r\n)\r\n\r\nexport default IndexLayout\r\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import * as React from 'react'\r\nimport styled from 'react-emotion'\r\n\r\nimport { dimensions } from '../styles/variables'\r\n\r\nconst StyledPage = styled.div`\r\n  display: block;\r\n  flex: 1;\r\n  position: relative;\r\n`\r\n\r\ninterface PageProps {\r\n  className?: string\r\n}\r\n\r\nconst Page: React.SFC<PageProps> = ({ children, className }) => <StyledPage className={className}>{children}</StyledPage>\r\n\r\nexport default Page\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathname(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import * as React from 'react'\r\nimport styled from 'react-emotion'\r\n\r\nimport { widths } from '../styles/variables'\r\nimport { getEmSize } from '../styles/mixins'\r\n\r\nconst StyledContainer = styled.div`\r\n  position: relative;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: auto;\r\n  max-width: ${getEmSize(widths.lg)}em;\r\n`\r\n\r\ninterface ContainerProps {\r\n  className?: string\r\n}\r\n\r\nconst Container: React.SFC<ContainerProps> = ({ children, className }) => (\r\n  <StyledContainer className={className}>{children}</StyledContainer>\r\n)\r\n\r\nexport default Container\r\n","/* tslint:disable:max-line-length */\r\n\r\nexport const colors = {\r\n  brand: '#663399',\r\n  lilac: '#9d7cbf',\r\n  accent: '#ffb238',\r\n  success: '#37b635',\r\n  warning: '#ec1818',\r\n  ui: {\r\n    bright: '#e0d6eb',\r\n    light: '#f5f3f7',\r\n    whisper: '#fbfafc'\r\n  },\r\n  code: '#fcf6f0',\r\n  gray: {\r\n    dark: 'hsla(270, 17.119554496%, 0%, 0.92)',\r\n    copy: 'hsla(270, 15.797828016000002%, 0%, 0.88)',\r\n    calm: 'rgba(0, 0, 0, 0.54)'\r\n  },\r\n  white: '#fff',\r\n  black: '#000'\r\n};\r\n\r\nexport const fonts = {\r\n  sansSerif:\r\n    '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", Arial, sans-serif',\r\n  serif: 'Georgia, \"Times New Roman\", Times, serif',\r\n  monospace: 'Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace, monospace'\r\n};\r\n\r\nexport const breakpoints = {\r\n  xs: 0,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200\r\n};\r\n\r\nexport const widths = {\r\n  md: 720,\r\n  lg: 960,\r\n  xl: 1140\r\n};\r\n\r\nexport const dimensions = {\r\n  fontSize: {\r\n    regular: 16,\r\n    large: 18\r\n  },\r\n  headingSizes: {\r\n    h1: 2.441,\r\n    h2: 1.953,\r\n    h3: 1.563,\r\n    h4: 1.25\r\n  },\r\n  lineHeight: {\r\n    regular: 1.45,\r\n    heading: 1.2\r\n  },\r\n  containerPadding: 1.5\r\n};\r\n\r\nexport const heights = {\r\n  header: 60\r\n};\r\n","/**\r\n * ideal MRI\r\n * Signup Center API\r\n *\r\n * OpenAPI spec version: v1\r\n * Contact: ben@herila.net\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport * as querystring from \"querystring\";\r\nimport * as url from \"url\";\r\n\r\nimport * as isomorphicFetch from \"isomorphic-fetch\";\r\nimport * as assign from \"core-js/library/fn/object/assign\";\r\n\r\ninterface Dictionary<T> { [index: string]: T; }\r\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\r\n\r\nconst BASE_PATH = \"http://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\r\n\r\nexport interface FetchArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\nexport class BaseAPI {\r\n    basePath: string;\r\n    fetch: FetchAPI;\r\n\r\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\r\n        this.basePath = basePath;\r\n        this.fetch = fetch;\r\n    }\r\n};\r\n\r\nexport interface Appointment {\r\n    \"appointmentId\"?: string;\r\n    \"appointmentSlotId\"?: string;\r\n    \"serviceType\"?: string;\r\n    \"firstName\"?: string;\r\n    \"lastName\"?: string;\r\n    \"dob\"?: string;\r\n    \"phone\"?: string;\r\n    \"email\"?: string;\r\n    \"address1\"?: string;\r\n    \"city\"?: string;\r\n    \"state\"?: string;\r\n    \"zip\"?: string;\r\n    \"height\"?: string;\r\n    \"weight\"?: string;\r\n    \"reminder\"?: number;\r\n    \"doctorName\"?: string;\r\n    \"doctorPhone\"?: string;\r\n    \"insuranceCarrier\"?: string;\r\n    \"insuranceGroupNumber\"?: string;\r\n    \"insurancePolicyNumber\"?: string;\r\n    \"insuranceVerified\"?: boolean;\r\n    \"priorAuthObtained\"?: boolean;\r\n    \"orderEnteredToRIS\"?: boolean;\r\n    \"patientWasCalled\"?: boolean;\r\n    \"confirmed\"?: boolean;\r\n    \"orderImageUrl\"?: string;\r\n    \"insuranceFrontUrl\"?: string;\r\n    \"insuranceBackUrl\"?: string;\r\n    \"surveyDataJson\"?: string;\r\n    \"approvedDate\"?: Date;\r\n    \"submittedDate\"?: Date;\r\n    \"confirmedDate\"?: Date;\r\n    \"birthday\"?: Date;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface CustomerLead {\r\n    \"firstName\"?: string;\r\n    \"lastName\"?: string;\r\n    \"dob\"?: string;\r\n    \"phone\"?: string;\r\n    \"email\"?: string;\r\n    \"serviceType\"?: string;\r\n    \"timeSlot\"?: string;\r\n    \"withContrast\"?: boolean;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface DayRule {\r\n    \"dayOfWeek\"?: DayRuleDayOfWeekEnum;\r\n    \"openTime\"?: number;\r\n    \"closeTime\"?: number;\r\n    \"slotLength\"?: number;\r\n}\r\n\r\nexport type DayRuleDayOfWeekEnum = \"Sunday\" | \"Monday\" | \"Tuesday\" | \"Wednesday\" | \"Thursday\" | \"Friday\" | \"Saturday\";\r\nexport interface Location {\r\n    \"locationName\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface SlotAvailabilityDate {\r\n    \"date\"?: Date;\r\n    \"friendlyBegin\"?: string;\r\n    \"times\"?: Array<SlotAvailabilityTime>;\r\n}\r\n\r\nexport interface SlotAvailabilityTime {\r\n    \"time\"?: string;\r\n    \"isAvailable\"?: boolean;\r\n    \"linkedAppointment\"?: Appointment;\r\n    \"slotId\"?: string;\r\n}\r\n\r\nexport interface SurveyQuestion {\r\n    \"questionId\"?: string;\r\n    \"questionShowIf\"?: string;\r\n    \"questionShowIfAnswer\"?: string;\r\n    \"questionText\"?: string;\r\n    \"questionType\"?: string;\r\n    \"isRequired\"?: boolean;\r\n    \"isHidden\"?: boolean;\r\n    \"order\"?: number;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface TableResult {\r\n    \"result\"?: any;\r\n    \"httpStatusCode\"?: number;\r\n    \"etag\"?: string;\r\n}\r\n\r\nexport interface User {\r\n    \"apiKey\"?: string;\r\n    \"immutableId\"?: string;\r\n    \"referenceRowKey\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\n\r\n\r\n/**\r\n * AuthApi - fetch parameter creator\r\n */\r\nexport const AuthApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/auth`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * AuthApi - functional programming interface\r\n */\r\nexport const AuthApiFp = {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\r\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * AuthApi - object-oriented interface\r\n */\r\nexport class AuthApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\r\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * AuthApi - factory interface\r\n */\r\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Auth\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\r\n            return AuthApiFp.auth(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * LeadGenApi - fetch parameter creator\r\n */\r\nexport const LeadGenApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: {  \"req\"?: Appointment; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/leadGen`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/leadGen`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LeadGenApi - functional programming interface\r\n */\r\nexport const LeadGenApiFp = {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: { \"req\"?: Appointment; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\r\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: { \"req\"?: Appointment; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\r\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LeadGenApi - object-oriented interface\r\n */\r\nexport class LeadGenApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: {  \"req\"?: Appointment; \"authToken\"?: string; }, options?: any) {\r\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; }, options?: any) {\r\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * LeadGenApi - factory interface\r\n */\r\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Run\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        runGET(params: {  \"req\"?: Appointment; \"authToken\"?: string; }, options?: any) {\r\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Run\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        runPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; }, options?: any) {\r\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * LocationApi - fetch parameter creator\r\n */\r\nexport const LocationApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     */\r\n    locationsGET(params: {  \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/locations`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     */\r\n    locationsPOST(params: {  \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/locations`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LocationApi - functional programming interface\r\n */\r\nexport const LocationApiFp = {\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     */\r\n    locationsGET(params: { \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\r\n        const fetchArgs = LocationApiFetchParamCreator.locationsGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     */\r\n    locationsPOST(params: { \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\r\n        const fetchArgs = LocationApiFetchParamCreator.locationsPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LocationApi - object-oriented interface\r\n */\r\nexport class LocationApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     */\r\n    locationsGET(params: {  \"locationId\"?: string; }, options?: any) {\r\n        return LocationApiFp.locationsGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     */\r\n    locationsPOST(params: {  \"locationId\"?: string; }, options?: any) {\r\n        return LocationApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * LocationApi - factory interface\r\n */\r\nexport const LocationApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Locations\r\n         * @param locationId\r\n         */\r\n        locationsGET(params: {  \"locationId\"?: string; }, options?: any) {\r\n            return LocationApiFp.locationsGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Locations\r\n         * @param locationId\r\n         */\r\n        locationsPOST(params: {  \"locationId\"?: string; }, options?: any) {\r\n            return LocationApiFp.locationsPOST(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * PostQuestionApi - fetch parameter creator\r\n */\r\nexport const PostQuestionApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/question`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * PostQuestionApi - functional programming interface\r\n */\r\nexport const PostQuestionApiFp = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\r\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * PostQuestionApi - object-oriented interface\r\n */\r\nexport class PostQuestionApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\r\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * PostQuestionApi - factory interface\r\n */\r\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary GetQuestions\r\n         * @param req\r\n         */\r\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\r\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * QuestionApi - fetch parameter creator\r\n */\r\nexport const QuestionApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any): FetchArgs {\r\n        const baseUrl = `/api/question`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * QuestionApi - functional programming interface\r\n */\r\nexport const QuestionApiFp = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\r\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * QuestionApi - object-oriented interface\r\n */\r\nexport class QuestionApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any) {\r\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * QuestionApi - factory interface\r\n */\r\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary GetQuestions\r\n         */\r\n        getQuestions(options?: any) {\r\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * ScheduleApi - fetch parameter creator\r\n */\r\nexport const ScheduleApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesDELETE(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesPOST(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesPUT(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslots`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userScheduleDELETE(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userScheduleGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userSchedulePOST(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userSchedulePUT(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ScheduleApi - functional programming interface\r\n */\r\nexport const ScheduleApiFp = {\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesDELETE(params: { \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DayRule>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.adminRulesDELETE(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesGET(params: { \"withContrast\"?: boolean; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DayRule>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.adminRulesGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesPOST(params: { \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DayRule>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.adminRulesPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesPUT(params: { \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DayRule>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.adminRulesPUT(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: { \"withContrast\"?: boolean; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SlotAvailabilityDate>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userScheduleDELETE(params: { \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Appointment>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.userScheduleDELETE(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userScheduleGET(params: { \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Appointment>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.userScheduleGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userSchedulePOST(params: { \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Appointment>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.userSchedulePOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userSchedulePUT(params: { \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Appointment>> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.userSchedulePUT(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ScheduleApi - object-oriented interface\r\n */\r\nexport class ScheduleApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesDELETE(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.adminRulesDELETE(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.adminRulesGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesPOST(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.adminRulesPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AdminRules\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    adminRulesPUT(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.adminRulesPUT(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param withContrast\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userScheduleDELETE(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.userScheduleDELETE(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userScheduleGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.userScheduleGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userSchedulePOST(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.userSchedulePOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary UserSchedule\r\n     * @param req\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    userSchedulePUT(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.userSchedulePUT(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * ScheduleApi - factory interface\r\n */\r\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary AdminRules\r\n         * @param req\r\n         * @param withContrast\r\n         * @param locationId\r\n         */\r\n        adminRulesDELETE(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.adminRulesDELETE(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AdminRules\r\n         * @param withContrast\r\n         * @param locationId\r\n         */\r\n        adminRulesGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.adminRulesGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AdminRules\r\n         * @param req\r\n         * @param withContrast\r\n         * @param locationId\r\n         */\r\n        adminRulesPOST(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.adminRulesPOST(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AdminRules\r\n         * @param req\r\n         * @param withContrast\r\n         * @param locationId\r\n         */\r\n        adminRulesPUT(params: {  \"req\"?: DayRule; \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.adminRulesPUT(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary TimeSlots\r\n         * @param withContrast\r\n         * @param locationId\r\n         */\r\n        timeSlotsGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary UserSchedule\r\n         * @param req\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        userScheduleDELETE(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.userScheduleDELETE(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary UserSchedule\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        userScheduleGET(params: {  \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.userScheduleGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary UserSchedule\r\n         * @param req\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        userSchedulePOST(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.userSchedulePOST(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary UserSchedule\r\n         * @param req\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        userSchedulePUT(params: {  \"req\"?: Appointment; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.userSchedulePUT(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n","import * as React from 'react';\nimport DatePicker from 'react-datepicker';\nimport {isEmpty} from 'ucshared';\n\nconst moment = require('moment');\nconst formStyle = require('./formStyle.css');\n\nexport function formatAdminDate(date: any) {\n\treturn moment(date).format('MM/DD/YYYY');\n}\n\nconst Row = (props: any) => <div>{props.children}</div>;\nconst Col = (props: any) => <div>{props.children}</div>;\n\nexport class EditFormBase<TProps, TState> extends React.Component<TProps, TState> {\n\tpublic static formGroup = 'form-group';\n\tpublic static ctrlLabel = 'control-label';\n\tpublic static sm3 = '3';\n\tpublic static sm9 = '9';\n\tpublic static insertBlock = formStyle.insertBlock;\n\tpublic static detailBlock = formStyle.detailBlock;\n\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t}\n\n\tpublic static boundLabel(title: string, defaultValue: string | number | Date) {\n\t\tif (isEmpty(title)) {\n\t\t\treturn <span>{(defaultValue || 'null').toString()}</span>;\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{(defaultValue || 'null').toString()}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextbox(title: string, defaultValue: string | number | Date, bindFn: React.FormEventHandler<HTMLInputElement>, placeHolder?: string, readOnly?: boolean, isDisabled?: boolean) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextboxValue(title: string|null, defaultValue: string | number | Date, bindValFn: (value: string) => any, placeHolder?: string, readOnly?: boolean, isDisabled?: boolean, inputType?: string) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype={inputType || 'text'}\n\t\t\t\t\t\tonChange={(e) => bindValFn(e.currentTarget.value)}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {minWidth: '40px'} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.boundTextboxValue(null, defaultValue, bindValFn, placeHolder, readOnly, isDisabled, inputType)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundChoices(title: string|null, choices: Array<{label?: string, value: string}|string>, defaultValue: string | number | Date, bindValFn: (value: string) => any, placeHolder?: string, isDisabled?: boolean) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\tconst cc = choices.map((choice) => (typeof choice === 'string') ? {value: choice} : choice);\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<select\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tonChange={(e) => bindValFn(e.currentTarget.value)}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\tstyle={!wrn ? {minWidth: '40px'} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"\">(none)</option>\n\t\t\t\t\t\t{cc.map((choice, i) => <option key={choice.value + i} value={choice.value}>{choice.label || choice.value}</option>)}\n\t\t\t\t\t</select>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.boundChoices(null, choices, defaultValue, bindValFn, placeHolder, isDisabled)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\n\tpublic static submitRow(actionText?: string) {\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}/>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.submitButton(actionText)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static submitButton(actionText?: string) {\n\t\treturn (\n\t\t\t<button type=\"submit\">{actionText || 'Submit'}</button>\n\t\t);\n\t}\n\n\tpublic static boundDate(title: string, bindFn: React.FormEventHandler<HTMLInputElement>, isStart: boolean, start?: Date, end?: Date, isDisabled?: boolean) {\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t<DatePicker\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tclassName={'form-control'}\n\t\t\t\t\t\tselected={isStart ? moment(start) : moment(end)}\n\t\t\t\t\t\tselectsEnd\n\t\t\t\t\t\tstartDate={start && moment(start)}\n\t\t\t\t\t\tendDate={end && moment(end)}\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tdateFormatCalendar={'MMM YYYY'}\n\t\t\t\t\t\tshowMonthDropdown\n\t\t\t\t\t\tshowYearDropdown\n\t\t\t\t\t/>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tprotected static renderWarnings(val: string|number|Date) {\n\t\tif (typeof val !== 'string') {\n\t\t\treturn this.renderWarnings(val.toString());\n\t\t}\n\t\tif (val) {\n\t\t\tconst vlc = val.toLowerCase();\n\t\t\tif (vlc.indexOf('included') > -1) {\n\t\t\t\treturn <div className=\"alert alert-error\"><b>Warning:</b> Consider removing term <em>included</em></div>;\n\t\t\t}\n\t\t\tif (vlc.indexOf('refund') > -1) {\n\t\t\t\treturn <div className=\"alert alert-error\"><b>Warning:</b> We don't offer refunds.</div>;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static boundTextarea(title: string, defaultValue: string | number, bindFn: React.FormEventHandler<HTMLTextAreaElement>) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<textarea className=\"form-control\" onChange={bindFn} value={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\t  style={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t\t  rows={5}/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextareaValue(title: string, defaultValue: string | number, bindFn: (value) => any) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<textarea className=\"form-control\"\n\t\t\t\t\t\t  onChange={(e) => bindFn(e.currentTarget.value)}\n\t\t\t\t\t\t  value={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\t  style={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t\t  rows={5}/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundCheckbox(title: string, defaultChecked: boolean, bindFn: React.FormEventHandler<HTMLInputElement>, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={bindFn}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n\n\tpublic static boundCheckboxValue(title: string, defaultChecked: boolean, bindFn: (isChecked: boolean) => any, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={(e) => bindFn(e.currentTarget.checked)}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n\n\tpublic static boundBooleanSwitch(title: string, defaultChecked: boolean, bindFn: (isChecked: boolean) => any, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={(e) => bindFn(e.currentTarget.checked)}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n}\n"],"sourceRoot":""}