{"version":3,"sources":["webpack:///./src/components/FileUpload.tsx","webpack:///./src/pages/addl-info.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/models/SafetyState.ts","webpack:///./src/components/Header.tsx","webpack:///./src/components/LayoutRoot.tsx","webpack:///./src/components/LayoutMain.tsx","webpack:///./src/components/Footer.tsx","webpack:///./src/components/FooterNav.tsx","webpack:///./src/layouts/index.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/breadcrumb.tsx","webpack:///./src/helpers/FormBasePage.tsx","webpack:///./src/api/api.ts","webpack:///./.cache/public-page-renderer-prod.js"],"names":["__webpack_require__","showImageOrPlaceholder","img","length","react","createElement","alt","src","className","style","maxHeight","maxWidth","Component","d","n","f","addl_info_ContactInformation","ContactInformation","props","context","_FormBasePage","call","this","componentDidMount","_this","state","SafetyState","a","loadState","haveOrder","setState","saveState","render","_this2","layouts","id","breadcrumb","num","b","value","scan","slot","timeSlot","name","data-name","action","onSubmit","e","handleSubmit","renderHeight","renderWeight","htmlFor","type","maxLength","doctorName","onChange","currentTarget","updateStorage","es","accept","onDrop","files","mriOrder","insFront","insBack","_this3","console","log","sObj","_this4","preventDefault","slotId","api","appointmentHandlerPOST","req","partitionKey","split","rowKey","lastName","lname","firstName","fname","address1","confirmed","email","phone","height","insuranceBackUrl","insuranceFrontUrl","insuranceCarrier","insuranceGroupNumber","insurancePolicyNumber","insuranceVerified","orderImageUrl","resourceId","serviceType","JSON","stringify","weight","birthday","dob","serviceLength","search","authToken","withContrast","locationId","then","res","success","sessionStorage","setItem","Object","gatsby_browser_entry","navigate","err","message","alert","t","__webpack_exports__","default","p","160","r","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","withPrefix","push","replace","navigateTo","_wait_for_route_change__WEBPACK_IMPORTED_MODULE_3__","c","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4___default","_parse_path__WEBPACK_IMPORTED_MODULE_5__","createContext","Consumer","staticQueryData","data","query","children","Error","propTypes","object","string","isRequired","func","answers","implants","currentImplant","overrideSafetyWarning","carrierNumber","groupNumber","policyNumber","parse","getItem","jsonState","o","assign","163","i","s","l","u","components_Header","_ref","objectDestructuringEmpty_default","href","data-collapse","data-animation","data-duration","role","StyledLayoutRoot","index_esm","target","components_LayoutRoot","components_LayoutMain","components_Footer","Helmet_default","integrity","crossOrigin","FooterNav","title","site","siteMetadata","meta","content","description","_991718019","m","module","exports","Chevron","react__WEBPACK_IMPORTED_MODULE_2__","width","translucent","Ez123","OrderBreadcrumb","gatsby__WEBPACK_IMPORTED_MODULE_3__","Link","to","display","MriTypeBreadcrumb","contrast","TimeslotBreadcrumb","169","FormBasePage","_React$Component","_models_SafetyState__WEBPACK_IMPORTED_MODULE_3__","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","_proto","prototype","getAns","q","ans","val","170","h","E","D","B","BASE_PATH","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","contentTypeHeader","fetchOptions","method","Content-Type","body","headers","url","format","AuthApiFetchParamCreator","response","status","json","AuthApi","_BaseAPI","apply","arguments","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","runPOST","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesGET","availabilityRulesPOST","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","ScheduleApiFetchParamCreator","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerDELETE","appointmentHandlerGET","appointmentHandlerPUT","timeSlotsGET","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","_loader__WEBPACK_IMPORTED_MODULE_3__","ProdPageRenderer","location","pageResources","getResourcesForPathname","pathname","shape","174","175","177","179","181"],"mappings":"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","file":"component---src-pages-addl-info-tsx-a805fde2a9b279885630.js","sourcesContent":["import Dropzone from \"react-dropzone\";\nimport * as React from \"react\";\nimport {BASE_PATH} from \"ucshared\";\nconst $ = require('jquery');\n\nexport function showImageOrPlaceholder(img: string | null) {\n\tif (typeof img !== 'string' || img === null || img.length < 1) {\n\t\treturn <div>Click here to select picture/PDF</div>;\n\t}\n\treturn (\n\t\t<img alt=\"Uploaded image\" src={img} className=\"img-fluid\" style={{maxHeight: '100px', maxWidth: '100%'}}/>\n\t);\n}\n\nexport class FileUpload extends React.Component<{bucket: string, url: string, onNewUrl: (url: string)=>any}, {isLoading: boolean}> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {isLoading: false};\n\t}\n\tpublic render() {\n\t\treturn (\n\t\t\t<Dropzone\n\t\t\t\taccept=\"image/*\"\n\t\t\t\tclassName=\"button green small w-button\"\n\t\t\t\tonDrop={(files) => this.onDrop(this.props.bucket, files)}\n\t\t\t>{showImageOrPlaceholder(this.props.url)}\n\t\t\t</Dropzone>\n\t\t);\n\t}\n\n\tprivate onDrop(bucket: string, files: File[]) {\n\t\tconst fd = new FormData();\n\t\tfd.append('file', files[0]);\n\n\t\t$.ajax({\n\t\t\turl: BASE_PATH + '/api/upload/?to=' + bucket,\n\t\t\ttype: 'POST',\n\t\t\tenctype: 'multipart/form-data',\n\t\t\tprocessData: false,  // Important!\n\t\t\tcacheData: false,\n\t\t\tcontentType: false,\n\t\t\tdata: fd,\n\t\t}).then(\n\t\t\t(data: any, textStatus: string, jqXhr: any) => {\n\t\t\t\tconsole.log(textStatus, data);\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\tuploadedUri: data,\n\t\t\t\t} as any, () => {\n\t\t\t\t\tif (this.props.onNewUrl) {\n\t\t\t\t\t\tthis.props.onNewUrl(data);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t},\n\t\t);\n\t}\n}\n","import * as React from 'react'\nimport { navigate } from 'gatsby'\nimport IndexLayout from '../layouts'\nimport {Ez123, MriTypeBreadcrumb, TimeslotBreadcrumb} from \"../components/breadcrumb\";\nimport Dropzone from \"react-dropzone\";\nimport {showImageOrPlaceholder} from \"../components/FileUpload\";\nimport {ScheduleApi} from \"../api/api\";\nimport {getAuthToken} from \"../helpers/authToken\";\nimport {SafetyState} from \"../models/SafetyState\";\nimport {FormBasePage} from \"../helpers/FormBasePage\";\n\nclass ContactInformation extends FormBasePage {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t}\n\n\tpublic componentDidMount() {\n\t\tconst state = SafetyState.loadState();\n\t\tstate.haveOrder = false;\n\t\tthis.setState(state, () => this.saveState());\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<IndexLayout>\n\t\t\t\t<section id=\"Q1\" className=\"vspace80 w-container\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Ez123 num={3} />\n\t\t\t\t\t\t<div className=\"breadcrumb-stack\">\n\t\t\t\t\t\t\t<MriTypeBreadcrumb value={this.state.scan}/>\n\t\t\t\t\t\t\t<TimeslotBreadcrumb slot={this.state.timeSlot}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"vspace80 centered w-row\">\n\t\t\t\t\t\t<div className=\"w-hidden-small w-hidden-tiny w-col w-col-4\">\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5ba72c92e33cb6832a1bd949_idealMRI_lady_3.png\"\n\t\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"w-hidden-small w-hidden-tiny w-col w-col-1\" />\n\t\t\t\t\t\t<div className=\"w-col w-col-7\">\n\t\t\t\t\t\t\t<div className=\"w-form\">\n\t\t\t\t\t\t\t\t<form\n\t\t\t\t\t\t\t\t\tid=\"email-form\"\n\t\t\t\t\t\t\t\t\tname=\"email-form\"\n\t\t\t\t\t\t\t\t\tdata-name=\"Email Form\"\n\t\t\t\t\t\t\t\t\taction=\"#\"\n\t\t\t\t\t\t\t\t\tonSubmit={(e) => this.handleSubmit(e)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<h3>Additional Information</h3>\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t<strong>Thanks! You're all set. </strong>We will give you\n\t\t\t\t\t\t\t\t\t\ta call to confirm any details. &nbsp;We'll also send you a\n\t\t\t\t\t\t\t\t\t\treminder before your scan. &nbsp;You can fill out this\n\t\t\t\t\t\t\t\t\t\tadditional information now, to save time. It takes about 2\n\t\t\t\t\t\t\t\t\t\tor 3 more minutes.\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t{this.renderHeight()}\n\t\t\t\t\t\t\t\t\t{this.renderWeight()}\n\t\t\t\t\t\t\t\t\t<div className=\"inputrow\">\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"DoctorName\" className=\"flexlabel\">\n\t\t\t\t\t\t\t\t\t\t\tWho is your doctor?\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flexinput w-input\"\n\t\t\t\t\t\t\t\t\t\t\tmaxLength={256}\n\t\t\t\t\t\t\t\t\t\t\tname=\"DoctorName\"\n\t\t\t\t\t\t\t\t\t\t\tdata-name=\"DoctorName\"\n\t\t\t\t\t\t\t\t\t\t\tid=\"DoctorName\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={this.state.doctorName}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({doctorName: e.currentTarget.value}, () => this.updateStorage())}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"inputrow\">\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"name-6\" className=\"flexlabel\">\n\t\t\t\t\t\t\t\t\t\t\tUpload MRI&nbsp;order\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flexinput\">\n\t\t\t\t\t\t\t\t\t\t\t<Dropzone\n\t\t\t\t\t\t\t\t\t\t\t\taccept=\"image/*\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"button green small w-button\"\n\t\t\t\t\t\t\t\t\t\t\t\tonDrop={(files) => this.onDrop('mri-order', files)}\n\t\t\t\t\t\t\t\t\t\t\t>{showImageOrPlaceholder(this.state.mriOrder)}\n\t\t\t\t\t\t\t\t\t\t\t</Dropzone>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"inputrow\">\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"name-6\" className=\"flexlabel\">\n\t\t\t\t\t\t\t\t\t\t\t<strong>Insurance Card Front</strong>\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flexinput\">\n\t\t\t\t\t\t\t\t\t\t\t<Dropzone\n\t\t\t\t\t\t\t\t\t\t\t\taccept=\"image/*\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"button green small w-button\"\n\t\t\t\t\t\t\t\t\t\t\t\tonDrop={(files) => this.onDrop('ins-front', files)}\n\t\t\t\t\t\t\t\t\t\t\t>{showImageOrPlaceholder(this.state.insFront)}\n\t\t\t\t\t\t\t\t\t\t\t</Dropzone>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"inputrow\">\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"name-6\" className=\"flexlabel\">\n\t\t\t\t\t\t\t\t\t\t\t<strong>Insurance Card Back</strong>\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flexinput\">\n\t\t\t\t\t\t\t\t\t\t\t<Dropzone\n\t\t\t\t\t\t\t\t\t\t\t\taccept=\"image/*\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"button green small w-button\"\n\t\t\t\t\t\t\t\t\t\t\t\tonDrop={(files) => this.onDrop('ins-back', files)}\n\t\t\t\t\t\t\t\t\t\t\t>{showImageOrPlaceholder(this.state.insBack)}\n\t\t\t\t\t\t\t\t\t\t\t</Dropzone>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"cta-subitem distributed\">\n\t\t\t\t\t\t\t\t\t\t<button className=\"cta-link wider w-inline-block\" type=\"submit\">\n\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f3661e73d2f76eedd_Meet%20Our%20Team.svg\"\n\t\t\t\t\t\t\t\t\t\t\t\talt=\"Submit\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"image\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<div>Submit</div>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</IndexLayout>\n\t\t);\n\t}\n\n\tprivate onDrop(insBack: string, files: File[]) {\n\t\tconsole.log(insBack, files);\n\t\tif (files.length) {\n\t\t\tif (files[0]) {\n\t\t\t\tconst sObj = {};\n\t\t\t\tsObj[insBack] = files[0].name;\n\t\t\t\tthis.setState(sObj, () => this.saveState());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n\t\te.preventDefault();\n\t\tif (!this.state.timeSlot) {\n\t\t\talert('missing timeSlot');\n\t\t\treturn;\n\t\t}\n\t\tconst slotId = this.state.timeSlot.slotId || '';\n\t\tnew ScheduleApi().appointmentHandlerPOST({\n\t\t\treq: {\n\t\t\t\tpartitionKey: slotId.split(' ')[1], // extract location from slotId\n\t\t\t\trowKey: slotId,\n\t\t\t\tlastName: this.state.lname,\n\t\t\t\tfirstName: this.state.fname,\n\t\t\t\taddress1: '',\n\t\t\t\tconfirmed: false,\n\t\t\t\tdoctorName: this.state.doctorName,\n\t\t\t\temail: this.state.email,\n\t\t\t\tphone: this.state.phone,\n\t\t\t\theight: this.state.height || '',\n\t\t\t\tinsuranceBackUrl: this.state.insBack,\n\t\t\t\tinsuranceFrontUrl: this.state.insFront,\n\t\t\t\tinsuranceCarrier: '',\n\t\t\t\tinsuranceGroupNumber: '',\n\t\t\t\tinsurancePolicyNumber: '',\n\t\t\t\tinsuranceVerified: false,\n\t\t\t\torderImageUrl: this.state.mriOrder,\n\t\t\t\tresourceId: this.state.timeSlot.resourceId,\n\t\t\t\tserviceType: JSON.stringify(this.state.scan),\n\t\t\t\tweight: this.state.weight,\n\t\t\t\tbirthday: this.state.dob,\n\t\t\t\tserviceLength: 45, // TODO: Update service length?\n\t\t\t},\n\t\t\tsearch: '',\n\t\t\tauthToken: '',\n\t\t\twithContrast: false,\n\t\t\tlocationId: ''\n\t\t}).then((res) => {\n\t\t\tif (res.success && !!res.value && !!res.value.length) {\n\t\t\t\tsessionStorage.setItem('appointmentEntity', JSON.stringify(res.value[0] || null));\n\t\t\t\tnavigate('/safety-questions');\n\t\t\t} else {\n\t\t\t\tthis.setState({err: res.message || ''});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate renderWeight() {\n\t\treturn false;\n\t\treturn (\n\t\t\t<div className=\"inputrow\">\n\t\t\t\t<label htmlFor=\"Weight\" className=\"flexlabel\">\n\t\t\t\t\tWeight\n\t\t\t\t</label>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName=\"flexinput w-input\"\n\t\t\t\t\tmaxLength={256}\n\t\t\t\t\tname=\"Weight\"\n\t\t\t\t\tdata-name=\"Weight\"\n\t\t\t\t\tid=\"Weight\"\n\t\t\t\t\tvalue={this.state.weight}\n\t\t\t\t\tonChange={(e) => this.setState({weight: e.currentTarget.value}, () => this.updateStorage())}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tprivate renderHeight() {\n\t\treturn false;\n\t\treturn (\n\t\t\t<div className=\"inputrow\">\n\t\t\t\t<label htmlFor=\"Height\" className=\"flexlabel\">\n\t\t\t\t\tHeight\n\t\t\t\t</label>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName=\"flexinput w-input\"\n\t\t\t\t\tmaxLength={256}\n\t\t\t\t\tname=\"Height\"\n\t\t\t\t\tdata-name=\"Height\"\n\t\t\t\t\tid=\"Height\"\n\t\t\t\t\tvalue={this.state.height}\n\t\t\t\t\tonChange={(e) => this.setState({height: e.currentTarget.value}, () => this.updateStorage())}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ContactInformation;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport { waitForRouteChange } from \"./wait-for-route-change\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  waitForRouteChange,\n}\n","import {SlotAvailabilityTime} from \"../api/api\";\nimport {IScan} from \"./Scan\";\n\nexport class SafetyState {\n\tconstructor() {\n\t\tthis.fname =  '';\n\t\tthis.lname =  '';\n\t\tthis.answers =  {};\n\t\tthis.implants =  [];\n\t\tthis.currentImplant =  '';\n\t\tthis.scan =  null;\n\t\tthis.haveOrder =  false;\n\t\tthis.overrideSafetyWarning =  false;\n\t\tthis.email = '';\n\t\tthis.phone = '';\n\t\tthis.height = '';\n\t\tthis.weight = '';\n\t\tthis.doctorName = '';\n\t\tthis.insFront = '';\n\t\tthis.insBack = '';\n\t\tthis.mriOrder = '';\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tthis.timeSlot = JSON.parse(sessionStorage.getItem('timeSlot') || '{}');\n\t\t}\n\t\tthis.err = '';\n\t\tthis.dob = '';\n\t\tthis.carrierNumber = '';\n\t\tthis.groupNumber = '';\n\t\tthis.policyNumber = '';\n\t}\n\tpublic fname: string;\n\tpublic lname: string;\n\tpublic email: string;\n\tpublic phone: string;\n\tpublic answers: any;\n\tpublic implants: string[];\n\tpublic currentImplant: string;\n\tpublic haveOrder: boolean;\n\tpublic scan: IScan | null;\n\tpublic overrideSafetyWarning: boolean;\n\tpublic height: string;\n\tpublic weight: string;\n\tpublic doctorName: string;\n\tpublic insFront: string;\n\tpublic insBack: string;\n\tpublic mriOrder: string;\n\tpublic carrierNumber: string;\n\tpublic groupNumber: string;\n\tpublic policyNumber: string;\n\tpublic timeSlot: SlotAvailabilityTime | null;\n\tpublic err: string;\n\tpublic dob: string;\n\n\tpublic static loadState(): SafetyState {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst jsonState = JSON.parse(sessionStorage.getItem('wizard') || '{}');\n\t\t\tconst o = {\n\t\t\t\t// fname: sessionStorage.getItem('fname') || '',\n\t\t\t\t// lname: sessionStorage.getItem('lname') || '',\n\t\t\t\t// email: sessionStorage.getItem('email') || '',\n\t\t\t\t// phone: sessionStorage.getItem('phone') || '',\n\t\t\t\t// height: sessionStorage.getItem('height') || '',\n\t\t\t\t// weight: sessionStorage.getItem('weight') || '',\n\t\t\t\t// doctorName: sessionStorage.getItem('doctorName') || '',\n\t\t\t\t// insFront: sessionStorage.getItem('insFront') || '',\n\t\t\t\t// insBack: sessionStorage.getItem('insBack') || '',\n\t\t\t\t// mriOrder: sessionStorage.getItem('mriOrder') || '',\n\t\t\t\tscan: JSON.parse(sessionStorage.getItem('scan') || '{}'),\n\t\t\t\thaveOrder: sessionStorage.getItem('haveOrder') === 'true',\n\t\t\t};\n\t\t\treturn Object.assign(new SafetyState(), jsonState, o);\n\t\t}\n\t\treturn new SafetyState();\n\t}\n}\n","import * as React from 'react'\nimport styled from 'react-emotion'\nimport { transparentize } from 'polished'\nimport { Link } from 'gatsby'\n\nimport { heights, dimensions, colors } from '../styles/variables'\nimport Container from './Container'\nimport * as Webflow from '../styles/webflow';\nimport { css } from \"emotion\";\n\nconst StyledHeader = styled.header('navContainer');\n\nconst Header: React.SFC<{}> = ({}) => (\n\t<header>\n\t\t<div className=\"nav-grid\">\n\t\t\t<div id=\"w-node-82dfbff5e208-14f3913a\" className=\"header-cta-top\">\n\t\t\t\t<div className=\"header-inline-block\">\n\t\t\t\t\t<div className=\"cta-heading inline-block blue\">Call :</div>\n\t\t\t\t\t<div className=\"cta-heading inline-block\"><a href=\"tel:+18334332567\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t className=\"white\">833-IDEAL-MR</a></div>\n\t\t\t\t</div>\n\t\t\t\t<a href=\"/schedule\" className=\"button-3\">Schedule Online</a></div>\n\t\t\t<a href=\"/\" id=\"w-node-82dfbff5e20f-14f3913a\" className=\"brand w-nav-brand w--current\"><img\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5ba3081aff7d475f9a6fa6d1_Logo%20Dark.svg\"\n\t\t\t\talt=\"\" className=\"image-3\"/></a>\n\t\t\t<div data-collapse=\"medium\" data-animation=\"default\" data-duration=\"400\" id=\"w-node-82dfbff5e211-14f3913a\"\n\t\t\t\t className=\"navbar w-nav\">\n\t\t\t\t<nav role=\"navigation\" className=\"navigation-menu w-nav-menu\"><a href=\"/why-ideal-mri\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t className=\"navigation-link-2 white w-nav-link\">Why\n\t\t\t\t\tideal MRI</a><a href=\"/for-clinicians\" className=\"navigation-link-2 white w-nav-link\">Meet Our\n\t\t\t\t\tTeam</a><a href=\"/what-to-expect\" className=\"navigation-link-2 white w-nav-link\">What to\n\t\t\t\t\tExpect</a><a href=\"/pricing-and-insurance\"\n\t\t\t\t\t\t\t\t className=\"navigation-link-2 white w-nav-link\">Pricing &amp; Insurance</a><a\n\t\t\t\t\thref=\"/for-clinicians\" className=\"navigation-link-2 white w-nav-link\">For Clinicians</a><a\n\t\t\t\t\thref=\"/come-see-us\" className=\"navigation-link-2 white w-nav-link\">Find Us</a></nav>\n\t\t\t\t<div className=\"hamburger-button-2 white w-nav-button\">\n\t\t\t\t\t<div className=\"w-icon-nav-menu\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div className=\"nav-spacer\">&nbsp;</div>\n\t</header>\n);\n\nexport default Header\n","import * as React from 'react'\nimport styled from 'react-emotion'\n\nconst StyledLayoutRoot = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`\n\ninterface LayoutRootProps {\n  className?: string\n}\n\nconst LayoutRoot: React.SFC<LayoutRootProps> = ({ children, className }) => (\n  <StyledLayoutRoot className={className}>{children}</StyledLayoutRoot>\n)\n\nexport default LayoutRoot\n","import * as React from 'react'\n// import styled from 'react-emotion'\n// const StyledLayoutMain = styled.main`\n//   display: flex;\n//   flex-direction: column;\n//   flex: 1;\n//\n\ninterface LayoutMainProps {\n  className?: string\n}\n\n// <StyledLayoutMain className={className}>{children}</StyledLayoutMain>\nconst LayoutMain: React.SFC<LayoutMainProps> = ({ children, className }) => (\n  <main className={className || \"white-section\"}>\n      <div className=\"vspace80 w-container\">\n          {children}\n      </div>\n  </main>\n);\n\nexport default LayoutMain\n","import * as React from 'react'\nimport Helmet from \"react-helmet\";\n\nconst Footer: React.SFC<{}> = ({}) => (\n\t<footer className=\"cta-section centered-accented\">\n\t\t<div className=\"cta-footer\">\n\t\t\t<div className=\"footer-inline-block\">\n\t\t\t\t<h2 className=\"cta-heading inline-block blue\"><a href=\"tel:+18334332567\">Call</a> : </h2>\n\t\t\t\t<h2 className=\"cta-heading inline-block\"><a href=\"tel:+18334332567\" className=\"white\">833-IDEAL-MR</a>\n\t\t\t\t</h2>\n\t\t\t</div>\n\t\t\t<a href=\"/schedule\" className=\"button large\">Schedule Online</a></div>\n\t\t<div className=\"cta-footer\"><img\n\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5ba3081aff7d475f9a6fa6d1_Logo%20Dark.svg\"\n\t\t\theight=\"60\" alt=\"\" className=\"cta-branding\"/><a href=\"/policies-and-hipaa-notice\">Policies and\n\t\t\tInformation</a></div>\n\t\t<Helmet>\n\t\t\t<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" type=\"text/javascript\"\n\t\t\t\t\tintegrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossOrigin=\"anonymous\" />\n\t\t\t<script src=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/js/ideal-mri.71c22ec14.js\"\n\t\t\t\t\ttype=\"text/javascript\" />\n\t\t</Helmet>\n\t</footer>\n);\n\nexport default Footer\n","import * as React from 'react'\n\nconst Footer: React.SFC<{}> = ({}) => (\n\t<section className=\"cta-section\">\n\t\t<div className=\"w-container\">\n\t\t\t<div className=\"w-layout-grid grid-2\"><a href=\"/why-ideal-mri\" id=\"w-node-774288a9e25a-774089fe\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t className=\"cta-grid-item w-inline-block\"><img\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead31fb9e09c21b36b101_Why.svg\" alt=\"\"\n\t\t\t\tclassName=\"cta-button-image\"/>\n\t\t\t\t<div id=\"w-node-774288a9e25c-774089fe\">Why ideal MRI</div>\n\t\t\t</a><a href=\"/what-to-expect\" id=\"w-node-774288a9e25e-774089fe\"\n\t\t\t\t   className=\"cta-grid-item w-inline-block\"><img\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f69d670128b342c0a_Expect.svg\"\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\n\t\t\t\t<div>What to Expect</div>\n\t\t\t</a><a href=\"/meet-our-team\" id=\"w-node-774288a9e262-774089fe\" className=\"cta-grid-item w-inline-block\"><img\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f3661e73d2f76eedd_Meet%20Our%20Team.svg\"\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\n\t\t\t\t<div>Meet Our Team</div>\n\t\t\t</a><a href=\"/for-clinicians\" id=\"w-node-774288a9e266-774089fe\"\n\t\t\t\t   className=\"cta-grid-item w-inline-block\"><img\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead313661e7266876eedf_Providers.svg\"\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\n\t\t\t\t<div>For Clinicians</div>\n\t\t\t</a><a href=\"/pricing-and-insurance\" id=\"w-node-774288a9e26a-774089fe\"\n\t\t\t\t   className=\"cta-grid-item w-inline-block\"><img\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead313661e7547b76eee0_Pricing.svg\"\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\n\t\t\t\t<div>Pricing &amp; Insurance</div>\n\t\t\t</a><a href=\"/come-see-us\" id=\"w-node-774288a9e26e-774089fe\" className=\"cta-grid-item w-inline-block\"><img\n\t\t\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5b9ead2f08470e4beefa3f54_Find%20Us.svg\"\n\t\t\t\talt=\"\" className=\"cta-button-image\"/>\n\t\t\t\t<div>Find Us</div>\n\t\t\t</a></div>\n\t\t</div>\n\t</section>\n);\n\nexport default Footer\n","import * as React from 'react'\nimport Helmet from 'react-helmet'\nimport {StaticQuery, graphql} from 'gatsby'\n\n// import 'modern-normalize'\n// import '../styles/normalize'\nimport '../styles/webflow.css'\nimport '../styles/webflow.grid.css'\nimport '../styles/animate.css'\nimport '../styles/tables.css'\n\nimport Header from '../components/Header'\nimport LayoutRoot from '../components/LayoutRoot'\nimport LayoutMain from '../components/LayoutMain'\nimport Footer from \"../components/Footer\";\nimport FooterNav from \"../components/FooterNav\";\n\ntype StaticQueryProps = {\n\tsite: {\n\t\tsiteMetadata: {\n\t\t\ttitle: string\n\t\t\tdescription: string\n\t\t}\n\t}\n}\n\nconst IndexLayout: React.SFC = ({children}) => (\n\t<StaticQuery\n\t\tquery={graphql`\n      query IndexLayoutQuery {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `}\n\t\trender={(data: StaticQueryProps) => (\n\t\t\t<LayoutRoot>\n\t\t\t\t<Helmet\n\t\t\t\t\ttitle={data.site.siteMetadata.title}\n\t\t\t\t\tmeta={[\n\t\t\t\t\t\t{name: 'description', content: data.site.siteMetadata.description},\n\t\t\t\t\t\t{name: 'keywords', content: 'gatsbyjs, gatsby, javascript, sample, something'}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<Header/>\n\t\t\t\t<LayoutMain>{children}</LayoutMain>\n\t\t\t\t<FooterNav/>\n\t\t\t\t<Footer/>\n\t\t\t</LayoutRoot>\n\t\t)}\n\t/>\n)\n\nexport default IndexLayout\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import * as React from 'react';\nimport {Link} from 'gatsby';\nimport {SlotAvailabilityTime} from \"../api/api\";\n\nconst Chevron = (props: {translucent?: boolean}) => (\n\t<img\n\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5be12c8e888fb5963088dc64_chevron-right-blue-2.svg\"\n\t\twidth=\"38\" height=\"38\" alt=\"Chevron right\" className={props.translucent ? 'translucent' : ''}/>\n);\n\nexport const Ez123 = (props: {num: number}) => (\n\t<div>\n\t\t<div className=\"breadcrumb-row\">\n\t\t\t<div className={'circled ' + (props.num < 1 ? 'translucent' : '') }>1</div>\n\t\t\t<Chevron translucent={props.num < 2} />\n\t\t\t<div className={'circled ' + (props.num < 2 ? 'translucent' : '') }>2</div>\n\t\t\t<Chevron translucent={props.num < 3} />\n\t\t\t<div className={'circled ' + (props.num < 3 ? 'translucent' : '') }>3</div>\n\t\t</div>\n\t\t<div className=\"breadcrumb-row\">\n\t\t\t{props.num === 1 && <h3><strong>Step 1.</strong> Your details</h3>}\n\t\t\t{props.num === 2 && <h3><strong>Step 2.</strong> Choose your scan</h3>}\n\t\t\t{props.num === 3 && <h3><strong>Step 3.</strong> Health &amp; Safety Information</h3>}\n\t\t</div>\n\t</div>\n);\n\nexport const OrderBreadcrumb = (props: {value: boolean}) => (\n    <Link to=\"/have-order\"\n       className=\"breadcrumb w-button\" style={{display: 'none'}}>\n\t\t{props.value ? 'Have Doctor\\'s Order' : 'No Order'} ✓\n\t</Link>\n);\n\nexport const MriTypeBreadcrumb = ({value}) => {\n\tif (!value) {\n\t\treturn (\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\t\tClick here to select MRI type\n\t\t\t</Link>\n\t\t);\n\t}\n\tif (typeof value === 'string') {\n\t\treturn (\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\t\tScan type: {value}\n\t\t\t</Link>\n\t\t);\n\t}\n\treturn (\n\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\n\t\t\tScan type: {value.name || 'e!name'} {value.contrast || 'e!contrast'}\n\t\t</Link>\n\t)\n};\n\nexport const TimeslotBreadcrumb = (props: {slot: SlotAvailabilityTime | null, reserved?: boolean}) => (\n\t!!props.slot ? (\n\t\t<Link to=\"/pick-time\" className=\"breadcrumb w-button\">\n\t\t\t{(props.slot.slotId || 'no time selected').replace(/(\\d{4})-(\\d{2})-(\\d{2})T([^\\s]{5}).*/g, \"$2/$3/$1 at $4\")}\n\t\t\t<br /><small>(not yet reserved)</small>\n\t\t</Link>\n\t) : <div />\n);\n","import * as React from 'react';\nimport {SafetyState} from \"../models/SafetyState\";\n\nexport abstract class FormBasePage extends React.Component<{}, SafetyState> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = SafetyState.loadState();\n\t}\n\n\tpublic getAns(q) {\n\t\treturn this.state.answers[q];\n\t}\n\n\tpublic componentDidMount() {\n\t\tconst state = SafetyState.loadState();\n\t\tthis.setState(state);\n\t}\n\n\tpublic ans(q, val) {\n\t\tconst answers = Object.assign(new SafetyState(), this.state.answers);\n\t\tanswers[q] = val;\n\t\tconsole.log(q, val, answers);\n\t\tthis.setState({answers}, () => this.saveState());\n\t}\n\n\tpublic saveState() {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tsessionStorage.setItem('wizard', JSON.stringify({\n\t\t\t\tanswers: this.state.answers,\n\t\t\t\timplants: this.state.implants,\n\t\t\t\tcurrentImplant: this.state.currentImplant,\n\t\t\t\tfname: this.state.fname,\n\t\t\t\tlname: this.state.lname,\n\t\t\t\temail: this.state.email,\n\t\t\t\tphone: this.state.phone,\n\t\t\t\theight: this.state.height,\n\t\t\t\tweight: this.state.weight,\n\t\t\t\tdoctorName: this.state.doctorName,\n\t\t\t\tinsFront: this.state.insFront,\n\t\t\t\tinsBack: this.state.insBack,\n\t\t\t\tmriOrder: this.state.mriOrder,\n\t\t\t\tscan: this.state.scan || null,\n\t\t\t\thaveOrder: this.state.haveOrder,\n\t\t\t\tdob: this.state.dob,\n\t\t\t}));\n\t\t}\n\t}\n\n\tabstract render();\n}","/**\n * ideal MRI\n * Signup Center API\n *\n * OpenAPI spec version: v1\n * Contact: ben@herila.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as querystring from \"querystring\";\nimport * as url from \"url\";\n\nimport * as isomorphicFetch from \"isomorphic-fetch\";\nimport * as assign from \"core-js/library/fn/object/assign\";\n\ninterface Dictionary<T> { [index: string]: T; }\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\n\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\nexport class BaseAPI {\n    basePath: string;\n    fetch: FetchAPI;\n\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\n        this.basePath = basePath;\n        this.fetch = fetch;\n    }\n};\n\nexport interface ApiResultListAppointment {\n    \"value\"?: Array<Appointment>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListAvailabilityRule {\n    \"value\"?: Array<AvailabilityRule>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListSlotAvailabilityDate {\n    \"value\"?: Array<SlotAvailabilityDate>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface Appointment {\n    \"resourceId\"?: string;\n    \"serviceType\"?: string;\n    \"serviceLength\"?: number;\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"address1\"?: string;\n    \"city\"?: string;\n    \"state\"?: string;\n    \"zip\"?: string;\n    \"height\"?: string;\n    \"weight\"?: string;\n    \"reminder\"?: number;\n    \"doctorName\"?: string;\n    \"doctorPhone\"?: string;\n    \"insuranceCarrier\"?: string;\n    \"insuranceGroupNumber\"?: string;\n    \"insurancePolicyNumber\"?: string;\n    \"insuranceVerified\"?: boolean;\n    \"priorAuthObtained\"?: boolean;\n    \"orderEnteredToRIS\"?: boolean;\n    \"patientWasCalled\"?: boolean;\n    \"confirmed\"?: boolean;\n    \"orderImageUrl\"?: string;\n    \"insuranceFrontUrl\"?: string;\n    \"insuranceBackUrl\"?: string;\n    \"surveyDataJson\"?: string;\n    \"approvedDate\"?: Date;\n    \"submittedDate\"?: Date;\n    \"confirmedDate\"?: Date;\n    \"birthday\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface AvailabilityRule {\n    \"priority\"?: number;\n    \"resourceID\"?: string;\n    \"onThisDay\"?: string;\n    \"startTime\"?: string;\n    \"endTime\"?: string;\n    \"comment\"?: string;\n    \"status\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface CustomerLead {\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"dob\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"serviceType\"?: string;\n    \"timeSlot\"?: string;\n    \"withContrast\"?: boolean;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface Location {\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface SlotAvailabilityDate {\n    \"date\"?: Date;\n    \"friendlyBegin\"?: string;\n    \"times\"?: Array<SlotAvailabilityTime>;\n}\n\nexport interface SlotAvailabilityTime {\n    \"time\"?: string;\n    \"resourceId\"?: string;\n    \"isHidden\"?: boolean;\n    \"isAvailable\"?: boolean;\n    \"isContrastAvailable\"?: boolean;\n    \"isContrastRequired\"?: boolean;\n    \"linkedAppointment\"?: Appointment;\n    \"slotId\"?: string;\n}\n\nexport interface Stack {\n    \"in\"?: string;\n    \"at\"?: string;\n}\n\nexport interface SurveyQuestion {\n    \"questionId\"?: string;\n    \"questionShowIf\"?: string;\n    \"questionShowIfAnswer\"?: string;\n    \"questionText\"?: string;\n    \"questionType\"?: string;\n    \"isRequired\"?: boolean;\n    \"isHidden\"?: boolean;\n    \"order\"?: number;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface TableResult {\n    \"result\"?: any;\n    \"httpStatusCode\"?: number;\n    \"etag\"?: string;\n}\n\nexport interface User {\n    \"apiKey\"?: string;\n    \"immutableId\"?: string;\n    \"referenceRowKey\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\n\n\n/**\n * AuthApi - fetch parameter creator\n */\nexport const AuthApiFetchParamCreator = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/auth`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * AuthApi - functional programming interface\n */\nexport const AuthApiFp = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * AuthApi - object-oriented interface\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * AuthApi - factory interface\n */\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Auth\n         * @param req\n         * @param authToken\n         */\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n            return AuthApiFp.auth(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * LeadGenApi - fetch parameter creator\n */\nexport const LeadGenApiFetchParamCreator = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * LeadGenApi - functional programming interface\n */\nexport const LeadGenApiFp = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * LeadGenApi - object-oriented interface\n */\nexport class LeadGenApi extends BaseAPI {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * LeadGenApi - factory interface\n */\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * PostQuestionApi - fetch parameter creator\n */\nexport const PostQuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * PostQuestionApi - functional programming interface\n */\nexport const PostQuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * PostQuestionApi - object-oriented interface\n */\nexport class PostQuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * PostQuestionApi - factory interface\n */\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         * @param req\n         */\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * QuestionApi - fetch parameter creator\n */\nexport const QuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * QuestionApi - functional programming interface\n */\nexport const QuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * QuestionApi - object-oriented interface\n */\nexport class QuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any) {\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * QuestionApi - factory interface\n */\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         */\n        getQuestions(options?: any) {\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ResourceApi - fetch parameter creator\n */\nexport const ResourceApiFetchParamCreator = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ResourceApi - functional programming interface\n */\nexport const ResourceApiFp = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ResourceApi - object-oriented interface\n */\nexport class ResourceApi extends BaseAPI {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ResourceApi - factory interface\n */\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param authToken\n         */\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ScheduleApi - fetch parameter creator\n */\nexport const ScheduleApiFetchParamCreator = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslots`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"length\": params[\"length\"],\n            \"locationId\": params[\"locationId\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ScheduleApi - functional programming interface\n */\nexport const ScheduleApiFp = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ScheduleApi - object-oriented interface\n */\nexport class ScheduleApi extends BaseAPI {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ScheduleApi - factory interface\n */\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary TimeSlots\n         * @param authToken\n         * @param withContrast\n         * @param length\n         * @param locationId\n         */\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\n        },\n    };\n};\n\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathname(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}