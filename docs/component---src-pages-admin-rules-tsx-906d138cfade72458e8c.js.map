{"version":3,"sources":["webpack:///./src/pages/admin/rules.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/api/api.ts","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/LayoutRoot.tsx","webpack:///./src/components/LayoutMain.tsx","webpack:///./src/components/Page.tsx","webpack:///./src/forms/index.tsx","webpack:///./src/layouts/admin.tsx","webpack:///./src/helpers/authToken.ts"],"names":["RulesPage","props","context","_this","_React$Component","call","this","state","hideUnavailable","hideAvailable","open","reservedUnconfirmed","confirmed","search","modal","data","startTime","endTime","resourceName","contrastReqStatus","date","err","newItemComment","componentDidMount","_this2","_api_api__WEBPACK_IMPORTED_MODULE_6__","e","availabilityRulesGET","authToken","Object","_helpers_authToken__WEBPACK_IMPORTED_MODULE_9__","a","locationId","withContrast","then","result","value","setState","message","console","log","render","react__WEBPACK_IMPORTED_MODULE_4__","createElement","_layouts_admin__WEBPACK_IMPORTED_MODULE_8__","_components_Page__WEBPACK_IMPORTED_MODULE_7__","renderInner","handleAddRule","_this3","preventDefault","availabilityRulesPOST","req","status","comment","onThisDay","partitionKey","rowKey","priority","resourceID","resp","success","alert","handleDeleteRule","renderTable","_this4","action","onSubmit","className","style","width","cellPadding","whiteSpace","map","rule","key","_forms__WEBPACK_IMPORTED_MODULE_5__","boundChoices","split","boundTextboxValue","type","n","onClick","gatsby__WEBPACK_IMPORTED_MODULE_10__","navigate","t","Component","__webpack_exports__","default","h","160","__webpack_require__","r","d","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","withPrefix","push","replace","navigateTo","_wait_for_route_change__WEBPACK_IMPORTED_MODULE_3__","c","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4___default","_parse_path__WEBPACK_IMPORTED_MODULE_5__","createContext","Consumer","staticQueryData","query","children","Error","propTypes","object","string","isRequired","func","m","module","exports","BASE_PATH","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","parse","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","contentTypeHeader","fetchOptions","method","Content-Type","body","JSON","stringify","headers","url","format","AuthApiFetchParamCreator","response","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","prototype","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","runPOST","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","ScheduleApiFetchParamCreator","length","skip","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerDELETE","appointmentHandlerGET","appointmentHandlerPOST","appointmentHandlerPUT","timeSlotsGET","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","_loader__WEBPACK_IMPORTED_MODULE_3__","ProdPageRenderer","_ref","location","pageResources","getResourcesForPathname","pathname","shape","171","173","175","177","179","react_emotion__WEBPACK_IMPORTED_MODULE_1__","StyledLayoutRoot","target","StyledPage","moment","formStyle","Row","react__WEBPACK_IMPORTED_MODULE_5__","Col","EditFormBase","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_4___default","boundLabel","title","defaultValue","ucshared__WEBPACK_IMPORTED_MODULE_7__","isEmpty","toString","formGroup","sm","sm3","ctrlLabel","sm9","boundTextbox","bindFn","placeHolder","readOnly","isDisabled","wrn","renderWarnings","disabled","maxLength","onChange","placeholder","backgroundColor","bindValFn","inputType","currentTarget","minWidth","choices","cc","choice","i","label","submitRow","actionText","submitButton","boundDate","isStart","start","end","react_datepicker__WEBPACK_IMPORTED_MODULE_6__","selected","selectsEnd","startDate","endDate","dateFormatCalendar","showMonthDropdown","showYearDropdown","val","vlc","toLowerCase","indexOf","boundTextarea","rows","boundTextareaValue","boundCheckbox","defaultChecked","checked","boundCheckboxValue","boundBooleanSwitch","insertBlock","detailBlock","react__WEBPACK_IMPORTED_MODULE_1__","gatsby__WEBPACK_IMPORTED_MODULE_3__","_components_LayoutRoot__WEBPACK_IMPORTED_MODULE_8__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","site","siteMetadata","meta","name","content","description","_components_LayoutMain__WEBPACK_IMPORTED_MODULE_9__","_public_static_d_2945440950_json__WEBPACK_IMPORTED_MODULE_0__","getAuthToken","loginRedirect","gatsby__WEBPACK_IMPORTED_MODULE_0__","token","sessionStorage","getItem","removeItem"],"mappings":"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","file":"component---src-pages-admin-rules-tsx-906d138cfade72458e8c.js","sourcesContent":["import * as React from 'react'\nimport {EditFormBase} from '../../forms';\nimport * as Api from '../../api/api';\nimport Page from '../../components/Page'\nimport AdminLayout from '../../layouts/admin'\nimport {getAuthToken} from \"../../helpers/authToken\";\nimport {navigate} from \"gatsby\";\n\ninterface IRuleEditorState {\n\thideUnavailable: boolean;\n\thideAvailable: boolean;\n\topen: boolean;\n\treservedUnconfirmed: boolean;\n\tconfirmed: boolean;\n\tsearch: string;\n\tmodal: 'confirm' | 'edit' | 'release' | null;\n\tdata: Api.AvailabilityRule[];\n\tstartTime: string;\n\tendTime: string;\n\tresourceName: string;\n\tcontrastReqStatus: string;\n\terr: string;\n\tdate: string;\n\tnewItemComment: string;\n}\n\nclass RulesPage extends React.Component<{classes: any}, IRuleEditorState>{\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\thideUnavailable: false,\n\t\t\thideAvailable: false,\n\t\t\topen: false,\n\t\t\treservedUnconfirmed: false,\n\t\t\tconfirmed: false,\n\t\t\tsearch: '',\n\t\t\tmodal: null,\n\t\t\tdata: [],\n\t\t\tstartTime: '7:00',\n\t\t\tendTime: '19:00',\n\t\t\tresourceName: '',\n\t\t\tcontrastReqStatus: '',\n\t\t\tdate: 'yyyy-mm-dd',\n\t\t\terr: '',\n\t\t\tnewItemComment: '',\n\t\t};\n\t}\n\n\tpublic componentDidMount() {\n\t\tnew Api.ResourceApi().availabilityRulesGET({\n\t\t\tsearch: '',\n\t\t\tauthToken: getAuthToken(),\n\t\t\tlocationId: '',\n\t\t\twithContrast: false,\n\t\t} as any).then((result) => {\n\t\t\tif (result.value) {\n\t\t\t\tthis.setState({data: result.value || []});\n\t\t\t} else {\n\t\t\t\tthis.setState({err: result.message || 'Error'});\n\t\t\t}\n\t\t}, (err) => {\n\t\t\tconsole.log(err);\n\t\t\t// TODO: loginRedirect()\n\t\t});\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<AdminLayout>\n\t\t\t\t<Page>\n\t\t\t\t\t{this.renderInner()}\n\t\t\t\t</Page>\n\t\t\t</AdminLayout>\n\t\t);\n\t}\n\n\tpublic handleAddRule(e) {\n\t\te.preventDefault();\n\t\tnew Api.ResourceApi().availabilityRulesPOST({\n\t\t\tauthToken: getAuthToken(),\n\t\t\treq: {\n\t\t\t\tstatus: this.state.contrastReqStatus,\n\t\t\t\tcomment: this.state.newItemComment,\n\t\t\t\tstartTime: this.state.startTime,\n\t\t\t\tendTime: this.state.endTime,\n\t\t\t\tonThisDay: this.state.search === 'Specific Date' ? this.state.date : this.state.search,\n\t\t\t\tpartitionKey: 'DefaultLocation',\n\t\t\t\trowKey: 'Auto',\n\t\t\t\tpriority: 0,\n\t\t\t\tresourceID: this.state.resourceName,\n\t\t\t},\n\t\t}).then((resp) => {\n\t\t\tif (resp.success) {\n\t\t\t\tthis.setState({data: resp.value || []});\n\t\t\t} else {\n\t\t\t\talert(resp.message);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic handleDeleteRule(e) {\n\t\te.preventDefault();\n\t}\n\n\tpublic renderTable() {\n\t\treturn (\n\t\t\t<form action=\"#\" onSubmit={(e) => this.handleAddRule(e)}>\n\t\t\t\t<table className=\"blue\" style={{width: '500px'}} cellPadding={3}>\n\t\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>#</th>\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>On this day</th>\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>Starting at time</th>\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>Until time</th>\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>ResID</th>\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>Comment</th>\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>Allow Contrast?</th>\n\t\t\t\t\t\t<th style={{whiteSpace: 'nowrap'}}>Actions</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t{(this.state.data || []).map((rule) => (\n\t\t\t\t\t\t<tr key={(rule.partitionKey || '') + (rule.rowKey || '')}>\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>{rule.priority}</td>\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>{rule.onThisDay}</td>\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>{rule.startTime}</td>\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>{rule.endTime}</td>\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>{rule.resourceID}</td>\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>{rule.comment}</td>\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>{rule.status}</td>\n\t\t\t\t\t\t\t<td style={{whiteSpace: 'nowrap'}}>-</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>New</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t{EditFormBase.boundChoices(\n\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t\"Any Weekday,Weekend,Mon,Tue,Wed,Thu,Fri,Sat,Sun,Specific Date\".split(','),\n\t\t\t\t\t\t\t\tthis.state.search,\n\t\t\t\t\t\t\t\t(search) => this.setState({search}),\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{this.state.search === 'Specific Date' && (\n\t\t\t\t\t\t\t\tEditFormBase.boundTextboxValue(\n\t\t\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t\t\t\tthis.state.date,\n\t\t\t\t\t\t\t\t\t(date) => this.setState({date})\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t{EditFormBase.boundTextboxValue('', this.state.startTime, (startTime) => this.setState({startTime}))}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t{EditFormBase.boundTextboxValue('', this.state.endTime, (endTime) => this.setState({endTime}))}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t{EditFormBase.boundTextboxValue('',\n\t\t\t\t\t\t\t\tthis.state.resourceName,\n\t\t\t\t\t\t\t\t(resourceName) => this.setState({resourceName})\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t{EditFormBase.boundTextboxValue('',\n\t\t\t\t\t\t\t\tthis.state.newItemComment,\n\t\t\t\t\t\t\t\t(newItemComment) => this.setState({newItemComment})\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t{EditFormBase.boundChoices('',\n\t\t\t\t\t\t\t\t['Contrast Unavailable', 'Contrast Available', 'Contrast Required', 'Blocked'],\n\t\t\t\t\t\t\t\tthis.state.contrastReqStatus,\n\t\t\t\t\t\t\t\t(contrastReqStatus) => this.setState({contrastReqStatus})\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<button className=\"w-button\" type=\"submit\">Add</button>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</form>\n\t\t);\n\t}\n\n\tpublic renderInner() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>Time Rules For This Location</h2>\n\t\t\t\t{this.renderTable()}\n\n\t\t\t\t<button className=\"w-button\" onClick={() => navigate('/admin/site')}>\n\t\t\t\t\tGo back to site\n\t\t\t\t</button>\n\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default RulesPage;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport { waitForRouteChange } from \"./wait-for-route-change\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  waitForRouteChange,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","/**\n * ideal MRI\n * Signup Center API\n *\n * OpenAPI spec version: v1\n * Contact: ben@herila.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as querystring from \"querystring\";\nimport * as url from \"url\";\n\nimport * as isomorphicFetch from \"isomorphic-fetch\";\nimport * as assign from \"core-js/library/fn/object/assign\";\n\ninterface Dictionary<T> { [index: string]: T; }\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\n\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\nexport class BaseAPI {\n    basePath: string;\n    fetch: FetchAPI;\n\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\n        this.basePath = basePath;\n        this.fetch = fetch;\n    }\n};\n\nexport interface ApiResultListAppointment {\n    \"value\"?: Array<Appointment>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListAvailabilityRule {\n    \"value\"?: Array<AvailabilityRule>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListSlotAvailabilityDate {\n    \"value\"?: Array<SlotAvailabilityDate>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface Appointment {\n    \"resourceId\"?: string;\n    \"serviceType\"?: string;\n    \"serviceLength\"?: number;\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"address1\"?: string;\n    \"address2\"?: string;\n    \"city\"?: string;\n    \"state\"?: string;\n    \"zip\"?: string;\n    \"height\"?: string;\n    \"weight\"?: string;\n    \"reminder\"?: number;\n    \"doctorName\"?: string;\n    \"doctorPhone\"?: string;\n    \"insuranceCarrier\"?: string;\n    \"insuranceGroupNumber\"?: string;\n    \"insurancePolicyNumber\"?: string;\n    \"insuranceVerified\"?: boolean;\n    \"priorAuthObtained\"?: boolean;\n    \"orderEnteredToRIS\"?: boolean;\n    \"patientWasCalled\"?: boolean;\n    \"confirmed\"?: boolean;\n    \"orderImageUrl\"?: string;\n    \"insuranceFrontUrl\"?: string;\n    \"insuranceBackUrl\"?: string;\n    \"surveyDataJson\"?: string;\n    \"safetyWarnings\"?: string;\n    \"approvedDate\"?: Date;\n    \"submittedDate\"?: Date;\n    \"confirmedDate\"?: Date;\n    \"birthday\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface AvailabilityRule {\n    \"priority\"?: number;\n    \"resourceID\"?: string;\n    \"onThisDay\"?: string;\n    \"startTime\"?: string;\n    \"endTime\"?: string;\n    \"comment\"?: string;\n    \"status\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface CustomerLead {\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"dob\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"serviceType\"?: string;\n    \"timeSlot\"?: string;\n    \"withContrast\"?: boolean;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface Location {\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface SlotAvailabilityDate {\n    \"date\"?: Date;\n    \"friendlyBegin\"?: string;\n    \"times\"?: Array<SlotAvailabilityTime>;\n}\n\nexport interface SlotAvailabilityTime {\n    \"time\"?: string;\n    \"resourceId\"?: string;\n    \"isHidden\"?: boolean;\n    \"isAvailable\"?: boolean;\n    \"isContrastAvailable\"?: boolean;\n    \"isContrastRequired\"?: boolean;\n    \"linkedAppointment\"?: Appointment;\n    \"slotId\"?: string;\n}\n\nexport interface Stack {\n    \"in\"?: string;\n    \"at\"?: string;\n}\n\nexport interface SurveyQuestion {\n    \"questionId\"?: string;\n    \"questionShowIf\"?: string;\n    \"questionShowIfAnswer\"?: string;\n    \"questionText\"?: string;\n    \"questionType\"?: string;\n    \"isRequired\"?: boolean;\n    \"isHidden\"?: boolean;\n    \"order\"?: number;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface TableResult {\n    \"result\"?: any;\n    \"httpStatusCode\"?: number;\n    \"etag\"?: string;\n}\n\nexport interface User {\n    \"apiKey\"?: string;\n    \"immutableId\"?: string;\n    \"referenceRowKey\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\n\n\n/**\n * AuthApi - fetch parameter creator\n */\nexport const AuthApiFetchParamCreator = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/auth`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * AuthApi - functional programming interface\n */\nexport const AuthApiFp = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * AuthApi - object-oriented interface\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * AuthApi - factory interface\n */\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Auth\n         * @param req\n         * @param authToken\n         */\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n            return AuthApiFp.auth(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * LeadGenApi - fetch parameter creator\n */\nexport const LeadGenApiFetchParamCreator = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * LeadGenApi - functional programming interface\n */\nexport const LeadGenApiFp = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * LeadGenApi - object-oriented interface\n */\nexport class LeadGenApi extends BaseAPI {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * LeadGenApi - factory interface\n */\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * PostQuestionApi - fetch parameter creator\n */\nexport const PostQuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * PostQuestionApi - functional programming interface\n */\nexport const PostQuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * PostQuestionApi - object-oriented interface\n */\nexport class PostQuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * PostQuestionApi - factory interface\n */\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         * @param req\n         */\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * QuestionApi - fetch parameter creator\n */\nexport const QuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * QuestionApi - functional programming interface\n */\nexport const QuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * QuestionApi - object-oriented interface\n */\nexport class QuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any) {\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * QuestionApi - factory interface\n */\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         */\n        getQuestions(options?: any) {\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ResourceApi - fetch parameter creator\n */\nexport const ResourceApiFetchParamCreator = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ResourceApi - functional programming interface\n */\nexport const ResourceApiFp = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ResourceApi - object-oriented interface\n */\nexport class ResourceApi extends BaseAPI {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ResourceApi - factory interface\n */\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param authToken\n         */\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ScheduleApi - fetch parameter creator\n */\nexport const ScheduleApiFetchParamCreator = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslots`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"length\": params[\"length\"],\n            \"locationId\": params[\"locationId\"],\n            \"skip\": params[\"skip\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ScheduleApi - functional programming interface\n */\nexport const ScheduleApiFp = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ScheduleApi - object-oriented interface\n */\nexport class ScheduleApi extends BaseAPI {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any) {\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ScheduleApi - factory interface\n */\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary TimeSlots\n         * @param authToken\n         * @param withContrast\n         * @param length\n         * @param locationId\n         */\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\n        },\n    };\n};\n\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathname(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import * as React from 'react'\nimport styled from 'react-emotion'\n\nconst StyledLayoutRoot = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`\n\ninterface LayoutRootProps {\n  className?: string\n}\n\nconst LayoutRoot: React.SFC<LayoutRootProps> = ({ children, className }) => (\n  <StyledLayoutRoot className={className}>{children}</StyledLayoutRoot>\n)\n\nexport default LayoutRoot\n","import * as React from 'react'\n// import styled from 'react-emotion'\n// const StyledLayoutMain = styled.main`\n//   display: flex;\n//   flex-direction: column;\n//   flex: 1;\n//\n\ninterface LayoutMainProps {\n  className?: string\n}\n\n// <StyledLayoutMain className={className}>{children}</StyledLayoutMain>\nconst LayoutMain: React.SFC<LayoutMainProps> = ({ children, className }) => (\n  <main className={className || \"white-section\"}>\n      <div className=\"vspace80 w-container\">\n          {children}\n      </div>\n  </main>\n);\n\nexport default LayoutMain\n","import * as React from 'react'\nimport styled from 'react-emotion'\n\nimport { dimensions } from '../styles/variables'\n\nconst StyledPage = styled.div`\n  display: block;\n  flex: 1;\n  position: relative;\n`\n\ninterface PageProps {\n  className?: string\n}\n\nconst Page: React.SFC<PageProps> = ({ children, className }) => <StyledPage className={className}>{children}</StyledPage>\n\nexport default Page\n","import * as React from 'react';\nimport DatePicker from 'react-datepicker';\nimport {isEmpty} from 'ucshared';\n\nconst moment = require('moment');\nconst formStyle = require('./formStyle.css');\n\nexport function formatAdminDate(date: any) {\n\treturn moment(date).format('MM/DD/YYYY');\n}\n\nconst Row = (props: any) => <div>{props.children}</div>;\nconst Col = (props: any) => <div>{props.children}</div>;\n\nexport class EditFormBase<TProps, TState> extends React.Component<TProps, TState> {\n\tpublic static formGroup = 'form-group';\n\tpublic static ctrlLabel = 'control-label';\n\tpublic static sm3 = '3';\n\tpublic static sm9 = '9';\n\tpublic static insertBlock = formStyle.insertBlock;\n\tpublic static detailBlock = formStyle.detailBlock;\n\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t}\n\n\tpublic static boundLabel(title: string, defaultValue: string | number | Date) {\n\t\tif (isEmpty(title)) {\n\t\t\treturn <span>{(defaultValue || 'null').toString()}</span>;\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{(defaultValue || 'null').toString()}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextbox(title: string, defaultValue: string | number | Date, bindFn: React.FormEventHandler<HTMLInputElement>, placeHolder?: string, readOnly?: boolean, isDisabled?: boolean) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextboxValue(title: string|null, defaultValue: string | number | Date, bindValFn: (value: string) => any, placeHolder?: string, readOnly?: boolean, isDisabled?: boolean, inputType?: string, className?: string) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tmaxLength={255}\n\t\t\t\t\t\tclassName={\"form-control \" + className || ''}\n\t\t\t\t\t\ttype={inputType || 'text'}\n\t\t\t\t\t\tonChange={(e) => bindValFn(e.currentTarget.value)}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\tstyle={!wrn ? {minWidth: '40px'} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.boundTextboxValue(null, defaultValue, bindValFn, placeHolder, readOnly, isDisabled, inputType)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundChoices(title: string|null, choices: Array<{label?: string, value: string}|string>, defaultValue: string | number | Date, bindValFn: (value: string) => any, placeHolder?: string, isDisabled?: boolean) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\tif (isEmpty(title)) {\n\t\t\tconst cc = choices.map((choice) => (typeof choice === 'string') ? {value: choice} : choice);\n\t\t\treturn (\n\t\t\t\t<span>\n\t\t\t\t\t<select\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tonChange={(e) => bindValFn(e.currentTarget.value)}\n\t\t\t\t\t\tvalue={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\tplaceholder={placeHolder || ''}\n\t\t\t\t\t\tstyle={!wrn ? {minWidth: '40px'} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"\">(none)</option>\n\t\t\t\t\t\t{cc.map((choice, i) => <option key={choice.value + i} value={choice.value}>{choice.label || choice.value}</option>)}\n\t\t\t\t\t</select>\n\t\t\t\t\t{wrn}\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.boundChoices(null, choices, defaultValue, bindValFn, placeHolder, isDisabled)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\n\tpublic static submitRow(actionText?: string) {\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}/>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t{EditFormBase.submitButton(actionText)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static submitButton(actionText?: string) {\n\t\treturn (\n\t\t\t<button type=\"submit\">{actionText || 'Submit'}</button>\n\t\t);\n\t}\n\n\tpublic static boundDate(title: string, bindFn: React.FormEventHandler<HTMLInputElement>, isStart: boolean, start?: Date, end?: Date, isDisabled?: boolean) {\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t\t<DatePicker\n\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\tclassName={'form-control'}\n\t\t\t\t\t\tselected={isStart ? moment(start) : moment(end)}\n\t\t\t\t\t\tselectsEnd\n\t\t\t\t\t\tstartDate={start && moment(start)}\n\t\t\t\t\t\tendDate={end && moment(end)}\n\t\t\t\t\t\tonChange={bindFn}\n\t\t\t\t\t\tdateFormatCalendar={'MMM YYYY'}\n\t\t\t\t\t\tshowMonthDropdown\n\t\t\t\t\t\tshowYearDropdown\n\t\t\t\t\t/>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tprotected static renderWarnings(val: string|number|Date) {\n\t\tif (typeof val !== 'string') {\n\t\t\treturn this.renderWarnings(val.toString());\n\t\t}\n\t\tif (val) {\n\t\t\tconst vlc = val.toLowerCase();\n\t\t\tif (vlc.indexOf('included') > -1) {\n\t\t\t\treturn <div className=\"alert alert-error\"><b>Warning:</b> Consider removing term <em>included</em></div>;\n\t\t\t}\n\t\t\tif (vlc.indexOf('refund') > -1) {\n\t\t\t\treturn <div className=\"alert alert-error\"><b>Warning:</b> We don't offer refunds.</div>;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static boundTextarea(title: string, defaultValue: string | number, bindFn: React.FormEventHandler<HTMLTextAreaElement>) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<textarea className=\"form-control\" onChange={bindFn} value={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\t  style={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t\t  rows={5}/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundTextareaValue(title: string, defaultValue: string | number, bindFn: (value) => any) {\n\t\tconst wrn = EditFormBase.renderWarnings(defaultValue);\n\t\treturn (\n\t\t\t<Row className={EditFormBase.formGroup}>\n\t\t\t\t<Col sm={EditFormBase.sm3}><label className={EditFormBase.ctrlLabel}>{title}</label></Col>\n\t\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<textarea className=\"form-control\"\n\t\t\t\t\t\t  onChange={(e) => bindFn(e.currentTarget.value)}\n\t\t\t\t\t\t  value={defaultValue ? defaultValue.toString() : ''}\n\t\t\t\t\t\t  style={!wrn ? {} : {backgroundColor: 'yellow'}}\n\t\t\t\t\t\t  rows={5}/>\n\t\t\t\t\t{wrn}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t);\n\t}\n\n\tpublic static boundCheckbox(title: string, defaultChecked: boolean, bindFn: React.FormEventHandler<HTMLInputElement>, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={bindFn}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n\n\tpublic static boundCheckboxValue(title: string, defaultChecked: boolean, bindFn: (isChecked: boolean) => any, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={(e) => bindFn(e.currentTarget.checked)}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n\n\tpublic static boundBooleanSwitch(title: string, defaultChecked: boolean, bindFn: (isChecked: boolean) => any, readOnly?: boolean) {\n\t\treturn <Row className={EditFormBase.formGroup}>\n\t\t\t<Col sm={EditFormBase.sm3}>\n\t\t\t\t<div className={EditFormBase.ctrlLabel}/>\n\t\t\t</Col>\n\t\t\t<Col sm={EditFormBase.sm9}>\n\t\t\t\t<div className=\"form-check\">\n\t\t\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" onChange={(e) => bindFn(e.currentTarget.checked)}\n\t\t\t\t\t\t\t   checked={defaultChecked}\n\t\t\t\t\t\t\t   disabled={readOnly}/>{' '}{title}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>;\n\t}\n}\n","import * as React from 'react'\nimport Helmet from 'react-helmet'\nimport {StaticQuery, graphql} from 'gatsby'\n\n// import 'modern-normalize'\n// import '../styles/normalize'\nimport '../styles/webflow.css'\nimport '../styles/webflow.grid.css'\nimport '../styles/animate.css'\nimport '../styles/tables.css'\n\nimport LayoutRoot from '../components/LayoutRoot'\nimport LayoutMain from '../components/LayoutMain'\n\ntype StaticQueryProps = {\n\tsite: {\n\t\tsiteMetadata: {\n\t\t\ttitle: string\n\t\t\tdescription: string\n\t\t}\n\t}\n}\n\nconst AdminLayout: React.SFC = ({children}) => (\n\t<StaticQuery\n\t\tquery={graphql`\n      query AdminLayoutQuery {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `}\n\t\trender={(data: StaticQueryProps) => (\n\t\t\t<LayoutRoot>\n\t\t\t\t<Helmet\n\t\t\t\t\ttitle={data.site.siteMetadata.title}\n\t\t\t\t\tmeta={[\n\t\t\t\t\t\t{name: 'description', content: data.site.siteMetadata.description},\n\t\t\t\t\t\t{name: 'keywords', content: 'gatsbyjs, gatsby, javascript, sample, something'}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<LayoutMain>{children}</LayoutMain>\n\t\t\t</LayoutRoot>\n\t\t)}\n\t/>\n)\n\nexport default AdminLayout\n","import { navigate } from \"gatsby\"\n\nexport function getAuthToken(): string {\n\tconst token = sessionStorage.getItem('sessionId') || '';\n\tif (token.length == 0) {\n\t\tloginRedirect();\n\t}\n\treturn token;\n}\n\nexport function loginRedirect() {\n\tsessionStorage.removeItem('sessionId');\n\tnavigate('/admin');\n}"],"sourceRoot":""}