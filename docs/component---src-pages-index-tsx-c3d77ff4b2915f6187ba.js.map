{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/models/SafetyState.ts","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./src/components/breadcrumb.tsx","webpack:///./src/api/api.ts","webpack:///./src/helpers/FormBasePage.tsx","webpack:///./src/helpers/phone.ts"],"names":["IndexPage","props","context","_FormBasePage","call","this","componentDidMount","prototype","formError","state","fname","lname","email","n","render","_this","err","react__WEBPACK_IMPORTED_MODULE_1__","createElement","_layouts__WEBPACK_IMPORTED_MODULE_2__","a","id","className","_components_breadcrumb__WEBPACK_IMPORTED_MODULE_3__","num","action","onSubmit","e","submitLead","htmlFor","type","maxLength","name","data-name","value","onChange","setState","currentTarget","saveState","required","checked","optedIn","onClick","phone","Object","_helpers_phone__WEBPACK_IMPORTED_MODULE_7__","b","data-wait","disabled","preventDefault","_api_api__WEBPACK_IMPORTED_MODULE_5__","runPOST","req","firstName","lastName","authToken","then","resp","console","log","gatsby__WEBPACK_IMPORTED_MODULE_4__","navigate","_helpers_FormBasePage__WEBPACK_IMPORTED_MODULE_6__","__webpack_exports__","default","d","162","t","r","SafetyState","answers","implants","currentImplant","haveOrder","scan","overrideSafetyWarning","height","weight","doctorName","doctorContact","insFront","insBack","mriOrder","carrierNumber","groupNumber","policyNumber","timeSlot","dob","address1","address2","city","zip","sessionStorage","JSON","parse","getItem","loadState","jsonState","o","assign","166","dP","__webpack_require__","f","FProto","Function","nameRE","configurable","get","match","168","s","u","c","Chevron","react__WEBPACK_IMPORTED_MODULE_2__","src","width","alt","translucent","Ez123","OrderBreadcrumb","gatsby__WEBPACK_IMPORTED_MODULE_3__","Link","to","style","display","MriTypeBreadcrumb","_ref","contrast","TimeslotBreadcrumb","slot","slotId","replace","169","y","E","J","U","i","BASE_PATH","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","query","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","contentTypeHeader","fetchOptions","method","Content-Type","body","stringify","headers","url","format","AuthApiFetchParamCreator","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","locationId","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesGET","availabilityRulesPOST","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","withContrast","search","ScheduleApiFetchParamCreator","length","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerDELETE","appointmentHandlerGET","appointmentHandlerPOST","appointmentHandlerPUT","timeSlotsGET","FormBasePage","_React$Component","_models_SafetyState__WEBPACK_IMPORTED_MODULE_3__","_proto","getAns","q","ans","val","_this2","setItem","Component","220","formatPhone","ph","m","exec","formatDate","date","dt"],"mappings":"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","file":"component---src-pages-index-tsx-c3d77ff4b2915f6187ba.js","sourcesContent":["import * as React from 'react'\r\nimport IndexLayout from '../layouts'\r\nimport {Ez123} from \"../components/breadcrumb\";\r\nimport {navigate} from \"gatsby\";\r\nimport {LeadGenApi} from \"../api/api\";\r\nimport {FormBasePage} from \"../helpers/FormBasePage\";\r\nimport {formatDate, formatPhone} from \"../helpers/phone\";\r\n\r\nclass IndexPage extends FormBasePage {\r\n\tconstructor(props, context) {\r\n\t\tsuper(props, context);\r\n\t}\r\n\tpublic componentDidMount() {\r\n\t\tsuper.componentDidMount();\r\n\t}\r\n\r\n\tpublic formError() {\r\n\t\tif (this.state.fname === '') return 'First name is required';\r\n\t\tif (this.state.lname === '') return 'Last name is required';\r\n\t\tif (this.state.email === '') return 'Email is required';\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic render() {\r\n\t\tconst err = this.formError();\r\n\t\treturn <IndexLayout>\r\n\t\t\t<section id=\"Q1\" className=\"vspace80 w-container\">\r\n\t\t\t\t<div className=\"vspace40 centered w-row\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Ez123 num={0} />\r\n\t\t\t\t\t\t<h3>Ready to schedule your MRI?</h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"vspace40 centered w-row\">\r\n\t\t\t\t\t<div className=\"w-hidden-small w-hidden-tiny w-col w-col-3\"/>\r\n\t\t\t\t\t<div className=\"w-col w-col-6\">\r\n\r\n\t\t\t\t\t\t<div className=\"w-form\">\r\n\t\t\t\t\t\t\t<form action=\"#\" onSubmit={(e) => this.submitLead(e)}>\r\n\t\t\t\t\t\t\t\t<label htmlFor=\"fname\">First name</label>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"w-input centered\"\r\n\t\t\t\t\t\t\t\t\tmaxLength={256}\r\n\t\t\t\t\t\t\t\t\tname=\"fname\"\r\n\t\t\t\t\t\t\t\t\tdata-name=\"First Name\"\r\n\t\t\t\t\t\t\t\t\tid=\"fname\"\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.fname}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({fname: e.currentTarget.value}, () => this.saveState())}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<label htmlFor=\"lname\">Last name</label>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"w-input centered\"\r\n\t\t\t\t\t\t\t\t\tmaxLength={256}\r\n\t\t\t\t\t\t\t\t\tname=\"lname\"\r\n\t\t\t\t\t\t\t\t\tdata-name=\"Last Name\"\r\n\t\t\t\t\t\t\t\t\tid=\"lname\"\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.lname}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({lname: e.currentTarget.value}, () => this.saveState())}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<label htmlFor=\"email\">Email Address</label>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"w-input centered\"\r\n\t\t\t\t\t\t\t\t\tmaxLength={256}\r\n\t\t\t\t\t\t\t\t\tname=\"email\"\r\n\t\t\t\t\t\t\t\t\tdata-name=\"Email\"\r\n\t\t\t\t\t\t\t\t\tid=\"email\"\r\n\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.email}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({email: e.currentTarget.value}, () => this.saveState())}\r\n\t\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t\t<div className=\"inputrow\">\r\n\t\t\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.optedIn}\r\n\t\t\t\t\t\t\t\t\t\t\tvalue=\"yes\"\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => this.setState({optedIn: e.currentTarget.checked})}\r\n\t\t\t\t\t\t\t\t\t\t/>&nbsp;\r\n\t\t\t\t\t\t\t\t\t\tIt's OK to send me more information about ideal MRI. (We'll never share your information)\r\n\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<label htmlFor=\"email\">Phone</label>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"w-input centered\"\r\n\t\t\t\t\t\t\t\t\tmaxLength={256}\r\n\t\t\t\t\t\t\t\t\tname=\"phone\"\r\n\t\t\t\t\t\t\t\t\tdata-name=\"Phone\"\r\n\t\t\t\t\t\t\t\t\tid=\"phone\"\r\n\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.phone}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({phone: formatPhone(e.currentTarget.value)}, () => this.saveState())}\r\n\t\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t\tvalue=\"Let's begin!\"\r\n\t\t\t\t\t\t\t\t\tdata-wait=\"Please wait...\"\r\n\t\t\t\t\t\t\t\t\tclassName={`${err ? 'disabled ' : ''}w-button`}\r\n\t\t\t\t\t\t\t\t\tdisabled={!!err}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"w-hidden-small w-hidden-tiny w-col w-col-3\"/>\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\t\t</IndexLayout>;\r\n\t}\r\n\r\n\tprivate submitLead(e: React.FormEvent<HTMLFormElement>) {\r\n\t\te.preventDefault();\r\n\t\tnew LeadGenApi().runPOST({\r\n\t\t\treq: {\r\n\t\t\t\tfirstName: this.state.fname,\r\n\t\t\t\tlastName: this.state.lname,\r\n\t\t\t\temail: this.state.email,\r\n\t\t\t},\r\n\t\t\tauthToken: '',\r\n\t\t}).then((resp) => {\r\n\t\t\tconsole.log(resp);\r\n\t\t\tnavigate('/have-order');\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport default IndexPage\r\n","import {SlotAvailabilityTime} from \"../api/api\";\r\nimport {IScan} from \"./Scan\";\r\n\r\nexport class SafetyState {\r\n\tconstructor() {\r\n\t\tthis.fname =  '';\r\n\t\tthis.lname =  '';\r\n\t\tthis.answers =  {};\r\n\t\tthis.implants =  [];\r\n\t\tthis.currentImplant =  '';\r\n\t\tthis.scan =  null;\r\n\t\tthis.haveOrder =  false;\r\n\t\tthis.overrideSafetyWarning =  false;\r\n\t\tthis.email = '';\r\n\t\tthis.phone = '';\r\n\t\tthis.height = '';\r\n\t\tthis.weight = '';\r\n\t\tthis.doctorName = '';\r\n\t\tthis.doctorContact = '';\r\n\t\tthis.insFront = '';\r\n\t\tthis.insBack = '';\r\n\t\tthis.mriOrder = '';\r\n\t\tif (typeof sessionStorage !== 'undefined') {\r\n\t\t\tthis.timeSlot = JSON.parse(sessionStorage.getItem('timeSlot') || '{}');\r\n\t\t} else {\r\n\t\t\tthis.timeSlot = null;\r\n\t\t}\r\n\t\tthis.err = '';\r\n\t\tthis.dob = '';\r\n\t\tthis.carrierNumber = '';\r\n\t\tthis.groupNumber = '';\r\n\t\tthis.policyNumber = '';\r\n\t\tthis.address1 = '';\r\n\t\tthis.address2 = '';\r\n\t\tthis.city = '';\r\n\t\tthis.state = '';\r\n\t\tthis.zip = '';\r\n\t\tthis.optedIn = true;\r\n\t}\r\n\tpublic fname: string;\r\n\tpublic lname: string;\r\n\tpublic email: string;\r\n\tpublic phone: string;\r\n\tpublic answers: any;\r\n\tpublic implants: string[];\r\n\tpublic currentImplant: string;\r\n\tpublic haveOrder: boolean;\r\n\tpublic scan: IScan | null;\r\n\tpublic overrideSafetyWarning: boolean;\r\n\tpublic height: string;\r\n\tpublic weight: string;\r\n\tpublic doctorName: string;\r\n\tpublic doctorContact: string;\r\n\tpublic insFront: string;\r\n\tpublic insBack: string;\r\n\tpublic mriOrder: string;\r\n\tpublic carrierNumber: string;\r\n\tpublic groupNumber: string;\r\n\tpublic policyNumber: string;\r\n\tpublic timeSlot: SlotAvailabilityTime | null;\r\n\tpublic err: string;\r\n\tpublic dob: string;\r\n\tpublic address1: string;\r\n\tpublic address2: string;\r\n\tpublic city: string;\r\n\tpublic state: string;\r\n\tpublic zip: string;\r\n\tpublic optedIn: boolean;\r\n\r\n\tpublic static loadState(): SafetyState {\r\n\t\tif (typeof sessionStorage !== 'undefined') {\r\n\t\t\tconst jsonState = JSON.parse(sessionStorage.getItem('wizard') || '{}');\r\n\t\t\tconst o = {\r\n\t\t\t\t// fname: sessionStorage.getItem('fname') || '',\r\n\t\t\t\t// lname: sessionStorage.getItem('lname') || '',\r\n\t\t\t\t// email: sessionStorage.getItem('email') || '',\r\n\t\t\t\t// phone: sessionStorage.getItem('phone') || '',\r\n\t\t\t\t// height: sessionStorage.getItem('height') || '',\r\n\t\t\t\t// weight: sessionStorage.getItem('weight') || '',\r\n\t\t\t\t// doctorName: sessionStorage.getItem('doctorName') || '',\r\n\t\t\t\t// insFront: sessionStorage.getItem('insFront') || '',\r\n\t\t\t\t// insBack: sessionStorage.getItem('insBack') || '',\r\n\t\t\t\t// mriOrder: sessionStorage.getItem('mriOrder') || '',\r\n\t\t\t\tscan: JSON.parse(sessionStorage.getItem('scan') || '{}'),\r\n\t\t\t\thaveOrder: sessionStorage.getItem('haveOrder') === 'true',\r\n\t\t\t};\r\n\t\t\treturn Object.assign(new SafetyState(), jsonState, o);\r\n\t\t}\r\n\t\treturn new SafetyState();\r\n\t}\r\n}\r\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","import * as React from 'react';\r\nimport {Link} from 'gatsby';\r\nimport {SlotAvailabilityTime} from \"../api/api\";\r\n\r\nconst Chevron = (props: {translucent?: boolean}) => (\r\n\t<img\r\n\t\tsrc=\"https://uploads-ssl.webflow.com/5b9e87c40899a487ba8091e4/5be12c8e888fb5963088dc64_chevron-right-blue-2.svg\"\r\n\t\twidth=\"38\" height=\"38\" alt=\"Chevron right\" className={props.translucent ? 'translucent' : ''}/>\r\n);\r\n\r\nexport const Ez123 = (props: {num: number}) => (\r\n\t<div>\r\n\t\t<div className=\"breadcrumb-row\">\r\n\t\t\t<div className={'circled ' + (props.num < 1 ? 'translucent' : '') }>1</div>\r\n\t\t\t<Chevron translucent={props.num < 2} />\r\n\t\t\t<div className={'circled ' + (props.num < 2 ? 'translucent' : '') }>2</div>\r\n\t\t\t<Chevron translucent={props.num < 3} />\r\n\t\t\t<div className={'circled ' + (props.num < 3 ? 'translucent' : '') }>3</div>\r\n\t\t</div>\r\n\t\t<div className=\"breadcrumb-row\">\r\n\t\t\t{props.num === 1 && <h3><strong>Step 1.</strong> Your details</h3>}\r\n\t\t\t{props.num === 2 && <h3><strong>Step 2.</strong> Choose your scan</h3>}\r\n\t\t\t{props.num === 3 && <h3><strong>Step 3.</strong> Health &amp; Safety Information</h3>}\r\n\t\t</div>\r\n\t</div>\r\n);\r\n\r\nexport const OrderBreadcrumb = (props: {value: boolean}) => (\r\n    <Link to=\"/have-order\"\r\n       className=\"breadcrumb w-button\" style={{display: 'none'}}>\r\n\t\t{props.value ? 'Have Doctor\\'s Order' : 'No Order'} ✓\r\n\t</Link>\r\n);\r\n\r\nexport const MriTypeBreadcrumb = ({value}) => {\r\n\tif (!value) {\r\n\t\treturn (\r\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\r\n\t\t\t\tClick here to select MRI type\r\n\t\t\t</Link>\r\n\t\t);\r\n\t}\r\n\tif (typeof value === 'string') {\r\n\t\treturn (\r\n\t\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\r\n\t\t\t\tScan type: {value} &times;\r\n\t\t\t</Link>\r\n\t\t);\r\n\t}\r\n\treturn (\r\n\t\t<Link to=\"/mri-type\" className=\"breadcrumb w-button\">\r\n\t\t\tScan type: {value.name || 'e!name'} {value.contrast || 'e!contrast'} &times;\r\n\t\t</Link>\r\n\t)\r\n};\r\n\r\nexport const TimeslotBreadcrumb = (props: {slot: SlotAvailabilityTime | null, reserved?: boolean}) => (\r\n\t!!props.slot ? (\r\n\t\t<Link to=\"/pick-time\" className=\"breadcrumb w-button\">\r\n\t\t\t{(props.slot.slotId || 'no time selected').replace(/(\\d{4})-(\\d{2})-(\\d{2})T([^\\s]{5}).*/g, \"$2/$3/$1 at $4\")} &times;<br /><small>(not yet reserved)</small>\r\n\t\t</Link>\r\n\t) : <div />\r\n);\r\n","/**\r\n * ideal MRI\r\n * Signup Center API\r\n *\r\n * OpenAPI spec version: v1\r\n * Contact: ben@herila.net\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport * as querystring from \"querystring\";\r\nimport * as url from \"url\";\r\n\r\nimport * as isomorphicFetch from \"isomorphic-fetch\";\r\nimport * as assign from \"core-js/library/fn/object/assign\";\r\n\r\ninterface Dictionary<T> { [index: string]: T; }\r\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\r\n\r\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\r\n\r\nexport interface FetchArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\nexport class BaseAPI {\r\n    basePath: string;\r\n    fetch: FetchAPI;\r\n\r\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\r\n        this.basePath = basePath;\r\n        this.fetch = fetch;\r\n    }\r\n};\r\n\r\nexport interface ApiResultListAppointment {\r\n    \"value\"?: Array<Appointment>;\r\n    \"success\"?: boolean;\r\n    \"message\"?: string;\r\n    \"stackTrace\"?: Array<Stack>;\r\n}\r\n\r\nexport interface ApiResultListAvailabilityRule {\r\n    \"value\"?: Array<AvailabilityRule>;\r\n    \"success\"?: boolean;\r\n    \"message\"?: string;\r\n    \"stackTrace\"?: Array<Stack>;\r\n}\r\n\r\nexport interface ApiResultListSlotAvailabilityDate {\r\n    \"value\"?: Array<SlotAvailabilityDate>;\r\n    \"success\"?: boolean;\r\n    \"message\"?: string;\r\n    \"stackTrace\"?: Array<Stack>;\r\n}\r\n\r\nexport interface Appointment {\r\n    \"resourceId\"?: string;\r\n    \"serviceType\"?: string;\r\n    \"serviceLength\"?: number;\r\n    \"firstName\"?: string;\r\n    \"lastName\"?: string;\r\n    \"phone\"?: string;\r\n    \"email\"?: string;\r\n    \"address1\"?: string;\r\n    \"city\"?: string;\r\n    \"state\"?: string;\r\n    \"zip\"?: string;\r\n    \"height\"?: string;\r\n    \"weight\"?: string;\r\n    \"reminder\"?: number;\r\n    \"doctorName\"?: string;\r\n    \"doctorPhone\"?: string;\r\n    \"insuranceCarrier\"?: string;\r\n    \"insuranceGroupNumber\"?: string;\r\n    \"insurancePolicyNumber\"?: string;\r\n    \"insuranceVerified\"?: boolean;\r\n    \"priorAuthObtained\"?: boolean;\r\n    \"orderEnteredToRIS\"?: boolean;\r\n    \"patientWasCalled\"?: boolean;\r\n    \"confirmed\"?: boolean;\r\n    \"orderImageUrl\"?: string;\r\n    \"insuranceFrontUrl\"?: string;\r\n    \"insuranceBackUrl\"?: string;\r\n    \"surveyDataJson\"?: string;\r\n    \"approvedDate\"?: Date;\r\n    \"submittedDate\"?: Date;\r\n    \"confirmedDate\"?: Date;\r\n    \"birthday\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface AvailabilityRule {\r\n    \"priority\"?: number;\r\n    \"resourceID\"?: string;\r\n    \"onThisDay\"?: string;\r\n    \"startTime\"?: string;\r\n    \"endTime\"?: string;\r\n    \"comment\"?: string;\r\n    \"status\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface CustomerLead {\r\n    \"firstName\"?: string;\r\n    \"lastName\"?: string;\r\n    \"dob\"?: string;\r\n    \"phone\"?: string;\r\n    \"email\"?: string;\r\n    \"serviceType\"?: string;\r\n    \"timeSlot\"?: string;\r\n    \"withContrast\"?: boolean;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface Location {\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface SlotAvailabilityDate {\r\n    \"date\"?: Date;\r\n    \"friendlyBegin\"?: string;\r\n    \"times\"?: Array<SlotAvailabilityTime>;\r\n}\r\n\r\nexport interface SlotAvailabilityTime {\r\n    \"time\"?: string;\r\n    \"resourceId\"?: string;\r\n    \"isHidden\"?: boolean;\r\n    \"isAvailable\"?: boolean;\r\n    \"isContrastAvailable\"?: boolean;\r\n    \"isContrastRequired\"?: boolean;\r\n    \"linkedAppointment\"?: Appointment;\r\n    \"slotId\"?: string;\r\n}\r\n\r\nexport interface Stack {\r\n    \"in\"?: string;\r\n    \"at\"?: string;\r\n}\r\n\r\nexport interface SurveyQuestion {\r\n    \"questionId\"?: string;\r\n    \"questionShowIf\"?: string;\r\n    \"questionShowIfAnswer\"?: string;\r\n    \"questionText\"?: string;\r\n    \"questionType\"?: string;\r\n    \"isRequired\"?: boolean;\r\n    \"isHidden\"?: boolean;\r\n    \"order\"?: number;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\nexport interface TableResult {\r\n    \"result\"?: any;\r\n    \"httpStatusCode\"?: number;\r\n    \"etag\"?: string;\r\n}\r\n\r\nexport interface User {\r\n    \"apiKey\"?: string;\r\n    \"immutableId\"?: string;\r\n    \"referenceRowKey\"?: string;\r\n    \"partitionKey\"?: string;\r\n    \"rowKey\"?: string;\r\n    \"timestamp\"?: Date;\r\n    \"eTag\"?: string;\r\n}\r\n\r\n\r\n\r\n/**\r\n * AuthApi - fetch parameter creator\r\n */\r\nexport const AuthApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/auth`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * AuthApi - functional programming interface\r\n */\r\nexport const AuthApiFp = {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\r\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * AuthApi - object-oriented interface\r\n */\r\nexport class AuthApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Auth\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\r\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * AuthApi - factory interface\r\n */\r\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Auth\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\r\n            return AuthApiFp.auth(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * LeadGenApi - fetch parameter creator\r\n */\r\nexport const LeadGenApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/leadGen`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/leadGen`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LeadGenApi - functional programming interface\r\n */\r\nexport const LeadGenApiFp = {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\r\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\r\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * LeadGenApi - object-oriented interface\r\n */\r\nexport class LeadGenApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Run\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * LeadGenApi - factory interface\r\n */\r\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Run\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Run\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\r\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * PostQuestionApi - fetch parameter creator\r\n */\r\nexport const PostQuestionApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/question`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * PostQuestionApi - functional programming interface\r\n */\r\nexport const PostQuestionApiFp = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\r\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * PostQuestionApi - object-oriented interface\r\n */\r\nexport class PostQuestionApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     * @param req\r\n     */\r\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\r\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * PostQuestionApi - factory interface\r\n */\r\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary GetQuestions\r\n         * @param req\r\n         */\r\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\r\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * QuestionApi - fetch parameter creator\r\n */\r\nexport const QuestionApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any): FetchArgs {\r\n        const baseUrl = `/api/question`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * QuestionApi - functional programming interface\r\n */\r\nexport const QuestionApiFp = {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\r\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * QuestionApi - object-oriented interface\r\n */\r\nexport class QuestionApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary GetQuestions\r\n     */\r\n    getQuestions(options?: any) {\r\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * QuestionApi - factory interface\r\n */\r\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary GetQuestions\r\n         */\r\n        getQuestions(options?: any) {\r\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * ResourceApi - fetch parameter creator\r\n */\r\nexport const ResourceApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param authToken\r\n     */\r\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslot/rules`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/locations`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"locationId\": params[\"locationId\"],\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/locations`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"locationId\": params[\"locationId\"],\r\n            \"authToken\": params[\"authToken\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ResourceApi - functional programming interface\r\n */\r\nexport const ResourceApiFp = {\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param authToken\r\n     */\r\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\r\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ResourceApi - object-oriented interface\r\n */\r\nexport class ResourceApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param authToken\r\n     */\r\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AvailabilityRules\r\n     * @param req\r\n     * @param authToken\r\n     */\r\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary Locations\r\n     * @param locationId\r\n     * @param authToken\r\n     */\r\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * ResourceApi - factory interface\r\n */\r\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param authToken\r\n         */\r\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AvailabilityRules\r\n         * @param req\r\n         * @param authToken\r\n         */\r\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Locations\r\n         * @param locationId\r\n         * @param authToken\r\n         */\r\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Locations\r\n         * @param locationId\r\n         * @param authToken\r\n         */\r\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\r\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * ScheduleApi - fetch parameter creator\r\n */\r\nexport const ScheduleApiFetchParamCreator = {\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/appointment`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"locationId\": params[\"locationId\"],\r\n            \"search\": params[\"search\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\r\n        if (params[\"req\"]) {\r\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\r\n        }\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param length\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any): FetchArgs {\r\n        const baseUrl = `/api/timeslots`;\r\n        let urlObj = url.parse(baseUrl, true);\r\n        urlObj.query = assign({}, urlObj.query, {\r\n            \"authToken\": params[\"authToken\"],\r\n            \"withContrast\": params[\"withContrast\"],\r\n            \"length\": params[\"length\"],\r\n            \"locationId\": params[\"locationId\"],\r\n        });\r\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\r\n\r\n        let contentTypeHeader: Dictionary<string> = {};\r\n        if (contentTypeHeader) {\r\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\r\n        }\r\n        return {\r\n            url: url.format(urlObj),\r\n            options: fetchOptions,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ScheduleApi - functional programming interface\r\n */\r\nexport const ScheduleApiFp = {\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param length\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\r\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\r\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\r\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                } else {\r\n                    throw response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * ScheduleApi - object-oriented interface\r\n */\r\nexport class ScheduleApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary AppointmentHandler\r\n     * @param req\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param locationId\r\n     * @param search\r\n     */\r\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\r\n    }\r\n    /**\r\n     *\r\n     * @summary TimeSlots\r\n     * @param authToken\r\n     * @param withContrast\r\n     * @param length\r\n     * @param locationId\r\n     */\r\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\r\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\r\n    }\r\n};\r\n\r\n/**\r\n * ScheduleApi - factory interface\r\n */\r\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param req\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param req\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary AppointmentHandler\r\n         * @param req\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param locationId\r\n         * @param search\r\n         */\r\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary TimeSlots\r\n         * @param authToken\r\n         * @param withContrast\r\n         * @param length\r\n         * @param locationId\r\n         */\r\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\r\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n","import * as React from 'react';\r\nimport {SafetyState} from \"../models/SafetyState\";\r\n\r\nexport abstract class FormBasePage extends React.Component<{}, SafetyState> {\r\n\tconstructor(props, context) {\r\n\t\tsuper(props, context);\r\n\t\tthis.state = SafetyState.loadState();\r\n\t}\r\n\r\n\tpublic getAns(q) {\r\n\t\treturn this.state.answers[q];\r\n\t}\r\n\r\n\tpublic componentDidMount() {\r\n\t\tconst state = SafetyState.loadState();\r\n\t\tthis.setState(state);\r\n\t}\r\n\r\n\tpublic ans(q, val) {\r\n\t\tconst answers = Object.assign(new SafetyState(), this.state.answers);\r\n\t\tanswers[q] = val;\r\n\t\tconsole.log(q, val, answers);\r\n\t\tthis.setState({answers}, () => this.saveState());\r\n\t}\r\n\r\n\tpublic saveState() {\r\n\t\tif (typeof sessionStorage !== 'undefined') {\r\n\t\t\tsessionStorage.setItem('wizard', JSON.stringify({\r\n\t\t\t\tanswers: this.state.answers,\r\n\t\t\t\timplants: this.state.implants,\r\n\t\t\t\tcurrentImplant: this.state.currentImplant,\r\n\t\t\t\tfname: this.state.fname,\r\n\t\t\t\tlname: this.state.lname,\r\n\t\t\t\temail: this.state.email,\r\n\t\t\t\tphone: this.state.phone,\r\n\t\t\t\theight: this.state.height,\r\n\t\t\t\tweight: this.state.weight,\r\n\t\t\t\tdoctorName: this.state.doctorName,\r\n\t\t\t\tdoctorContact: this.state.doctorContact,\r\n\t\t\t\tinsFront: this.state.insFront,\r\n\t\t\t\tinsBack: this.state.insBack,\r\n\t\t\t\tmriOrder: this.state.mriOrder,\r\n\t\t\t\tscan: this.state.scan || null,\r\n\t\t\t\thaveOrder: this.state.haveOrder,\r\n\t\t\t\tdob: this.state.dob,\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\tabstract render();\r\n}","export function formatPhone(phone: string) {\r\n\tconst ph = phone.replace(/[^\\d9]+/g, '');\r\n\tconst m = /([0-9]{3})([0-9]{3})([0-9]{4})/.exec(ph);\r\n\tif (m !== null && m.length === 4) {\r\n\t\treturn `(${m[1]}) ${m[2]}-${m[3]}`;\r\n\t}\r\n\treturn ph;\r\n}\r\n\r\nexport function formatDate(date: string) {\r\n\tconst dt = date.replace(/[^\\d]+/g, '');\r\n\tconst m = /([0-9]{2})\\/?([0-9]{2})\\/?([0-9]{4})/.exec(dt);\r\n\tif (m !== null && m.length === 4) {\r\n\t\treturn `${m[1]}/${m[2]}/${m[3]}`;\r\n\t}\r\n\treturn date;\r\n}"],"sourceRoot":""}