{"version":3,"sources":["webpack:///./src/pages/admin/details.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/models/SafetyState.ts","webpack:///./src/api/api.ts","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/LayoutRoot.tsx","webpack:///./src/components/LayoutMain.tsx","webpack:///./src/components/Page.tsx","webpack:///./node_modules/core-js/modules/es6.regexp.to-string.js","webpack:///./node_modules/core-js/modules/_flags.js","webpack:///./node_modules/core-js/modules/es6.date.to-string.js","webpack:///./src/layouts/admin.tsx","webpack:///./src/helpers/authToken.ts","webpack:///./src/helpers/copyAppointment.ts","webpack:///./node_modules/core-js/modules/es6.regexp.flags.js","webpack:///./src/components/pick-time-component.tsx","webpack:///./src/models/Scan.ts","webpack:///./src/components/patient-details.tsx","webpack:///./node_modules/core-js/modules/es6.object.keys.js","webpack:///./node_modules/core-js/modules/_object-sap.js"],"names":["DetailsPage","props","context","_this","_React$Component","call","this","state","url","url__WEBPACK_IMPORTED_MODULE_5___default","a","parse","location","href","componentDidMount","query","val","appt","item","JSON","setState","render","react__WEBPACK_IMPORTED_MODULE_1__","createElement","_layouts_admin__WEBPACK_IMPORTED_MODULE_3__","_components_Page__WEBPACK_IMPORTED_MODULE_2__","renderInner","_this2","_components_patient_details__WEBPACK_IMPORTED_MODULE_4__","selectedSlotAvailabilityTime","onConfirm","closeModal","onCancel","n","window","close","Component","__webpack_exports__","default","l","161","t","e","__webpack_require__","r","d","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","withPrefix","navigate","push","replace","navigateTo","_wait_for_route_change__WEBPACK_IMPORTED_MODULE_3__","c","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4___default","_parse_path__WEBPACK_IMPORTED_MODULE_5__","createContext","Consumer","staticQueryData","data","children","Error","propTypes","object","string","isRequired","func","SafetyState","fname","lname","email","phone","answers","implants","currentImplant","haveOrder","scan","overrideSafetyWarning","height","weight","doctorName","doctorContact","insFront","insBack","mriOrder","carrierNumber","groupNumber","policyNumber","timeSlot","err","dob","address1","address2","city","zip","optedIn","validationResult","sessionStorage","getItem","loadState","jsonState","o","Object","assign","163","u","h","y","g","j","H","i","s","BASE_PATH","BaseAPI","fetch","basePath","isomorphic_fetch__WEBPACK_IMPORTED_MODULE_4__","AuthApiFp","params","options","fetchArgs","urlObj","url__WEBPACK_IMPORTED_MODULE_3__","core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__","authToken","contentTypeHeader","fetchOptions","method","Content-Type","req","body","stringify","headers","format","AuthApiFetchParamCreator","then","response","status","json","AuthApi","_BaseAPI","apply","arguments","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default","prototype","auth","LeadGenApiFp","LeadGenApiFetchParamCreator","LeadGenApi","_BaseAPI2","_proto2","runGET","runPOST","QuestionApiFp","QuestionApiFetchParamCreator","QuestionApi","_BaseAPI4","getQuestions","ResourceApiFp","ResourceApiFetchParamCreator","locationId","ResourceApi","_BaseAPI5","_proto5","availabilityRulesDELETE","availabilityRulesGET","availabilityRulesPOST","availabilityRulesPUT","locationsGET","locationsPOST","ScheduleApiFp","withContrast","search","ScheduleApiFetchParamCreator","length","skip","ScheduleApi","_BaseAPI6","_proto6","appointmentHandlerDELETE","appointmentHandlerGET","appointmentHandlerPOST","appointmentHandlerPUT","timeSlotsGET","m","module","exports","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","_loader__WEBPACK_IMPORTED_MODULE_3__","ProdPageRenderer","_ref","pageResources","getResourcesForPathname","pathname","shape","171","173","175","177","179","react_emotion__WEBPACK_IMPORTED_MODULE_1__","StyledLayoutRoot","target","className","StyledPage","anObject","$flags","DESCRIPTORS","$toString","toString","define","fn","RegExp","source","flags","R","concat","name","that","result","global","ignoreCase","multiline","unicode","sticky","DateProto","Date","getTime","NaN","value","191","gatsby__WEBPACK_IMPORTED_MODULE_3__","_components_LayoutRoot__WEBPACK_IMPORTED_MODULE_8__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","title","site","siteMetadata","meta","content","description","_components_LayoutMain__WEBPACK_IMPORTED_MODULE_9__","_public_static_d_2945440950_json__WEBPACK_IMPORTED_MODULE_0__","getAuthToken","loginRedirect","gatsby__WEBPACK_IMPORTED_MODULE_0__","token","removeItem","194","partitionKey","rowKey","resourceId","serviceType","serviceLength","firstName","lastName","reminder","doctorPhone","insuranceCarrier","insuranceGroupNumber","insurancePolicyNumber","insuranceVerified","priorAuthObtained","orderEnteredToRIS","patientWasCalled","confirmed","orderImageUrl","insuranceFrontUrl","insuranceBackUrl","surveyDataJson","approvedDate","submittedDate","confirmedDate","birthday","timestamp","safetyWarnings","eTag","198","f","configurable","get","208","TimePickWidget","offset","total","qna","_models_SafetyState__WEBPACK_IMPORTED_MODULE_4__","times","showModal","_proto","_api_api__WEBPACK_IMPORTED_MODULE_3__","contrast","message","renderSlotAvailabilityDate","dt","needConfirm","_this3","react__WEBPACK_IMPORTED_MODULE_2__","style","whiteSpace","friendlyBegin","map","key","time","isAvailable","onClick","pickTime","renderModal","_this4","react_modal__WEBPACK_IMPORTED_MODULE_5___default","isOpen","overlayClassName","type","onPick","selectedTime","_this5","_this$state","Fragment","date","209","scanTypes","name2","name3","name4","221","p","PatientDetailsForm","appointment","linkedAppointment","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_9___default","componentWillReceiveProps","nextProps","renderSafetyAnswers","console","log","isComplete","ucshared__WEBPACK_IMPORTED_MODULE_14__","isEmpty","q","safetyItems","Cardiac pacer","pacemaker","Stimulator","spinalStimulator","Brain implant","neurostimulator","Loop recorder","loopRecorder","Defibrillator implant","defibrillatorImplant","Other implants","Metal in eye","eye","Metal removed","e1","claustrophobic?","p1","Contrast allergy","AllergicToContrast","kidney disease?","p2","diabetes?","p3","keys","react__WEBPACK_IMPORTED_MODULE_10__","color","opacity","field","display","onChange","htmlFor","textAlign","maxLength","data-name","id","currentTarget","_models_Scan__WEBPACK_IMPORTED_MODULE_17__","tt","pickNewTime","doUpdate","doPrint","doCancel","renderTimePickModal","maxWidth","maxHeight","src","renderSafetyFormTable","preventDefault","_api_api__WEBPACK_IMPORTED_MODULE_11__","_helpers_authToken__WEBPACK_IMPORTED_MODULE_12__","_helpers_copyAppointment__WEBPACK_IMPORTED_MODULE_13__","releaseResp","success","Function","alert","print","isPickTime","react_modal__WEBPACK_IMPORTED_MODULE_15___default","onRequestClose","_pick_time_component__WEBPACK_IMPORTED_MODULE_16__","slotAvailabilityTime","setTime","slotId","split","sd","row","excluded","indexOf","fontWeight","222","toObject","$keys","it","$export","core","fails","KEY","exec","exp","S","F"],"mappings":"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","file":"component---src-pages-admin-details-tsx-f6ecf144544d3ae8b34a.js","sourcesContent":["import * as React from 'react'\nimport * as Api from '../../api/api';\nimport Page from '../../components/Page'\nimport AdminLayout from '../../layouts/admin'\nimport {PatientDetailsForm} from \"../../components/patient-details\";\nimport {SignOutButton} from \"../../components/sign-out\";\nimport {getAuthToken} from \"../../helpers/authToken\";\nimport {navigate} from \"gatsby\";\nimport {PatientReleaseForm} from \"../../components/patient-release\";\nimport ReactModal from 'react-modal';\nimport {isEmpty} from 'ucshared';\nimport urlUtility from 'url';\n\nclass DetailsPage extends React.Component<{}, {url?: urlUtility.Url; item?: Api.SlotAvailabilityTime}> {\n\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\turl: urlUtility.parse((location && location.href || ''), true),\n\t\t};\n\t}\n\n\tpublic componentDidMount(): void {\n\t\tif (this.state.url.query) {\n\t\t\tconst qs: any = this.state.url.query;\n\t\t\tconst val = qs.appt;\n\t\t\tconst item = JSON.parse(val);\n\t\t\tthis.setState({item})\n\t\t}\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<AdminLayout>\n\t\t\t\t<Page>\n\t\t\t\t\t{this.renderInner()}\n\t\t\t\t</Page>\n\t\t\t</AdminLayout>\n\t\t);\n\t}\n\n\tprivate renderInner() {\n\t\tconst {item} = this.state;\n\t\treturn !!item ? (\n\t\t\t<PatientDetailsForm\n\t\t\t\tselectedSlotAvailabilityTime={item}\n\t\t\t\tonConfirm={() => this.closeModal()}\n\t\t\t\tonCancel={() => this.closeModal()}\n\t\t\t/>\n\t\t) : <div>no item selected</div>;\n\t}\n\n\tprivate closeModal() {\n\t\tif (typeof window !== 'undefined') {\n\t\t\twindow.close();\n\t\t}\n\t}\n}\n\nexport default DetailsPage;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport { waitForRouteChange } from \"./wait-for-route-change\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  waitForRouteChange,\n}\n","import {SlotAvailabilityTime} from \"../api/api\";\nimport {IScan} from \"./Scan\";\n\nexport class SafetyState {\n\tconstructor() {\n\t\tthis.fname = '';\n\t\tthis.lname = '';\n\t\tthis.answers = {};\n\t\tthis.implants = [];\n\t\tthis.currentImplant = '';\n\t\tthis.scan = null;\n\t\tthis.haveOrder = false;\n\t\tthis.overrideSafetyWarning = false;\n\t\tthis.email = '';\n\t\tthis.phone = '';\n\t\tthis.height = '';\n\t\tthis.weight = '';\n\t\tthis.doctorName = '';\n\t\tthis.doctorContact = '';\n\t\tthis.insFront = '';\n\t\tthis.insBack = '';\n\t\tthis.mriOrder = '';\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tthis.timeSlot = JSON.parse(sessionStorage.getItem('timeSlot') || '{}');\n\t\t} else {\n\t\t\tthis.timeSlot = null;\n\t\t}\n\t\tthis.err = '';\n\t\tthis.dob = '';\n\t\tthis.carrierNumber = '';\n\t\tthis.groupNumber = '';\n\t\tthis.policyNumber = '';\n\t\tthis.address1 = '';\n\t\tthis.address2 = '';\n\t\tthis.city = '';\n\t\tthis.state = '';\n\t\tthis.zip = '';\n\t\tthis.optedIn = true;\n\t\tthis.validationResult = [];\n\t}\n\n\tpublic fname: string;\n\tpublic lname: string;\n\tpublic email: string;\n\tpublic phone: string;\n\tpublic answers: any;\n\tpublic implants: string[];\n\tpublic currentImplant: string;\n\tpublic haveOrder: boolean;\n\tpublic scan: IScan | null;\n\tpublic overrideSafetyWarning: boolean;\n\tpublic height: string;\n\tpublic weight: string;\n\tpublic doctorName: string;\n\tpublic doctorContact: string;\n\tpublic insFront: string;\n\tpublic insBack: string;\n\tpublic mriOrder: string;\n\tpublic carrierNumber: string;\n\tpublic groupNumber: string;\n\tpublic policyNumber: string;\n\tpublic timeSlot: SlotAvailabilityTime | null;\n\tpublic err: string;\n\tpublic dob: string;\n\tpublic address1: string;\n\tpublic address2: string;\n\tpublic city: string;\n\tpublic state: string;\n\tpublic zip: string;\n\tpublic optedIn: boolean;\n\tpublic validationResult: string[];\n\n\tpublic static loadState(): SafetyState {\n\t\tif (typeof sessionStorage !== 'undefined') {\n\t\t\tconst jsonState = JSON.parse(sessionStorage.getItem('wizard') || '{}');\n\t\t\tconst o = {\n\t\t\t\t// fname: sessionStorage.getItem('fname') || '',\n\t\t\t\t// lname: sessionStorage.getItem('lname') || '',\n\t\t\t\t// email: sessionStorage.getItem('email') || '',\n\t\t\t\t// phone: sessionStorage.getItem('phone') || '',\n\t\t\t\t// height: sessionStorage.getItem('height') || '',\n\t\t\t\t// weight: sessionStorage.getItem('weight') || '',\n\t\t\t\t// doctorName: sessionStorage.getItem('doctorName') || '',\n\t\t\t\t// insFront: sessionStorage.getItem('insFront') || '',\n\t\t\t\t// insBack: sessionStorage.getItem('insBack') || '',\n\t\t\t\t// mriOrder: sessionStorage.getItem('mriOrder') || '',\n\t\t\t\tscan: JSON.parse(sessionStorage.getItem('scan') || '{}'),\n\t\t\t\thaveOrder: sessionStorage.getItem('haveOrder') === 'true',\n\t\t\t};\n\t\t\treturn Object.assign(new SafetyState(), jsonState, o);\n\t\t}\n\t\treturn new SafetyState();\n\t}\n}\n","/**\n * ideal MRI\n * Signup Center API\n *\n * OpenAPI spec version: v1\n * Contact: ben@herila.net\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as querystring from \"querystring\";\nimport * as url from \"url\";\n\nimport * as isomorphicFetch from \"isomorphic-fetch\";\nimport * as assign from \"core-js/library/fn/object/assign\";\n\ninterface Dictionary<T> { [index: string]: T; }\nexport interface FetchAPI { (url: string, init?: any): Promise<any>; }\n\nexport const BASE_PATH = \"https://mrisched.azurewebsites.net\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\nexport class BaseAPI {\n    basePath: string;\n    fetch: FetchAPI;\n\n    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {\n        this.basePath = basePath;\n        this.fetch = fetch;\n    }\n};\n\nexport interface ApiResultListAppointment {\n    \"value\"?: Array<Appointment>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListAvailabilityRule {\n    \"value\"?: Array<AvailabilityRule>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface ApiResultListSlotAvailabilityDate {\n    \"value\"?: Array<SlotAvailabilityDate>;\n    \"success\"?: boolean;\n    \"message\"?: string;\n    \"stackTrace\"?: Array<Stack>;\n}\n\nexport interface Appointment {\n    \"resourceId\"?: string;\n    \"serviceType\"?: string;\n    \"serviceLength\"?: number;\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"address1\"?: string;\n    \"address2\"?: string;\n    \"city\"?: string;\n    \"state\"?: string;\n    \"zip\"?: string;\n    \"height\"?: string;\n    \"weight\"?: string;\n    \"reminder\"?: number;\n    \"doctorName\"?: string;\n    \"doctorPhone\"?: string;\n    \"insuranceCarrier\"?: string;\n    \"insuranceGroupNumber\"?: string;\n    \"insurancePolicyNumber\"?: string;\n    \"insuranceVerified\"?: boolean;\n    \"priorAuthObtained\"?: boolean;\n    \"orderEnteredToRIS\"?: boolean;\n    \"patientWasCalled\"?: boolean;\n    \"confirmed\"?: boolean;\n    \"orderImageUrl\"?: string;\n    \"insuranceFrontUrl\"?: string;\n    \"insuranceBackUrl\"?: string;\n    \"surveyDataJson\"?: string;\n    \"safetyWarnings\"?: string;\n    \"approvedDate\"?: Date;\n    \"submittedDate\"?: Date;\n    \"confirmedDate\"?: Date;\n    \"birthday\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface AvailabilityRule {\n    \"priority\"?: number;\n    \"resourceID\"?: string;\n    \"onThisDay\"?: string;\n    \"startTime\"?: string;\n    \"endTime\"?: string;\n    \"comment\"?: string;\n    \"status\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface CustomerLead {\n    \"firstName\"?: string;\n    \"lastName\"?: string;\n    \"dob\"?: string;\n    \"phone\"?: string;\n    \"email\"?: string;\n    \"serviceType\"?: string;\n    \"timeSlot\"?: string;\n    \"withContrast\"?: boolean;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface Location {\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface SlotAvailabilityDate {\n    \"date\"?: Date;\n    \"friendlyBegin\"?: string;\n    \"times\"?: Array<SlotAvailabilityTime>;\n}\n\nexport interface SlotAvailabilityTime {\n    \"time\"?: string;\n    \"resourceId\"?: string;\n    \"isHidden\"?: boolean;\n    \"isAvailable\"?: boolean;\n    \"isContrastAvailable\"?: boolean;\n    \"isContrastRequired\"?: boolean;\n    \"linkedAppointment\"?: Appointment;\n    \"slotId\"?: string;\n}\n\nexport interface Stack {\n    \"in\"?: string;\n    \"at\"?: string;\n}\n\nexport interface SurveyQuestion {\n    \"questionId\"?: string;\n    \"questionShowIf\"?: string;\n    \"questionShowIfAnswer\"?: string;\n    \"questionText\"?: string;\n    \"questionType\"?: string;\n    \"isRequired\"?: boolean;\n    \"isHidden\"?: boolean;\n    \"order\"?: number;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\nexport interface TableResult {\n    \"result\"?: any;\n    \"httpStatusCode\"?: number;\n    \"etag\"?: string;\n}\n\nexport interface User {\n    \"apiKey\"?: string;\n    \"immutableId\"?: string;\n    \"referenceRowKey\"?: string;\n    \"partitionKey\"?: string;\n    \"rowKey\"?: string;\n    \"timestamp\"?: Date;\n    \"eTag\"?: string;\n}\n\n\n\n/**\n * AuthApi - fetch parameter creator\n */\nexport const AuthApiFetchParamCreator = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/auth`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * AuthApi - functional programming interface\n */\nexport const AuthApiFp = {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: { \"req\"?: User; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n        const fetchArgs = AuthApiFetchParamCreator.auth(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * AuthApi - object-oriented interface\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     *\n     * @summary Auth\n     * @param req\n     * @param authToken\n     */\n    auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n        return AuthApiFp.auth(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * AuthApi - factory interface\n */\nexport const AuthApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Auth\n         * @param req\n         * @param authToken\n         */\n        auth(params: {  \"req\"?: User; \"authToken\"?: string; }, options?: any) {\n            return AuthApiFp.auth(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * LeadGenApi - fetch parameter creator\n */\nexport const LeadGenApiFetchParamCreator = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/leadGen`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * LeadGenApi - functional programming interface\n */\nexport const LeadGenApiFp = {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: { \"req\"?: CustomerLead; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerLead> {\n        const fetchArgs = LeadGenApiFetchParamCreator.runPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * LeadGenApi - object-oriented interface\n */\nexport class LeadGenApi extends BaseAPI {\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Run\n     * @param req\n     * @param authToken\n     */\n    runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n        return LeadGenApiFp.runPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * LeadGenApi - factory interface\n */\nexport const LeadGenApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runGET(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Run\n         * @param req\n         * @param authToken\n         */\n        runPOST(params: {  \"req\"?: CustomerLead; \"authToken\"?: string; }, options?: any) {\n            return LeadGenApiFp.runPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * PostQuestionApi - fetch parameter creator\n */\nexport const PostQuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * PostQuestionApi - functional programming interface\n */\nexport const PostQuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: { \"req\"?: SurveyQuestion;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TableResult> {\n        const fetchArgs = PostQuestionApiFetchParamCreator.postQuestion(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * PostQuestionApi - object-oriented interface\n */\nexport class PostQuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     * @param req\n     */\n    postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n        return PostQuestionApiFp.postQuestion(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * PostQuestionApi - factory interface\n */\nexport const PostQuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         * @param req\n         */\n        postQuestion(params: {  \"req\"?: SurveyQuestion; }, options?: any) {\n            return PostQuestionApiFp.postQuestion(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * QuestionApi - fetch parameter creator\n */\nexport const QuestionApiFetchParamCreator = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): FetchArgs {\n        const baseUrl = `/api/question`;\n        let urlObj = url.parse(baseUrl, true);\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * QuestionApi - functional programming interface\n */\nexport const QuestionApiFp = {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SurveyQuestion>> {\n        const fetchArgs = QuestionApiFetchParamCreator.getQuestions(options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * QuestionApi - object-oriented interface\n */\nexport class QuestionApi extends BaseAPI {\n    /**\n     *\n     * @summary GetQuestions\n     */\n    getQuestions(options?: any) {\n        return QuestionApiFp.getQuestions(options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * QuestionApi - factory interface\n */\nexport const QuestionApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary GetQuestions\n         */\n        getQuestions(options?: any) {\n            return QuestionApiFp.getQuestions(options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ResourceApi - fetch parameter creator\n */\nexport const ResourceApiFetchParamCreator = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslot/rules`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/locations`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"locationId\": params[\"locationId\"],\n            \"authToken\": params[\"authToken\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ResourceApi - functional programming interface\n */\nexport const ResourceApiFp = {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: { \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: { \"req\"?: AvailabilityRule; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAvailabilityRule> {\n        const fetchArgs = ResourceApiFetchParamCreator.availabilityRulesPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: { \"locationId\"?: string; \"authToken\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Location>> {\n        const fetchArgs = ResourceApiFetchParamCreator.locationsPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ResourceApi - object-oriented interface\n */\nexport class ResourceApi extends BaseAPI {\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param authToken\n     */\n    availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AvailabilityRules\n     * @param req\n     * @param authToken\n     */\n    availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.availabilityRulesPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary Locations\n     * @param locationId\n     * @param authToken\n     */\n    locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n        return ResourceApiFp.locationsPOST(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ResourceApi - factory interface\n */\nexport const ResourceApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesDELETE(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param authToken\n         */\n        availabilityRulesGET(params: {  \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPOST(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AvailabilityRules\n         * @param req\n         * @param authToken\n         */\n        availabilityRulesPUT(params: {  \"req\"?: AvailabilityRule; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.availabilityRulesPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsGET(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary Locations\n         * @param locationId\n         * @param authToken\n         */\n        locationsPOST(params: {  \"locationId\"?: string; \"authToken\"?: string; }, options?: any) {\n            return ResourceApiFp.locationsPOST(params, options)(fetch, basePath);\n        },\n    };\n};\n\n\n/**\n * ScheduleApi - fetch parameter creator\n */\nexport const ScheduleApiFetchParamCreator = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"DELETE\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"POST\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any): FetchArgs {\n        const baseUrl = `/api/appointment`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"locationId\": params[\"locationId\"],\n            \"search\": params[\"search\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"PUT\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        contentTypeHeader = { \"Content-Type\": \"application/json\" };\n        if (params[\"req\"]) {\n            fetchOptions.body = JSON.stringify(params[\"req\"] || {});\n        }\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any): FetchArgs {\n        const baseUrl = `/api/timeslots`;\n        let urlObj = url.parse(baseUrl, true);\n        urlObj.query = assign({}, urlObj.query, {\n            \"authToken\": params[\"authToken\"],\n            \"withContrast\": params[\"withContrast\"],\n            \"length\": params[\"length\"],\n            \"locationId\": params[\"locationId\"],\n            \"skip\": params[\"skip\"],\n        });\n        let fetchOptions: RequestInit = assign({}, { method: \"GET\" }, options);\n\n        let contentTypeHeader: Dictionary<string> = {};\n        if (contentTypeHeader) {\n            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n        }\n        return {\n            url: url.format(urlObj),\n            options: fetchOptions,\n        };\n    },\n};\n\n/**\n * ScheduleApi - functional programming interface\n */\nexport const ScheduleApiFp = {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerDELETE(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPOST(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: { \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListAppointment> {\n        const fetchArgs = ScheduleApiFetchParamCreator.appointmentHandlerPUT(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: { \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiResultListSlotAvailabilityDate> {\n        const fetchArgs = ScheduleApiFetchParamCreator.timeSlotsGET(params, options);\n        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {\n                if (response.status >= 200 && response.status < 300) {\n                    return response.json();\n                } else {\n                    throw response;\n                }\n            });\n        };\n    },\n};\n\n/**\n * ScheduleApi - object-oriented interface\n */\nexport class ScheduleApi extends BaseAPI {\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerDELETE(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerGET(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPOST(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary AppointmentHandler\n     * @param req\n     * @param authToken\n     * @param withContrast\n     * @param locationId\n     * @param search\n     */\n    appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n        return ScheduleApiFp.appointmentHandlerPUT(params, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @summary TimeSlots\n     * @param authToken\n     * @param withContrast\n     * @param length\n     * @param locationId\n     */\n    timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; \"skip\"?: number; }, options?: any) {\n        return ScheduleApiFp.timeSlotsGET(params, options)(this.fetch, this.basePath);\n    }\n};\n\n/**\n * ScheduleApi - factory interface\n */\nexport const ScheduleApiFactory = function (fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerDELETE(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerDELETE(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerGET(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPOST(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPOST(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary AppointmentHandler\n         * @param req\n         * @param authToken\n         * @param withContrast\n         * @param locationId\n         * @param search\n         */\n        appointmentHandlerPUT(params: {  \"req\"?: Appointment; \"authToken\"?: string; \"withContrast\"?: boolean; \"locationId\"?: string; \"search\"?: string; }, options?: any) {\n            return ScheduleApiFp.appointmentHandlerPUT(params, options)(fetch, basePath);\n        },\n        /**\n         *\n         * @summary TimeSlots\n         * @param authToken\n         * @param withContrast\n         * @param length\n         * @param locationId\n         */\n        timeSlotsGET(params: {  \"authToken\"?: string; \"withContrast\"?: boolean; \"length\"?: number; \"locationId\"?: string; }, options?: any) {\n            return ScheduleApiFp.timeSlotsGET(params, options)(fetch, basePath);\n        },\n    };\n};\n\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathname(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import * as React from 'react'\nimport styled from 'react-emotion'\n\nconst StyledLayoutRoot = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`\n\ninterface LayoutRootProps {\n  className?: string\n}\n\nconst LayoutRoot: React.SFC<LayoutRootProps> = ({ children, className }) => (\n  <StyledLayoutRoot className={className}>{children}</StyledLayoutRoot>\n)\n\nexport default LayoutRoot\n","import * as React from 'react'\n// import styled from 'react-emotion'\n// const StyledLayoutMain = styled.main`\n//   display: flex;\n//   flex-direction: column;\n//   flex: 1;\n//\n\ninterface LayoutMainProps {\n  className?: string\n}\n\n// <StyledLayoutMain className={className}>{children}</StyledLayoutMain>\nconst LayoutMain: React.SFC<LayoutMainProps> = ({ children, className }) => (\n  <main className={className || \"white-section\"}>\n      <div className=\"vspace80 w-container\">\n          {children}\n      </div>\n  </main>\n);\n\nexport default LayoutMain\n","import * as React from 'react'\nimport styled from 'react-emotion'\n\nimport { dimensions } from '../styles/variables'\n\nconst StyledPage = styled.div`\n  display: block;\n  flex: 1;\n  position: relative;\n`\n\ninterface PageProps {\n  className?: string\n}\n\nconst Page: React.SFC<PageProps> = ({ children, className }) => <StyledPage className={className}>{children}</StyledPage>\n\nexport default Page\n","'use strict';\nrequire('./es6.regexp.flags');\nvar anObject = require('./_an-object');\nvar $flags = require('./_flags');\nvar DESCRIPTORS = require('./_descriptors');\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var DateProto = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar $toString = DateProto[TO_STRING];\nvar getTime = DateProto.getTime;\nif (new Date(NaN) + '' != INVALID_DATE) {\n  require('./_redefine')(DateProto, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? $toString.call(this) : INVALID_DATE;\n  });\n}\n","import * as React from 'react'\nimport Helmet from 'react-helmet'\nimport {StaticQuery, graphql} from 'gatsby'\n\n// import 'modern-normalize'\n// import '../styles/normalize'\nimport '../styles/webflow.css'\nimport '../styles/webflow.grid.css'\nimport '../styles/animate.css'\nimport '../styles/tables.css'\n\nimport LayoutRoot from '../components/LayoutRoot'\nimport LayoutMain from '../components/LayoutMain'\n\ntype StaticQueryProps = {\n\tsite: {\n\t\tsiteMetadata: {\n\t\t\ttitle: string\n\t\t\tdescription: string\n\t\t}\n\t}\n}\n\nconst AdminLayout: React.SFC = ({children}) => (\n\t<StaticQuery\n\t\tquery={graphql`\n      query AdminLayoutQuery {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `}\n\t\trender={(data: StaticQueryProps) => (\n\t\t\t<LayoutRoot>\n\t\t\t\t<Helmet\n\t\t\t\t\ttitle={data.site.siteMetadata.title}\n\t\t\t\t\tmeta={[\n\t\t\t\t\t\t{name: 'description', content: data.site.siteMetadata.description},\n\t\t\t\t\t\t{name: 'keywords', content: 'gatsbyjs, gatsby, javascript, sample, something'}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<LayoutMain>{children}</LayoutMain>\n\t\t\t</LayoutRoot>\n\t\t)}\n\t/>\n)\n\nexport default AdminLayout\n","import { navigate } from \"gatsby\"\n\nexport function getAuthToken(): string {\n\tconst token = sessionStorage.getItem('sessionId') || '';\n\tif (token.length == 0) {\n\t\tloginRedirect();\n\t}\n\treturn token;\n}\n\nexport function loginRedirect() {\n\tsessionStorage.removeItem('sessionId');\n\tnavigate('/admin');\n}","import {Appointment} from \"../api/api\";\n\nfunction copyAppointment(o): Appointment {\n\tif (!o.partitionKey) {\n\t\tthrow 'No partitionKey';\n\t}\n\tif (!o.rowKey) {\n\t\tthrow 'No rowKey';\n\t}\n\treturn {\n\t\tresourceId: o.resourceId,\n\t\tserviceType: o.serviceType,\n\t\tserviceLength: o.serviceLength,\n\t\tfirstName: o.firstName,\n\t\tlastName: o.lastName,\n\t\tphone: o.phone,\n\t\temail: o.email,\n\t\taddress1: o.address1,\n\t\tcity: o.city,\n\t\tstate: o.state,\n\t\tzip: o.zip,\n\t\theight: o.height,\n\t\tweight: o.weight,\n\t\treminder: o.reminder,\n\t\tdoctorName: o.doctorName,\n\t\tdoctorPhone: o.doctorPhone,\n\t\tinsuranceCarrier: o.insuranceCarrier,\n\t\tinsuranceGroupNumber: o.insuranceGroupNumber,\n\t\tinsurancePolicyNumber: o.insurancePolicyNumber,\n\t\tinsuranceVerified: o.insuranceVerified,\n\t\tpriorAuthObtained: o.priorAuthObtained,\n\t\torderEnteredToRIS: o.orderEnteredToRIS,\n\t\tpatientWasCalled: o.patientWasCalled,\n\t\tconfirmed: o.confirmed,\n\t\torderImageUrl: o.orderImageUrl,\n\t\tinsuranceFrontUrl: o.insuranceFrontUrl,\n\t\tinsuranceBackUrl: o.insuranceBackUrl,\n\t\tsurveyDataJson: o.surveyDataJson,\n\t\tapprovedDate: o.approvedDate,\n\t\tsubmittedDate: o.submittedDate,\n\t\tconfirmedDate: o.confirmedDate,\n\t\tbirthday: o.birthday,\n\t\tpartitionKey: o.partitionKey,\n\t\trowKey: o.rowKey,\n\t\ttimestamp: o.timestamp,\n\t\tsafetyWarnings: o.safetyWarnings,\n\t\teTag: '*',\n\t};\n}\n\nexport default copyAppointment;\n","// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n","import * as React from 'react'\nimport * as Api from '../api/api'\nimport IndexLayout from '../layouts'\nimport {Ez123, MriTypeBreadcrumb} from \"../components/breadcrumb\";\nimport {navigate} from \"gatsby\";\nimport {SafetyState} from \"../models/SafetyState\";\nimport ReactModal from 'react-modal';\nimport {IScan} from \"../models/Scan\";\n\nconst take = 4;\n\ninterface TimePickState {\n\terr: any,\n\toffset: number;\n\ttotal: number;\n\tqna: SafetyState;\n\ttimes: Api.SlotAvailabilityDate[];\n\tshowModal: boolean;\n}\n\nexport class TimePickWidget extends React.Component<{scan: IScan, onPick: (time: Api.SlotAvailabilityTime) => any}, TimePickState> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\terr: '',\n\t\t\toffset: 0,\n\t\t\ttotal: 14,\n\t\t\tqna: SafetyState.loadState(),\n\t\t\ttimes: [],\n\t\t\tshowModal: false,\n\t\t};\n\t}\n\n\tpublic componentDidMount() {\n\t\tnew Api.ScheduleApi().timeSlotsGET({\n\t\t\twithContrast: this.props.scan.contrast === 'with and without contrast',\n\t\t\tlocationId: ''\n\t\t}).then((result) => {\n\t\t\tif (result.value) {\n\t\t\t\tthis.setState({\n\t\t\t\t\ttimes: result.value || [],\n\t\t\t\t\ttotal: result.value.length || 0,\n\t\t\t\t\tqna: SafetyState.loadState(),\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({\n\t\t\t\t\terr: result.message || 'Error',\n\t\t\t\t\tqna: SafetyState.loadState(),\n\t\t\t\t});\n\t\t\t}\n\t\t}, (err) => this.setState({\n\t\t\terr,\n\t\t\tqna: SafetyState.loadState(),\n\t\t}));\n\t}\n\n\tpublic renderSlotAvailabilityDate(dt: Api.SlotAvailabilityDate, needConfirm: boolean) {\n\t\treturn (\n\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t<h3 style={{whiteSpace: 'nowrap'}}>{dt.friendlyBegin}</h3>\n\t\t\t\t{dt.times ? dt.times.map((timeSlot) => (\n\t\t\t\t\t<a key={timeSlot.time}\n\t\t\t\t\t   href=\"#\"\n\t\t\t\t\t   className={`buttontimeslot ${timeSlot.isAvailable ? '' : 'unavailable '}w-button`}\n\t\t\t\t\t   onClick={() => this.pickTime(timeSlot, needConfirm)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{timeSlot.time}\n\t\t\t\t\t</a>\n\t\t\t\t)) : <div>dt.times is {typeof dt.times}</div>}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tpublic renderModal() {\n\t\treturn (\n\t\t\t<ReactModal\n\t\t\t\tisOpen={this.state.showModal}\n\t\t\t\tclassName=\"modal-content animated fadeInUp\"\n\t\t\t\toverlayClassName=\"modal-wrapper\"\n\t\t\t>\n\t\t\t\t<p><b>The time you selected is tomorrow.</b></p>\n\t\t\t\t<p>We won't have time to obtain prior authorization from your insurance carrier. If you aren't using insurance, this won't be a problem.</p>\n\t\t\t\t<p>Are you sure you want to select this time?</p>\n\t\t\t\t<p>\n\t\t\t\t\t<button type=\"button\"\n\t\t\t\t\t\t\tclassName=\"button w-button\"\n\t\t\t\t\t\t\tonClick={() => this.props.onPick(this.state.selectedTime)}>\n\t\t\t\t\t\tYes, continue\n\t\t\t\t\t</button>\n\t\t\t\t\t<button type=\"button\"\n\t\t\t\t\t\t\tclassName=\"button w-button\"\n\t\t\t\t\t\t\tonClick={() => this.setState({showModal: false})}>\n\t\t\t\t\t\tNo, change time\n\t\t\t\t\t</button>\n\t\t\t\t</p>\n\t\t\t</ReactModal>\n\t\t);\n\t}\n\n\tpublic render() {\n\t\tconst {offset, total, err, times} = this.state;\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<div className=\"w-row\">\n\t\t\t\t\t<div className=\"w-col w-col-2\">\n\t\t\t\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t\t\t\t{offset > 0 && (\n\t\t\t\t\t\t\t\t<a href=\"#\"\n\t\t\t\t\t\t\t\t   onClick={() => this.setState({offset: offset - 1})}\n\t\t\t\t\t\t\t\t   className=\"buttontimeslot w-button\">\n\t\t\t\t\t\t\t\t\t&laquo; Earlier Dates\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{times && times.map((date, i) => (\n\t\t\t\t\t\t(i >= offset && (i - offset) < take) && (\n\t\t\t\t\t\t\t<div key={JSON.stringify(date || i)} className=\"w-col w-col-2\">\n\t\t\t\t\t\t\t\t{this.renderSlotAvailabilityDate(date, i < 1)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t))}\n\t\t\t\t\t{offset + take < total && (\n\t\t\t\t\t\t<div className=\"w-col w-col-2\">\n\t\t\t\t\t\t\t<div className=\"timeslotcolumn\">\n\t\t\t\t\t\t\t\t<a href=\"#\"\n\t\t\t\t\t\t\t\t   onClick={() => this.setState({offset: offset + 1})}\n\t\t\t\t\t\t\t\t   className=\"buttontimeslot w-button\">\n\t\t\t\t\t\t\t\t\tLater Dates &gt;&gt;\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t{this.renderModal()}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n\n\tprivate pickTime(timeSlot: Api.SlotAvailabilityTime, needConfirm: boolean) {\n\t\tif (timeSlot.isAvailable) {\n\t\t\tif (needConfirm) {\n\t\t\t\tthis.setState({showModal: true});\n\t\t\t} else {\n\t\t\t\tthis.props.onPick(timeSlot);\n\t\t\t}\n\t\t}\n\t}\n}","import {SafetyState} from \"./SafetyState\";\n\nexport interface IScan {\n\tname: string;\n\tcontrast: string;\n\ttime: string;\n\tname2: string;\n\tname3: string;\n\tname4: string;\n}\n\nexport const scanTypes: IScan[] = [\n\t{name: 'Hip MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Hip MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Knee MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Knee MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Ankle MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Ankle MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Calf MRI', contrast: 'without contrast', time: '30 min', name2: 'Tib-Fib MRI', name3: 'Tibia Fibula MRI', name4: ''},\n\t{name: 'Calf MRI', contrast: 'with and without contrast', time: '30 min', name2: 'Tib-Fib MRI', name3: 'Tibia Fibula MRI', name4: ''},\n\t{name: 'Foot MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Foot MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Thigh MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Thigh MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Hand MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Hand MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Wrist MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Wrist MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Forearm MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Forearm MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Elbow MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Elbow MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Humerus MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Humerus MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Shoulder MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Shoulder MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Cervical spine MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Cervical spine MRI', contrast: 'with and without contrast', time: '30 min', name2: 'Multiple sclerosis protocol', name3: '', name4: ''},\n\t{name: 'Thoracic spine MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Thoracic spine MRI', contrast: 'with and without contrast', time: '30 min', name2: 'Multiple sclerosis protocol', name3: '', name4: ''},\n\t{name: 'Lumbar spine MRI', contrast: 'without contrast', time: '30 min', name2: 'Low back pain MRI', name3: '', name4: ''},\n\t{name: 'Lumbar spine MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Brain MRI', contrast: 'without contrast', time: '30 min', name2: 'Memory loss MRI', name3: 'Concussion evaluation MRI', name4: ''},\n\t{name: 'Brain MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Pituitary (Brain MRI)', contrast: 'with and without contrast', time: '30 min', name2: 'Pituitary protocol MRI', name3: '', name4: ''},\n\t{name: 'Brain MRA', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Neck MRA', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Neck (soft tissues) MRI', contrast: 'with and without contrast', time: '30 min', name2: 'Soft tissue neck MRI', name3: 'Neck mass MRI', name4: ''},\n\t{name: 'Chest MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Chest MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Abdomen MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Abdomen MRI', contrast: 'with and without contrast', time: '30 min', name2: 'Liver lesion MRI', name3: 'Kidney lesion MRI', name4: 'Adrenal lesion MRI'},\n\t{name: 'MRCP', contrast: 'without contrast', time: '30 min', name2: 'Biliary MRI', name3: 'MR Cholangiogram', name4: ''},\n\t{name: 'Breast implant MRI', contrast: 'without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Pelvic (bony) MRI', contrast: 'without contrast', time: '30 min', name2: 'Sacrum MRI', name3: 'SI joint MRI', name4: ''},\n\t{name: 'Pelvic (bony) MRI', contrast: 'with and without contrast', time: '30 min', name2: '', name3: '', name4: ''},\n\t{name: 'Pelvic (prostate) MRI', contrast: 'with and without contrast', time: '30 min', name2: 'Prostate MRI', name3: '', name4: ''},\n\t{name: 'Pelvic (rectum) MRI', contrast: 'with and without contrast', time: '30 min', name2: 'Rectal MRI', name3: '', name4: ''},\n\t{name: 'Pelvic (female) MRI', contrast: 'with and without contrast', time: '30 min', name2: 'Female pelvis MRI', name3: 'Uterus MRI', name4: ''},\n\t{name: 'MR Enterography', contrast: 'with and without contrast', time: '90 min', name2: 'Crohns protocol MRI', name3: '', name4: ''},\n];\n\nexport interface IScanTypeState {\n\tmriName: string;\n\tmatches: {name, contrast, time, name2, name3}[];\n\toops: string|null;\n\thaveOrder: boolean;\n\tsafetyState: SafetyState;\n}\n","import * as React from 'react';\nimport {Appointment, ScheduleApi, SlotAvailabilityTime} from \"../api/api\";\nimport {getAuthToken} from \"../helpers/authToken\";\nimport copyAppointment from \"../helpers/copyAppointment\";\nimport {isEmpty} from \"ucshared\";\nimport ReactModal from 'react-modal';\nimport {TimePickWidget} from \"./pick-time-component\";\nimport {IScan, scanTypes} from \"../models/Scan\";\n\nexport interface PatientDetailsFormProps {\n\tselectedSlotAvailabilityTime: SlotAvailabilityTime;\n\tonConfirm: () => any;\n\tonCancel: () => any;\n}\n\nexport class PatientDetailsForm extends React.Component<PatientDetailsFormProps, Appointment & {isPickTime?: boolean}> {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tconst appointment = this.props.selectedSlotAvailabilityTime.linkedAppointment;\n\t\tif (appointment) {\n\t\t\t// standardize json format\n\t\t\tappointment.serviceType = JSON.stringify(JSON.parse(appointment.serviceType || '{}'));\n\t\t}\n\t\tthis.state = appointment || {};\n\t}\n\n\tpublic componentWillReceiveProps(nextProps: Readonly<PatientDetailsFormProps>): void {\n\t\tconst {selectedSlotAvailabilityTime} = nextProps;\n\t\tif (selectedSlotAvailabilityTime !== this.props.selectedSlotAvailabilityTime) {\n\t\t\tthis.setState(selectedSlotAvailabilityTime.linkedAppointment || {});\n\t\t}\n\t}\n\n\tpublic renderSafetyAnswers() {\n\t\tif (!this.props.selectedSlotAvailabilityTime) {\n\t\t\tconsole.log('!this.props.selectedSlotAvailabilityTime');\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.props.selectedSlotAvailabilityTime.linkedAppointment) {\n\t\t\tconsole.log('!this.props.selectedSlotAvailabilityTime.linkedAppointment');\n\t\t\treturn false;\n\t\t}\n\t\tconst json = this.props.selectedSlotAvailabilityTime.linkedAppointment.surveyDataJson;\n\t\tconst isComplete = !isEmpty(json);\n\t\tconst q = JSON.parse(json || '{}');\n\t\tconst safetyItems = {\n\t\t\t\"Cardiac pacer\": q.pacemaker ? 'yes' : 'no',\n\t\t\t\"Stimulator\": q.spinalStimulator ? 'yes' : 'no',\n\t\t\t\"Brain implant\": !!q.neurostimulator,\n\t\t\t\"Loop recorder\": !!q.loopRecorder,\n\t\t\t\"Defibrillator implant\": !!q.defibrillatorImplant,\n\t\t\t\"Other implants\": q.implants ? (`yes:${q.currentImplant}` || 'no detail') : 'no',\n\t\t\t\"Metal in eye\": q.eye ? 'yes' : 'no',\n\t\t\t\"Metal removed\": q.eye ? (q.e1 ? 'yes' : 'no') : 'N/A',\n\t\t\t\"claustrophobic?\": !!q.p1,\n\t\t\t\"Contrast allergy\": q.AllergicToContrast ? 'yes' : 'no',\n\t\t\t\"kidney disease?\": !!q.p2,\n\t\t\t\"diabetes?\": !!q.p3,\n\t\t};\n\t\tconst keys = Object.keys(safetyItems);\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<div style={{color: isComplete ? 'black' : 'red'}}>\n\t\t\t\t\tSafety form completed: {isComplete ? 'yes' : 'no'}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"qa-container\" style={{opacity: isComplete ? 1 : 0.5}}>\n\t\t\t\t\t{keys.map((key) => (\n\t\t\t\t\t\t<div key={key} className=\"qa-item\">\n\t\t\t\t\t\t\t<div className=\"qa-label\">{key}</div>\n\t\t\t\t\t\t\t<div className=\"qa-answer\">{typeof safetyItems[key] === 'boolean'\n\t\t\t\t\t\t\t\t? (safetyItems[key] === true ? 'yes' : 'no')\n\t\t\t\t\t\t\t\t: (safetyItems[key])\n\t\t\t\t\t\t\t}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t)\n\t}\n\n\tprivate field(name: string, display: string, value: string|undefined, onChange: any) {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<label htmlFor={name} className=\"flexlabel\" style={{textAlign: 'right'}}>\n\t\t\t\t\t{display}&nbsp;\n\t\t\t\t</label>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName=\"flexinput w-input\"\n\t\t\t\t\tmaxLength={256}\n\t\t\t\t\tname={name}\n\t\t\t\t\tdata-name={name}\n\t\t\t\t\tid={name}\n\t\t\t\t\tvalue={value || ''}\n\t\t\t\t\tonChange={(e) => onChange(e.currentTarget.value)}\n\t\t\t\t/>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n\n\tpublic render() {\n\t\t// const scan: IScan = JSON.parse(this.state.serviceType || '{}') || {};\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"centered\">\n\t\t\t\t\t<select onChange={(e) => this.setState({serviceType: e.currentTarget.value})}\n\t\t\t\t\t\t\tvalue={this.state.serviceType}>\n\t\t\t\t\t\t{scanTypes.map((tt) => {\n\t\t\t\t\t\t\tconst val = JSON.stringify(tt);\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<option key={val} value={val}>{tt.name} {tt.contrast} ({tt.time})</option>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<button onClick={(e) => this.pickNewTime(e)} className=\"link centered\">\n\t\t\t\t\t{this.state.rowKey}\n\t\t\t\t</button>\n\t\t\t\t<div className=\"inputrow\">\n\t\t\t\t\t{this.field('first', 'First', this.state.firstName, (firstName) => this.setState({firstName}))}\n\t\t\t\t\t{this.field('last', 'Last', this.state.lastName, (lastName) => this.setState({lastName}))}\n\t\t\t\t\t{this.field('dob', 'DOB', this.state.birthday, (birthday) => this.setState({birthday}))}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"inputrow\">\n\t\t\t\t\t{this.field('phone', 'Phone', this.state.phone, (phone) => this.setState({phone}))}\n\t\t\t\t\t{this.field('Email', 'Email', this.state.email, (email) => this.setState({email}))}\n\t\t\t\t\t{this.field('Weight', 'Weight', this.state.weight, (weight) => this.setState({weight}))}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"inputrow\">\n\t\t\t\t\t{this.field('Address1', 'Address1', this.state.address1, (address1) => this.setState({address1}))}\n\t\t\t\t\t{this.field('Address2', 'Address2', this.state.address2, (address2) => this.setState({address2}))}\n\t\t\t\t\t{this.field('City', 'City', this.state.city, (city) => this.setState({city}))}\n\t\t\t\t\t{this.field('State', 'State', this.state.state, (state) => this.setState({state}))}\n\t\t\t\t\t{this.field('Zip', 'Zip', this.state.zip, (zip) => this.setState({zip}))}\n\t\t\t\t</div>\n\t\t\t\t<hr/>\n\t\t\t\t<div className=\"inputrow\">\n\t\t\t\t\t{this.field('doctorName', 'doctorName', this.state.doctorName, (doctorName) => this.setState({doctorName}))}\n\t\t\t\t\t{this.field('doctorPhone', 'doctorPhone', this.state.doctorPhone, (doctorPhone) => this.setState({doctorPhone}))}\n\n\t\t\t\t\tView order image below\n\t\t\t\t\t{/*<button className=\"w-button\">*/}\n\t\t\t\t\t\t{/*View Order*/}\n\t\t\t\t\t{/*</button>*/}\n\t\t\t\t</div>\n\n\t\t\t\t<hr/>\n\t\t\t\t<div className=\"inputrow\">\n\t\t\t\t\t{this.field('insuranceCarrier', 'insuranceCarrier', this.state.insuranceCarrier, (insuranceCarrier) => this.setState({insuranceCarrier}))}\n\t\t\t\t\t{this.field('insuranceGroupNumber', 'insuranceGroupNumber', this.state.insuranceGroupNumber, (insuranceGroupNumber) => this.setState({insuranceGroupNumber}))}\n\t\t\t\t\t{this.field('insurancePolicyNumber', 'insurancePolicyNumber', this.state.insurancePolicyNumber, (insurancePolicyNumber) => this.setState({insurancePolicyNumber}))}\n\t\t\t\t\t{/*<a className=\"w-button\" href=\"#\">View Card Front</a>*/}\n\t\t\t\t\t{/*<button className=\"w-button\">View Card Back</button>*/}\n\t\t\t\t</div>\n\t\t\t\t<hr/>\n\t\t\t\t{this.renderSafetyAnswers()}\n\t\t\t\t<hr/>\n\t\t\t\t<div className=\"centered\">\n\t\t\t\t\t<button type=\"button\" onClick={(e) => this.doUpdate(e)}>Update</button>\n\t\t\t\t\t<button type=\"button\" onClick={(e) => this.doPrint(e)}>Print Data</button>\n\t\t\t\t\t<button type=\"button\" onClick={(e) => this.doCancel(e)}>Nevermind</button>\n\t\t\t\t</div>\n\t\t\t\t{this.renderTimePickModal()}\n\t\t\t\t<hr />\n\t\t\t\t<div className=\"inputrow\">\n\t\t\t\t\t<img style={{maxWidth: '700px', maxHeight: '500px'}} src={`https://mrischedba06.blob.core.windows.net/uploads/${this.state.orderImageUrl}`}/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"inputrow\">\n\t\t\t\t\t<img style={{maxWidth: '700px', maxHeight: '500px'}} src={`https://mrischedba06.blob.core.windows.net/uploads/${this.state.insuranceFrontUrl}`}/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"inputrow\">\n\t\t\t\t\t<img style={{maxWidth: '700px', maxHeight: '500px'}} src={`https://mrischedba06.blob.core.windows.net/uploads/${this.state.insuranceBackUrl}`}/>\n\t\t\t\t</div>\n\t\t\t\t<hr />\n\t\t\t\t<h3>Extended Safety Form Data</h3>\n\t\t\t\t{this.renderSafetyFormTable()}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tprivate doUpdate(e: React.MouseEvent<HTMLButtonElement>) {\n\t\te.preventDefault();\n\t\tnew ScheduleApi().appointmentHandlerPOST({\n\t\t\tauthToken: getAuthToken(),\n\t\t\tlocationId: '',\n\t\t\treq: copyAppointment(this.state),\n\t\t\tsearch: '',\n\t\t\twithContrast: false,\n\t\t}).then((releaseResp) => {\n\t\t\tif (releaseResp.success) {\n\t\t\t\tif (this.props.onConfirm instanceof Function) {\n\t\t\t\t\tthis.props.onConfirm();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\talert(releaseResp.message || 'Error');\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate doPrint(e: React.MouseEvent<HTMLButtonElement>) {\n\t\te.preventDefault();\n\t\twindow.print();\n\t}\n\n\tprivate doCancel(e: React.MouseEvent<HTMLButtonElement>) {\n\t\te.preventDefault();\n\t\tif (this.props.onCancel instanceof Function) {\n\t\t\tthis.props.onCancel();\n\t\t}\n\t}\n\n\tprivate renderTimePickModal() {\n\t\treturn (this.state.isPickTime && (\n\t\t\t<ReactModal isOpen={true} onRequestClose={() => this.setState({isPickTime: false})}\n\t\t\t\t\t\tclassName=\"modal-content-full animated fadeInUp\"\n\t\t\t\t\t\toverlayClassName=\"modal-wrapper\">\n\t\t\t\t<div className=\"centered white-box\">\n\t\t\t\t\t<TimePickWidget\n\t\t\t\t\t\tscan={{\n\t\t\t\t\t\t\tcontrast: this.state.serviceType || '',\n\t\t\t\t\t\t\tname: this.state.serviceType || 'Unknown',\n\t\t\t\t\t\t\tname2: '',\n\t\t\t\t\t\t\tname3: '',\n\t\t\t\t\t\t\tname4: '',\n\t\t\t\t\t\t\ttime: '30'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonPick={(slotAvailabilityTime) => this.setTime(slotAvailabilityTime)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</ReactModal>\n\t\t))\n\t}\n\n\tprivate setTime(slotAvailabilityTime: SlotAvailabilityTime) {\n\t\tif (typeof slotAvailabilityTime.slotId !== 'string') {\n\t\t\talert('No slotId was specified!');\n\t\t\treturn;\n\t\t}\n\t\tthis.setState({\n\t\t\tpartitionKey: slotAvailabilityTime.slotId.split(' ')[1],\n\t\t\trowKey: slotAvailabilityTime.slotId\n\t\t});\n\t}\n\n\tprivate pickNewTime(e) {\n\t\tif (e) {\n\t\t\te.preventDefault();\n\t\t}\n\t\tthis.setState({\n\t\t\tisPickTime: true,\n\t\t});\n\t}\n\n\tprivate renderSafetyFormTable() {\n\t\tconst sd = JSON.parse(this.state.surveyDataJson || '{}');\n\t\treturn (\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t{Object.keys(sd).map((row) => {\n\t\t\t\t\tif (excluded.indexOf(row) > -1) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<tr key={row}>\n\t\t\t\t\t\t\t<td>{row}</td>\n\t\t\t\t\t\t\t<td>{(typeof sd[row] === 'boolean' ? (sd[row] === true ? <span style={{color: 'red', fontWeight: 'bold'}}>Yes</span> : 'No') : sd[row].toString())}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t);\n\t}\n}\n\nconst excluded = [\n\t'fname',\n\t'lname',\n\t'email',\n\t'phone',\n\t'answers',\n\t'implants',\n\t'currentImplant',\n\t'haveOrder',\n\t'scan',\n\t'overrideSafetyWarning',\n\t'height',\n\t'weight',\n\t'doctorName',\n\t'doctorContact',\n\t'insFront',\n\t'insBack',\n\t'mriOrder',\n\t'carrierNumber',\n\t'groupNumber',\n\t'policyNumber',\n\t'timeSlot',\n\t'err',\n\t'dob',\n\t'address1',\n\t'address2',\n\t'city',\n\t'state',\n\t'zip',\n\t'optedIn',\n\t'validationResult',\n];\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n"],"sourceRoot":""}